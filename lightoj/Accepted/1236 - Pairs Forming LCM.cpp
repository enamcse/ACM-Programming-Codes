/**
* H:\Dropbox\Code\lightoj\1236 - Pairs Forming LCM.cpp
* Created on: 2015-02-02-05.46.44, Monday
* Verdict: Solved
* Author: Enamul Hassan
**/

#include <bits/stdc++.h>
#define _ ios_base::sync_with_stdio(0);cin.tie(0);

#define pb(a) push_back(a)
#define pp pop_back()
#define all(a) a.begin(),a.end()
#define ll long long
#define fread freopen("input.txt","r",stdin)
#define fwrite freopen("output.txt","w",stdout)
#define inf (1e18)
#define chng(a,b) a^=b^=a^=b;
#define clr(abc,z) memset(abc,z,sizeof(abc))
#define PI acos(-1)
#define pi 3.14159265358979323846264338327950288419716939937510
#define fr(i,a,b) for(i=a;i<=b;i++)
#define print1(a)    cout<<a<<endl
#define print2(a,b) cout<<a<<" "<<b<<endl
#define print3(a,b,c) cout<<a<<" "<<b<<" "<<c<<endl
#define mod 1000000007
#define sz 10000010
ll bigmod(ll sonkha,ll ghat,ll vag_const){ll vag_shesh=1;while(ghat>0){if(ghat%2==1){vag_shesh=(vag_shesh*sonkha)%vag_const;}ghat/=2;sonkha=(sonkha*sonkha)%vag_const;}return vag_shesh;}
ll inverse_mod(ll bivajok, ll vag_const){return bigmod(bivajok,vag_const-2, vag_const);}
using namespace std;

ll col[sz/64+10], dp[50];
int prime[664579], cnt, len;
vector< int >fact;


void seive()//1 indexed
{
    long long i,j,k;
    for(i=3;i<sz;i+=2)
         if(!(col[i/64]&(1LL<<(i%64))))
                for(j=i*i;j<sz;j+=2*i)
                    col[j/64]|=(1LL<<(j%64));

    prime[cnt++]=2;
    for (int i = 3; i<sz; i+=2)
        if(!(col[i/64]&(1LL<<(i%64))))
            prime[cnt++] = i;
}

void factorize(ll n)
{
    fact.clear();
    for (int i = 0; i<cnt&&prime[i]*(ll)prime[i]<=n; i++)
        if(n%prime[i]==0)
        {
            fact.pb(0);
            int temp = fact.size()-1;
            while(n%prime[i]==0)
            {
                fact[temp]++;
                n/=prime[i];
            }
        }
    if(n>1) fact.pb(1);
    len = fact.size();
}

ll rec(int pos)
{
    if(pos==len) return 1;
    ll &ret = dp[pos];
    if(ret!=-1) return ret;
    ret = 0;
    for (int i = 0; i<=fact[pos]; i++)
        ret+=rec(pos+1);

    for (int i = 0; i< fact[pos]; i++)
        ret+=rec(pos+1);
    return ret;
}

int main()
{
#ifdef ENAM
//    	fread;
//	fwrite;
#endif // ENAM
    int t, m, cas=1;
    ll n,res;
    _
	seive();
	cin>>t;

    while(t--)
    {
        clr(dp,-1);
        cin>>n;
        factorize(n);
        res=rec(0)+1;
        ///solution can also be generated by the following formula code instead of the upper line.
//        res=1;
//        for (int i=0; i<fact.size(); i++)
//            res*=(2*fact[i]+1);
//        res++;


        res>>=1;


        cout<<"Case "<<cas++<<": "<<res<<"\n";
    }


   return 0;
}
