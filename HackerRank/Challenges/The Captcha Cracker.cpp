/**
* H:\Dropbox\Code\HackerRank\Challenges\The Captcha Cracker.cpp
* Created on: 2015-09-15-11.14.06, Tuesday
* Verdict: Solved
* Author: Enamul Hassan
**/

#include <bits/stdc++.h>
#define _ ios_base::sync_with_stdio(0);cin.tie(0);

#define SZ(a) ((int)a.size())
#define sz 200005
#define pb push_back
#define pp pop_back()
#define all(a) a.begin(),a.end()
#define ll long long
#define cntbit(mask) __builtin_popcount(mask)
#define unify(a) stable_sort(a.begin(),a.end());a.resize(distance(a.begin(),unique(all(a))));
#define fread freopen("input/input24.txt","r",stdin)
#define fwrite freopen("output.txt","w",stdout)
#define inf (1e18)
#define chng(a,b) a^=b^=a^=b;
#define clr(abc,z) memset(abc,z,sizeof(abc))
#define PI acos(-1)
#define pi 3.14159265358979323846264338327950288419716939937510
#define fr(i,a,b) for(i=a;i<=b;i++)
#define cspf printf("Case %d:", cas++);
#define csco cout<<"Case "<<cas++<<":";
#define mod 1000000007


using namespace std;

int n, m;

char chars[36][15][15] = {
    {//A
"0000000000",
"0000110000",
"0001111000",
"0011001100",
"0110000110",
"0110000110",
"0110000110",
"0111111110",
"0110000110",
"0110000110",
"0110000110",
"0000000000"
    },
    {//B
"0000000000",
"0111111000",
"0110001100",
"0110000110",
"0110001100",
"0111111000",
"0110001100",
"0110000110",
"0110000110",
"0110001100",
"0111111000",
"0000000000"
    },
    {//C
"0000000000",
"0001111100",
"0011000110",
"0110000010",
"0110000000",
"0110000000",
"0110000000",
"0110000000",
"0110000010",
"0011000110",
"0001111100",
"0000000000"
    },
    {//D
"0000000000",
"0111111000",
"0110001100",
"0110000110",
"0110000110",
"0110000110",
"0110000110",
"0110000110",
"0110000110",
"0110001100",
"0111111000",
"0000000000"
    },
    {//E
"0000000000",
"0111111100",
"0110000000",
"0110000000",
"0110000000",
"0111111000",
"0110000000",
"0110000000",
"0110000000",
"0110000000",
"0111111100",
"0000000000"
    },
    {//F
"0000000000",
"0111111110",
"0110000000",
"0110000000",
"0110000000",
"0111111000",
"0110000000",
"0110000000",
"0110000000",
"0110000000",
"0110000000",
"0000000000"
    },
    {//G
"00000000000",
"00011111000",
"00110001100",
"01100000000",
"01100000000",
"01100000000",
"01100011100",
"01100001100",
"01100001100",
"00110001100",
"00011111000",
"00000000000"
    },
    {//H
"0000000000",
"0110000110",
"0110000110",
"0110000110",
"0110000110",
"0111111110",
"0110000110",
"0110000110",
"0110000110",
"0110000110",
"0110000110",
"0000000000"
    },
    {//I
"0000000000",
"0011111100",
"0000110000",
"0000110000",
"0000110000",
"0000110000",
"0000110000",
"0000110000",
"0000110000",
"0000110000",
"0011111100",
"0000000000"
    },
    {//J
"0000000000",
"0000111100",
"0000001100",
"0000001100",
"0000001100",
"0000001100",
"0000001100",
"0000001100",
"0010001100",
"0011011000",
"0001110000",
"0000000000"
    },
    {//K
"0000000000",
"0110000110",
"0110001100",
"0110011000",
"0110110000",
"0111100000",
"0111100000",
"0110110000",
"0110011000",
"0110001100",
"0110000110",
"0000000000"
    },
    {//L
"0000000000",
"0110000000",
"0110000000",
"0110000000",
"0110000000",
"0110000000",
"0110000000",
"0110000000",
"0110000000",
"0110000000",
"0111111100",
"0000000000"
    },
    {//M
"0000000000",
"0110000110",
"0111001110",
"0111111110",
"0110110110",
"0110110110",
"0110110110",
"0110000110",
"0110000110",
"0110000110",
"0110000110",
"0000000000"
    },
    {//N
"0000000000",
"0110000110",
"0111000110",
"0111100110",
"0111100110",
"0110110110",
"0110110110",
"0110011110",
"0110001110",
"0110001110",
"0110000110",
"0000000000"
    },
    {//O
"0000000000",
"0001111000",
"0011001100",
"0110000110",
"0110000110",
"0110000110",
"0110000110",
"0110000110",
"0110000110",
"0011001100",
"0001111000",
"0000000000"
    },
    {//P
"0000000000",
"0111111100",
"0110000110",
"0110000110",
"0110000110",
"0111111100",
"0110000000",
"0110000000",
"0110000000",
"0110000000",
"0110000000",
"0000000000"
    },
    {//Q
"0000000000",
"0001111000",
"0011001100",
"0110000110",
"0110000110",
"0110000110",
"0110000110",
"0110110110",
"0110011110",
"0011001100",
"0001111010",
"0000000000"
    },
    {//R
"0000000000",
"0111111100",
"0110000110",
"0110000110",
"0110000110",
"0111111100",
"0111110000",
"0110011000",
"0110001100",
"0110000110",
"0110000110",
"0000000000"
    },
    {//S
"0000000000",
"0011111100",
"0110000110",
"0110000000",
"0110000000",
"0011111100",
"0000000110",
"0000000110",
"0000000110",
"0110000110",
"0011111100",
"0000000000"
    },
    {//T
"0000000000",
"0111111110",
"0000110000",
"0000110000",
"0000110000",
"0000110000",
"0000110000",
"0000110000",
"0000110000",
"0000110000",
"0000110000",
"0000000000"
    },
    {//U
"0000000000",
"0110000110",
"0110000110",
"0110000110",
"0110000110",
"0110000110",
"0110000110",
"0110000110",
"0110000110",
"0011001100",
"0001111000",
"0000000000"
    },
    {//V
"0000000000",
"0110000110",
"0110000110",
"0110000110",
"0011001100",
"0011001100",
"0011001100",
"0001111000",
"0001111000",
"0000110000",
"0000110000",
"0000000000"
    },
    {//W
"0000000000",
"0110000110",
"0110000110",
"0110000110",
"0110000110",
"0110110110",
"0110110110",
"0110110110",
"0111111110",
"0111001110",
"0110000110",
"0000000000"
    },
    {//X
"0000000000",
"0110000110",
"0110000110",
"0011001100",
"0001111000",
"0000110000",
"0000110000",
"0001111000",
"0011001100",
"0110000110",
"0110000110",
"0000000000"
    },
    {//Y
"0000000000",
"0110000110",
"0110000110",
"0011001100",
"0001111000",
"0000110000",
"0000110000",
"0000110000",
"0000110000",
"0000110000",
"0000110000",
"0000000000"
    },
    {//Z
"0000000000",
"0111111100",
"0000001100",
"0000001100",
"0000011000",
"0000110000",
"0001100000",
"0011000000",
"0110000000",
"0110000000",
"0111111100",
"0000000000"
    },
    {//0
"0000000000",
"0000110000",
"0001111000",
"0011001100",
"0110000110",
"0110000110",
"0110000110",
"0110000110",
"0011001100",
"0001111000",
"0000110000",
"0000000000"
    },
    {//1
"0000000000",
"0000110000",
"0001110000",
"0011110000",
"0000110000",
"0000110000",
"0000110000",
"0000110000",
"0000110000",
"0000110000",
"0011111100",
"0000000000"
    },
    {//2
"0000000000",
"0001111000",
"0011001100",
"0110000110",
"0000000110",
"0000001100",
"0000011000",
"0000110000",
"0001100000",
"0011000000",
"0111111110",
"0000000000"
    },
    {//3
"0000000000",
"0011111000",
"0110001100",
"0000000110",
"0000001100",
"0000111000",
"0000001100",
"0000000110",
"0000000110",
"0110001100",
"0011111000",
"0000000000"
    },
    {//4
"0000000000",
"0000001100",
"0000011100",
"0000111100",
"0001101100",
"0011001100",
"0110001100",
"0111111110",
"0000001100",
"0000001100",
"0000001100",
"0000000000"
    },
    {//5
"0000000000",
"0111111100",
"0110000000",
"0110000000",
"0110111000",
"0111001100",
"0000000110",
"0000000110",
"0110000110",
"0011001100",
"0001111000",
"0000000000"
    },
    {//6
"0000000000",
"0001111000",
"0011001100",
"0110000100",
"0110000000",
"0110111000",
"0111001100",
"0110000110",
"0110000110",
"0011001100",
"0001111000",
"0000000000"
    },
    {//7
"0000000000",
"0111111110",
"0000000110",
"0000000110",
"0000001100",
"0000011000",
"0000110000",
"0001100000",
"0011000000",
"0110000000",
"0110000000",
"0000000000"
    },
    {//8
"0000000000",
"0001111000",
"0011001100",
"0110000110",
"0011001100",
"0001111000",
"0011001100",
"0110000110",
"0110000110",
"0011001100",
"0001111000",
"0000000000"
    },
    {//9
"0000000000",
"0001111000",
"0011001100",
"0110000110",
"0110000110",
"0011001110",
"0001110110",
"0000000110",
"0010000110",
"0011001100",
"0001111000",
"0000000000"
    }
};




bool grid[35][65];

bool calc(string &s)
{
    int sum=0,n = s.size(),st=0,now;
    char line[5];
    for(int i = 0; i<=n; i++)
    {
//        cout<<"|"<<s[i]<<"|"<<endl;
        if(s[i]==','||s[i]==' '||s[i] ==0)
        {
            line[st]=0;
            sscanf(line,"%d", &now);
            sum+=now;
            st = 0;
        }
        else line[st++]=s[i];
    }
    return (sum/3)<80;
}

void print(int t)
{
    int l;
//    l = m;
    l = 10;
    for (int i = 10; i<n-8; i++)
    {
        cout<<"\"";
        for (int j = t; j<t+l; j++)
            cout<<grid[i][j];
        cout<<"\""<<", "[n-9==i]<<endl;
    }
    cout<<endl;
}

char getCh(int t)
{
    int mx=0;
    char ind=0;
    for (int i = 0; i<36; i++)
    {
        int cnt = 0;
        for (int j = 0; j<12; j++)
        {
            for (int k = 0; k<10; k++)
                if(chars[i][j][k]-'0'==grid[10+j][t+k])cnt++;
        }
        if(cnt>mx)
        {
            mx = cnt;
            ind = (i<26?i+'A':i-26+'0');
        }
    }
    return ind;
}

int main()
{
#ifdef ENAM
    	fread;
	fwrite;
#endif // ENAM
    int t,  cas=1,l;
    string s;
    _
//    clock_t begin, end;
//    double time_spent;
//    begin = clock();
    cin>>n>>m;

    for (int i = 0; i<n; i++)
        for (int j = 0; j<m; j++)
        {
            cin>>s;
//            cout<<s<<endl;
            grid[i][j]=calc(s);
        }
//    print(4);
//    print(13);
//    print(22);
//    print(31);
//    print(40);

    cout<<getCh(4);
    cout<<getCh(13);
    cout<<getCh(22);
    cout<<getCh(31);
    cout<<getCh(40);

//    end = clock();
//    time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
//    cerr<<"Time spent = "<<time_spent<<endl;

    return 0;
}
