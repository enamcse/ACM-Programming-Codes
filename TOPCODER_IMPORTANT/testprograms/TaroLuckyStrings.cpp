#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class TaroLuckyStrings {
public:
	int getNumber(int N, int K) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	TaroLuckyStrings *obj;
	int answer;
	obj = new TaroLuckyStrings();
	clock_t startTime = clock();
	answer = obj->getNumber(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	int p1;
	int p2;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 2;
	p1 = 0;
	p2 = 3;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 2;
	p1 = 1;
	p2 = 4;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 7;
	p1 = 4;
	p2 = 128;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = 17;
	p1 = 6;
	p2 = 130238;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = 1000;
	p1 = 247;
	p2 = 839204010;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Cat Taro likes lucky strings.
// The digits 4 and 7 are considered lucky.
// A lucky string is a string such that each of its characters is a lucky digit (i.e., either '4' or '7').
// 
// 
// 
// 
// Consider some lucky string S.
// In one turn Taro can swap any two (not necessarily consecutive) characters of that string.
// He considers the string S very lucky if its characters can be sorted into non-decreasing order using at most K turns.
// 
// 
// 
// 
// You are given two ints N and K. Let X be the number of different very lucky strings of length N. Return the value (X modulo 1,000,000,007).
// 
// 
// DEFINITION
// Class:TaroLuckyStrings
// Method:getNumber
// Parameters:int, int
// Returns:int
// Method signature:int getNumber(int N, int K)
// 
// 
// CONSTRAINTS
// -N will be between 1 and 1000, inclusive.
// -K will be between 0 and 1000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 2
// 0
// 
// Returns: 3
// 
// There are 4 lucky strings in this case: "44", "47", "74", and "77". The string "74" is not sorted. (It can be sorted in one turn, but as K=0, even that is too much.) All other strings are already sorted. Thus, the answer is 3.
// 
// 1)
// 2
// 1
// 
// Returns: 4
// 
// All 4 lucky strings are very lucky in this case.
// 
// 2)
// 7
// 4
// 
// Returns: 128
// 
// 
// 
// 3)
// 17
// 6
// 
// Returns: 130238
// 
// 
// 
// 4)
// 1000
// 247
// 
// Returns: 839204010
// 
// 
// 
// END KAWIGIEDIT TESTING
