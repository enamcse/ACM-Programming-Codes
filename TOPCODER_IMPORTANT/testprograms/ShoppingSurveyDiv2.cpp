#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class ShoppingSurveyDiv2 {
public:

	int minValue(int N, vector <int> s) {
		int cnt=0, m = s.size(), t=0;
		int now[200];

		for (int i = 0; i<N; i++)
		    now[i] = 0;

		for (int i = 0; i<m; i++)
        {
            while(s[i])
            {
                now[t]++;
                t++;
                t%=N;
                s[i]--;
            }
        }

        for (int i = 0; i<N; i++)
		    if(now[i] == m) cnt++;
        return cnt;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	ShoppingSurveyDiv2 *obj;
	int answer;
	obj = new ShoppingSurveyDiv2();
	clock_t startTime = clock();
	answer = obj->minValue(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	vector <int> p1;
	int p2;

	{
	// ----- test 0 -----
	p0 = 5;
	int t1[] = {3,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 100;
	int t1[] = {97};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 97;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 10;
	int t1[] = {9,9,9,9,9};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 5;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 7;
	int t1[] = {1,2,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = 5;
	int t1[] = {3,3,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// A store sells M different items, conveniently numbered 0 through M-1.
// For a shopping survey you interviewed N customers.
// Each customer responded to the survey with a list of items they've bought.
// Each customer bought at most one of each item.
// It is possible that some customers did not buy anything at all.
//
//
//
// After collecting the responses, you've summed up the results and found that s[i] people have bought item i.
// Due to an unfortunate accident, you've then lost the actual survey responses.
// All you have left are the values s[i] you computed.
//
//
//
// You are now supposed to report the number of big shoppers among the survey respondents.
// A big shopper is defined as a customer who has bought all M items.
// Of course, having lost the detailed responses, you might be unable to determine the actual number of big shoppers.
//
//
//
// You are given the int N and the vector <int> s with M elements.
// Compute and return the smallest possible number of big shoppers.
//
//
//
// DEFINITION
// Class:ShoppingSurveyDiv2
// Method:minValue
// Parameters:int, vector <int>
// Returns:int
// Method signature:int minValue(int N, vector <int> s)
//
//
// CONSTRAINTS
// -N will be between 1 and 100, inclusive.
// -s will contain between 1 and 100 elements, inclusive.
// -Each element in s will be between 0 and N, inclusive.
//
//
// EXAMPLES
//
// 0)
// 5
// {3, 3}
//
// Returns: 1
//
//
// There are 5 customers and 2 items in the store.
// Each of the items was bought by three of the customers.
// Since there are five people and a total of six bought items, we must have at least one big shopper.
// And we can easily verify that there could have been exactly one big shopper and four other customers who have bought one item each.
//
// 1)
// 100
// {97}
//
// Returns: 97
//
//
//
// 2)
// 10
// {9, 9, 9, 9, 9}
//
// Returns: 5
//
//
//
// 3)
// 7
// {1, 2, 3}
//
// Returns: 0
//
//
//
// 4)
// 5
// {3, 3, 3}
//
// Returns: 0
//
//
//
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
