#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class BearPlaysDiv2 {
public:
    map< pair< pair<int,int>,int >,bool> mp;

    bool rec(int x, int y, int z)
    {
//        cout<<x<<":"<<y<<":"<<z<<endl;
        if(x==y&&z == x) return 1;
        if(abs(x-y)>500 ||abs(z-x)>500 ||abs(y-z)>500) return 0;
        if(mp.count({ {x,y},z }  )) return mp[{ {x,y},z }];
        bool &ret = mp[{ {x,y},z }];

        ret = false;
        if(x<y) ret|=rec(x+x,y-x,z);
        if(y<x) ret|=rec(x-y,y+x,z);
        if(z<y) ret|=rec(x,y-z,z+z);
        if(z>y) ret|=rec(x,y+y,z-y);
        if(z>x) ret|=rec(x+x,y,z-x);
        if(z<x) ret|=rec(x-z,y,z+z);
        return ret;
    }




	string equalPiles(int A, int B, int C) {
	    mp.clear();
       return (rec(A,B,C)?"possible":"impossilbe");
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	BearPlaysDiv2 *obj;
	string answer;
	obj = new BearPlaysDiv2();
	clock_t startTime = clock();
	answer = obj->equalPiles(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	int p0;
	int p1;
	int p2;
	string p3;

	// ----- test 0 -----
	disabled = false;
	p0 = 10;
	p1 = 15;
	p2 = 35;
	p3 = "possible";
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = 1;
	p1 = 1;
	p2 = 2;
	p3 = "impossible";
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = 4;
	p1 = 6;
	p2 = 8;
	p3 = "impossible";
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = 18;
	p1 = 18;
	p2 = 18;
	p3 = "possible";
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = 225;
	p1 = 500;
	p2 = 475;
	p3 = "possible";
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Limak is a little bear who loves to play.
// Today he is playing by moving some stones between three piles of stones.
// Initially, the piles contain A, B, and C stones, respectively.
// Limak's goal is to produce three equal piles.
//
// Limak will try reaching his goal by performing a sequence of zero or more operations.
// In each operation he will start by choosing two unequal piles.
// Let's label their sizes X and Y in such a way that X < Y.
// He will then double the size of the smaller chosen pile by moving some stones between the two chosen piles.
// Formally, the new sizes of the two chosen piles will be X+X and Y-X.
//
// You are given the ints A, B, and C.
// Return "possible" (quotes for clarity) if there is a sequence of operations that will make all three piles equal.
// Otherwise, return "impossible".
//
// DEFINITION
// Class:BearPlaysDiv2
// Method:equalPiles
// Parameters:int, int, int
// Returns:string
// Method signature:string equalPiles(int A, int B, int C)
//
//
// CONSTRAINTS
// -A, B and C will be between 1 and 500, inclusive.
//
//
// EXAMPLES
//
// 0)
// 10
// 15
// 35
//
// Returns: "possible"
//
// One valid sequence of operations looks as follows:
//
// The initial pile sizes are 10, 15, and 35.
// For the first operation Limak will choose the piles with 15 and 35 stones. After doubling the size of the smaller pile the new sizes of these two piles will be 30 and 20.
// After the first operation the pile sizes are 10, 30, and 20.
// For the second operation Limak will choose the piles with 10 and 30 stones. After doubling the size of the smaller pile the new sizes of these two piles will be 20 and 20.
// After the second operation each pile has 20 stones, which means that Limak has reached his goal.
//
//
// 1)
// 1
// 1
// 2
//
// Returns: "impossible"
//
// No matter what Limak does, there will always be two piles with a single stone each and one pile with 2 stones.
//
// 2)
// 4
// 6
// 8
//
// Returns: "impossible"
//
//
//
// 3)
// 18
// 18
// 18
//
// Returns: "possible"
//
// Sometimes Limak can reach his goal without making any operations.
//
// 4)
// 225
// 500
// 475
//
// Returns: "possible"
//
//
//
// END KAWIGIEDIT TESTING
