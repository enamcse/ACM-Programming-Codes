#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class ColorfulGarden {
public:
	vector <string> rearrange(vector <string> garden) {
		int let[26];
		vector<string>ret;
		clr(let,0);
		int n = garden[0].size(), x = 0;
		for (int i =0; i<n; i++)
		    {let[ garden[0][i]-'a' ]++;let[ garden[1][i]-'a' ]++;}
        for (int i = 0; i<26; i++)
            if(let[i]>n) return ret;
        string s,s1;
        for (int i = 0; i<n; i++)
            s+=' ';
        s1 = s;
        for (int i = 0; i<26;i++)
        {
            cout<<i<<" -> "<<let[i]<<endl;
            while(let[i]--)
            {
                if(x<n){
                    if(x%2==0) s[x]='a'+i;
                    else s1[x]='a'+i;
                }
                else{
                    x-=n;
                    if(x%2==1) s[x]='a'+i;
                    else s1[x]='a'+i;
                    x+=n;
                }
                x++;
            }
        }

        ret.pb(s);
        ret.pb(s1);
        return ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector <string> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	ColorfulGarden *obj;
	vector <string> answer;
	obj = new ColorfulGarden();
	clock_t startTime = clock();
	answer = obj->rearrange(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p1[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	vector <string> p0;
	vector <string> p1;

	// ----- test 0 -----
	disabled = false;
	p0 = {"aa","bb"};
	p1 = {"ab","ba"};
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = {"xxxx","xxxx"};
	p1 = {};
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = {"abcd","abcd"};
	p1 = {"abcd","dcba"};
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = {"abcdefghijklm","nopqrstuvwxyz"};
	p1 = {"abcdefghijklm","nopqrstuvwxyz"};
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = {"aaa","aab"};
	p1 = {};
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// We have a garden that contains some flowers.
// The flowers are arranged into a rectangle with 2 rows and n columns.
// You are given a vector <string> garden that describes our garden.
// The vector <string> garden has two elements, each with n characters.
// Each character in garden represents one flower.
// Different characters in garden represent different colors.
//
//
//
// Two flowers are considered adjacent if they are in the same column, or if they are next to each other in the same row.
// Your goal is to produce a garden in which no pair of adjacent flowers shares the same color.
// You may rearrange the flowers in your garden arbitrarily (without changing its shape).
// More precisely, you may swap any two flowers in your garden, and you may do so arbitrarily many times.
//
//
//
// If the goal can be reached, return a vector <string> that will encode the resulting garden in the same format as was used for garden.
// If there are multiple solutions, you may return any of them.
// If there is no solution, return an empty vector <string>.
//
//
// DEFINITION
// Class:ColorfulGarden
// Method:rearrange
// Parameters:vector <string>
// Returns:vector <string>
// Method signature:vector <string> rearrange(vector <string> garden)
//
//
// CONSTRAINTS
// -garden will contain exactly 2 elements, inclusive.
// -Each element in garden will contain between 1 and 50 characters, inclusive.
// -Each element in garden will contain the same number of characters.
// -Each character in garden will be a lowercase letter ('a'-'z').
//
//
// EXAMPLES
//
// 0)
// {"aa",
//  "bb"}
//
// Returns: {"ab", "ba" }
//
// Swapping garden[0][1] and garden[1][1] produces a valid garden.
//
// 1)
// {"xxxx",
//  "xxxx"}
//
// Returns: { }
//
// No matter what we do, we will end up with the same result, and that is not a valid solution.
//
// 2)
// {"abcd",
//  "abcd"}
//
// Returns: {"abcd", "dcba" }
//
//
//
// 3)
// {"abcdefghijklm",
//  "nopqrstuvwxyz"}
//
// Returns: {"abcdefghijklm", "nopqrstuvwxyz" }
//
//
//
// 4)
// {"aaa",
//  "aab"}
//
// Returns: { }
//
//
//
// END KAWIGIEDIT TESTING
