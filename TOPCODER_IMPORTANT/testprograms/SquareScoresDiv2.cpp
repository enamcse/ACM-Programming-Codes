#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class SquareScoresDiv2 {
public:
	int getscore(string s) {
		int n =s.size(), ans=0,cnt=0;
		char last;
		for (int i = 0; i<n; i++)
        {
            if(cnt==0)
            {
                last = s[i];
                cnt++;
            }
            else if(last==s[i]) cnt++;
            else
            {
                last = s[i];
                ans+=((cnt+1)*cnt)/2;
                cnt=1;
            }
        }
        if(cnt) ans+=((cnt+1)*cnt)/2;
        return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	SquareScoresDiv2 *obj;
	int answer;
	obj = new SquareScoresDiv2();
	clock_t startTime = clock();
	answer = obj->getscore(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	string p0;
	int p1;

	// ----- test 0 -----
	disabled = false;
	p0 = "aaaba";
	p1 = 8;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = "zzzxxzz";
	p1 = 12;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = "abcdefghijklmnopqrstuvwxyz";
	p1 = 26;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = "p";
	p1 = 1;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";
	p1 = 5050;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// A substring of a string is a contiguous sequence of characters from the string.
// For example, each of the strings "ab", "bcd", and "e" is a substring of "abcde".
// On the other hand, "cba", "ace", and "f" are not substrings of "abcde".
//
//
// The score of a string S is the number of ways in which we can select a non-empty substring of S such that all characters in the substring are the same.
// If two substrings consist of the same letters but occur at different places in S, they are still considered different.
// For example, the score of "aaaba" is 8: there are four occurrences of the substring "a", two occurrences of "aa", one occurrence of "aaa", and one of "b".
//
//
// On her birthday, Maki got a string s from her friend Niko as a present.
// Calculate and return its score.
//
//
//
// DEFINITION
// Class:SquareScoresDiv2
// Method:getscore
// Parameters:string
// Returns:int
// Method signature:int getscore(string s)
//
//
// CONSTRAINTS
// -The length of s will be between 1 and 100, inclusive.
// -Each character in s will be a lowercase letter ('a'-'z').
//
//
// EXAMPLES
//
// 0)
// "aaaba"
//
// Returns: 8
//
// The example explained above.
//
// 1)
// "zzzxxzz"
//
// Returns: 12
//
//
//
// 2)
// "abcdefghijklmnopqrstuvwxyz"
//
// Returns: 26
//
//
//
// 3)
// "p"
//
// Returns: 1
//
//
//
// 4)
// "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
//
// Returns: 5050
//
// All substrings satisfy the condition.
//
// END KAWIGIEDIT TESTING
