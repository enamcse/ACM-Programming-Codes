#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class ColorfulChocolates {
public:
	int maximumSpread(string chocolates, int maxSwaps) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1;
	cout << "]" << endl;
	ColorfulChocolates *obj;
	int answer;
	obj = new ColorfulChocolates();
	clock_t startTime = clock();
	answer = obj->maximumSpread(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	string p0;
	int p1;
	int p2;
	
	// ----- test 0 -----
	disabled = false;
	p0 = "ABCDCBC";
	p1 = 1;
	p2 = 2;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = "ABCDCBC";
	p1 = 2;
	p2 = 3;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = "ABBABABBA";
	p1 = 3;
	p2 = 4;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = "ABBABABBA";
	p1 = 4;
	p2 = 5;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = "QASOKZNHWNFODOQNHGQKGLIHTPJUVGKLHFZTGPDCEKSJYIWFOO";
	p1 = 77;
	p2 = 5;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Beaver Bindu has some chocolates arranged in a row.
// The wrapping of each chocolate has a single color.
// Multiple chocolates can share the same color.
// In this problem, each of the possible colors is represented by an uppercase letter.
// You are given a string chocolates.
// For each i, the i-th chocolate (0-based index) in the row has the color chocolates[i].
// 
// 
// The spread of a row of chocolates is the maximum number of adjacent chocolates that all share the same color.
// Formally, the spread can be defined as the maximum value of (j-i+1), where i <= j and all the chocolates in the positions between i and j, inclusive, have the same color.
// 
// 
// You are also given an int maxSwaps.
// Bindu can swap any two adjacent chocolates.
// She has decided to make at most maxSwaps such swaps.
// 
// 
// Return the maximum spread she can obtain.
// 
// 
// DEFINITION
// Class:ColorfulChocolates
// Method:maximumSpread
// Parameters:string, int
// Returns:int
// Method signature:int maximumSpread(string chocolates, int maxSwaps)
// 
// 
// CONSTRAINTS
// -chocolates will contain between 1 and 50 characters, inclusive.
// -Each character in chocolates will be an uppercase letter ('A'-'Z').
// -maxSwaps will be between 1 and 2500, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// "ABCDCBC"
// 1
// 
// Returns: 2
// 
// One optimal solution is to swap chocolates at positions 2 and 3, obtaining the row "ABDCCBC", which has spread 2.
// 
// 
// 1)
// "ABCDCBC"
// 2
// 
// Returns: 3
// 
// The only optimal solution is to produce the row "ABDCCCB".
// 
// 
// 2)
// "ABBABABBA"
// 3
// 
// Returns: 4
// 
// The row "ABBBBAABA" can be produced with 3 swaps.
// 
// 3)
// "ABBABABBA"
// 4
// 
// Returns: 5
// 
// An optimal solution is to produce the row "AABBBBBAA".
// 
// 4)
// "QASOKZNHWNFODOQNHGQKGLIHTPJUVGKLHFZTGPDCEKSJYIWFOO"
// 77
// 
// Returns: 5
// 
// END KAWIGIEDIT TESTING
