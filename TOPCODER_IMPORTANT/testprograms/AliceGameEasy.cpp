#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;

class AliceGameEasy {
public:
	long long findMinimumValue(long long x, long long y) {
		ll now = x+y;
		now*=8LL;
		now++;
		ll sq = sqrt(now);

		if(sq*sq==now)
        {
            sq--;
            if(sq%2==0)
            {
                sq/=2LL;
                int cnt=0;
                for (int i = sq; i>0; i--)
                {
                    if(x>=i)
                    {
                        cnt++;
                        x-=i;
                    }
                }
                return cnt;
            }
        }
		return -1LL;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, long long p0, long long p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	AliceGameEasy *obj;
	long long answer;
	obj = new AliceGameEasy();
	clock_t startTime = clock();
	answer = obj->findMinimumValue(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	long long p0;
	long long p1;
	long long p2;

	// ----- test 0 -----
	disabled = false;
	p0 = 7ll;
	p1 = 14ll;
	p2 = 2ll;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = 10ll;
	p1 = 0ll;
	p2 = 4ll;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = 932599670050ll;
	p1 = 67400241741ll;
	p2 = 1047062ll;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = 7ll;
	p1 = 13ll;
	p2 = -1ll;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = 0ll;
	p1 = 0ll;
	p2 = 0ll;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 5 -----
	disabled = false;
	p0 = 100000ll;
	p1 = 400500ll;
	p2 = 106ll;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// Alice and Kirito just played a game.
// The game consisted of a finite (possibly empty) sequence of turns.
// You do not know the exact number of turns.
// The turns were numbered starting from 1.
// In each turn, exactly one of our two players won.
// The winner of turn i scored i points.
//
//
//
// You are given two long longs x and y.
// Find out whether it is possible that at the end of the game Alice had exactly x points and Kirito had exactly y points.
// If it is possible, return the smallest number of turns Alice could have won.
// If the given final result is not possible, return -1 instead.
//
//
// DEFINITION
// Class:AliceGameEasy
// Method:findMinimumValue
// Parameters:long long, long long
// Returns:long long
// Method signature:long long findMinimumValue(long long x, long long y)
//
//
// CONSTRAINTS
// -x and y will be between 0 and 1,000,000,000,000(10^12), inclusive.
//
//
// EXAMPLES
//
// 0)
// 7
// 14
//
// Returns: 2
//
// This final result is possible.
// One possibility is that Alice won turns 1, 2, and 4 (for 1+2+4 = 7 points) and Kirito won turns 3, 5, and 6 (for 3+5+6 = 14 points).
// However, there are also some other possibilities in which Alice only won two of the six turns, so the correct answer is 2.
//
// 1)
// 10
// 0
//
// Returns: 4
//
// There must have been four turns and Alice must have won all four of them.
//
// 2)
// 932599670050
// 67400241741
//
// Returns: 1047062
//
// Watch out for integer overflow.
//
// 3)
// 7
// 13
//
// Returns: -1
//
//
//
// 4)
// 0
// 0
//
// Returns: 0
//
//
//
// 5)
// 100000
// 400500
//
// Returns: 106
//
//
//
// END KAWIGIEDIT TESTING
