#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;
bool siv[200000];
int prime[200000],cnt;

class TwoNumberGroupsEasy {
public:

    void seive()
    {
        int sq = sqrt(1e5+100);
        for (int i = 3; i<=sq; i+=2)
            if(!siv[i])
                for (int j = i*i; j<=100100; j+=i+i)
                    siv[j]=true;
        prime[cnt++]=2;
        for (int i = 3; i<=100100; i+=2)
            if(!siv[i]) prime[cnt++]=i;
    }


	int solve(vector <int> A, vector <int> numA, vector <int> B, vector <int> numB) {
		seive();
		ll ans = inf, tew;
		for (int i = 0; i<cnt; i++)
        {
            map<int,int>a,b;
            set<int>s;
            for (int j = 0; j<A.size(); j++)
            {
                s.insert(A[j]%prime[i]);
                a[ A[j]%prime[i] ]+=numA[j];
            }

            for (int j = 0; j<B.size(); j++)
            {
                s.insert(B[j]%prime[i]);
                b[ B[j]%prime[i] ]+=numB[j];
            }
            vector<int>v(all(s));
            tew = 0;
            for (int j = 0; j<v.size(); j++)
            {
                tew+=abs(a[ v[j] ] - b[ v[j] ]);
            }
            ans = min(ans,tew);

        }
        return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, vector <int> p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}";
	cout << "]" << endl;
	TwoNumberGroupsEasy *obj;
	int answer;
	obj = new TwoNumberGroupsEasy();
	clock_t startTime = clock();
	answer = obj->solve(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	vector <int> p0;
	vector <int> p1;
	vector <int> p2;
	vector <int> p3;
	int p4;

	// ----- test 0 -----
	disabled = false;
	p0 = {1,2,3,4};
	p1 = {2,1,1,1};
	p2 = {5,6,7,8};
	p3 = {1,1,1,2};
	p4 = 2;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = {5,7};
	p1 = {1,1};
	p2 = {12,14};
	p3 = {1,1};
	p4 = 0;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = {100};
	p1 = {2};
	p2 = {1};
	p3 = {1};
	p4 = 1;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = {1};
	p1 = {1};
	p2 = {1};
	p3 = {1};
	p4 = 0;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = {5};
	p1 = {1};
	p2 = {6};
	p3 = {1};
	p4 = 2;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 5 -----
	disabled = false;
	p0 = {733815053,566264976,984867861,989991438,407773802,701974785,599158121,713333928,530987873,702824160};
	p1 = {8941,4607,1967,2401,495,7654,7078,4213,5485,1026};
	p2 = {878175560,125398919,556001255,570171347,643069772,787443662,166157535,480000834,754757229,101000799};
	p3 = {242,6538,7921,2658,1595,3049,655,6945,7350,6915};
	p4 = 7;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// A multiset is the same thing as a set, with the difference that a multiset can contain multiple copies of the same element.
// For example, {1,1,1,2,3} is a multiset that contains three 1s, one 2, and one 3.
//
//
//
// The distance between two multisets is the smallest total number of elements we need to erase from them in order to make them equal.
// For example, the distance between {1,1,2,2,3} and {1,2,2,4} is 3.
// Note that we can compute distance as follows:
// For each value, we count its occurrences in the first multiset, we count its occurrences in the second multiset, and we write down the difference between those two counts.
// The distance is then equal to the sum of all values we wrote down.
//
//
//
// If S is a multiset, then (S modulo M) is the multiset of all values (x modulo M) where x belongs to S.
// For example, if S = {11,12,13,21,22} and M = 10, then (S modulo M) = {1,2,3,1,2} = {1,1,2,2,3}.
//
//
//
// You have two multisets called A and B.
// The first multiset is described by the vector <int>s A and numA.
// For each valid i, the multiset contains numA[i] copies of the value A[i].
// The second multiset is described by the vector <int>s B and numB in the same way.
//
//
//
// We are now looking for a positive integer M with the following properties:
// M must be greater than 1, and the distance between (A modulo M) and (B modulo M) must be as small as possible.
// Compute and return the smallest possible distance.
//
//
// DEFINITION
// Class:TwoNumberGroupsEasy
// Method:solve
// Parameters:vector <int>, vector <int>, vector <int>, vector <int>
// Returns:int
// Method signature:int solve(vector <int> A, vector <int> numA, vector <int> B, vector <int> numB)
//
//
// CONSTRAINTS
// -A and B will each contain between 1 and 10 elements, inclusive.
// -All elements of A will be distinct.
// -All elements of B will be distinct.
// -The number of elements in numA will be the same as the number of elements in A.
// -The number of elements in numB will be the same as the number of elements in B.
// -All elements of A and B will be between 1 and 1,000,000,000, inclusive.
// -All elements of numA and numB will be between 1 and 100,000, inclusive.
//
//
// EXAMPLES
//
// 0)
// {1,2,3,4}
// {2,1,1,1}
// {5,6,7,8}
// {1,1,1,2}
//
// Returns: 2
//
// This input describes the multisets A = {1,1,2,3,4} and B = {5,6,7,8,8}.
// For M=2, we have (A modulo M) = {0,0,1,1,1} and (B modulo M) = {0,0,0,1,1}.
// The distance between these two multisets is 2, and that is the best we can get.
//
// 1)
// {5,7}
// {1,1}
// {12,14}
// {1,1}
//
// Returns: 0
//
// The optimal solution is obtained for M = 7.
//
// 2)
// {100}
// {2}
// {1}
// {1}
//
// Returns: 1
//
//
//
// 3)
// {1}
// {1}
// {1}
// {1}
//
// Returns: 0
//
//
//
// 4)
// {5}
// {1}
// {6}
// {1}
//
// Returns: 2
//
//
//
// 5)
// {733815053,566264976,984867861,989991438,407773802,701974785,599158121,713333928,530987873,702824160}
// {8941,4607,1967,2401,495,7654,7078,4213,5485,1026}
// {878175560,125398919,556001255,570171347,643069772,787443662,166157535,480000834,754757229,101000799}
// {242,6538,7921,2658,1595,3049,655,6945,7350,6915}
//
// Returns: 7
//
//
//
// END KAWIGIEDIT TESTING
