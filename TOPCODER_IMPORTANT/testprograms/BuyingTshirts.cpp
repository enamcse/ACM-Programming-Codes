#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class BuyingTshirts {
public:
	int meet(int T, vector <int> Q, vector <int> P) {
		int q = Q.size(), now1=0, now2=0, cnt=0;
        bool f1, f2;
		for (int i = 0; i<q; i++)
        {
            f1=f2=false;
            now1+=Q[i];
            now2+=P[i];
            if(now1>=T)
            {
                f1=true;
                now1-=T;
            }
            if(now2>=T)
            {
                f2=true;
                now2-=T;
            }
            if(f1&&f2) cnt++;
        }
        return cnt;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, vector <int> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	BuyingTshirts *obj;
	int answer;
	obj = new BuyingTshirts();
	clock_t startTime = clock();
	answer = obj->meet(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	int p0;
	vector <int> p1;
	vector <int> p2;
	int p3;

	// ----- test 0 -----
	disabled = false;
	p0 = 5;
	p1 = {1,2,3,4,5};
	p2 = {5,4,3,2,1};
	p3 = 2;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = 10;
	p1 = {10,10,10};
	p2 = {10,10,10};
	p3 = 3;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = 2;
	p1 = {1,2,1,2,1,2,1,2};
	p2 = {1,1,1,1,2,2,2,2};
	p3 = 5;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = 100;
	p1 = {1,2,3};
	p2 = {4,5,6};
	p3 = 0;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = 10;
	p1 = {10,1,10,1};
	p2 = {1,10,1,10};
	p3 = 0;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// A local store is selling T-shirts with the face of Fox Ciel printed on them.
// Each such T-shirt costs T pesos.
// Quimey and Pablo love those T-shirts.
// They each buy a new T-shirt whenever they have the money to do so.
//
// Currently, Quimey and Pablo have no money at all.
// During the following N days they are going to earn some money and they will use it to buy the T-shirts.
// The days are numbered from 0 (today) to N-1 (the day N-1 days in the future).
//
// For each valid i, Q[i] and P[i] are the amounts in pesos Quimey and Pablo will earn on day i.
// (Note that each of those amounts is at most T.
// Therefore, Quimey and Pablo will be able to buy at most one T-shirt each day.)
//
// For example, suppose that a T-shirt costs T=10 pesos.
// If Q={2,3,5,10}, the following will happen to Quimey:
//
// On day 0, he earns 2 pesos. He now has 2 pesos.
// On day 1, he earns 3 pesos. He now has 5 pesos.
// On day 2, he earns 5 pesos. He now has 10 pesos, which is enough to buy a T-shirt. He goes to the store and buys one. Afterwards, he has 0 pesos left.
// On day 3, he earns 10 pesos. He then goes to buy a second T-shirt. Afterwards, he again has 0 pesos left.
//
// If P={10,8,6,4}, Pablo would buy one T-shirt on day 0, and then another T-shirt on day 2. After buying the T-shirt on day 2 he would have 4 pesos left. After day 3 he would then have a total of 8 pesos, which is still not enough for a T-shirt.
// Note that in this example Quimey and Pablo would go to the store together on day 2.
//
// You are given the int T: the price of a single T-shirt.
// You are also given the vector <int>s Q and P with N elements each: the amounts Quimey and Pablo earn each day.
// Compute and return the number of days on which Quimey and Pablo both go to the store
//
// DEFINITION
// Class:BuyingTshirts
// Method:meet
// Parameters:int, vector <int>, vector <int>
// Returns:int
// Method signature:int meet(int T, vector <int> Q, vector <int> P)
//
//
// NOTES
// -If you need the number N in your solution, you can determine it as the number of elements in Q.
//
//
// CONSTRAINTS
// -T will be between 1 and 100.
// -Q will contain between 1 and 100 elements.
// -Q and P will contain the same number of elements.
// -Each element of Q will be between 1 and T.
// -Each element of P will be between 1 and T.
//
//
// EXAMPLES
//
// 0)
// 5
// {1,2,3,4,5}
// {5,4,3,2,1}
//
// Returns: 2
//
// Quimey will buy his T-shirts on days 2, 3, and 4.
// Pablo will buy his on days 0, 2, and 4.
// They will go to the store together twice: first on day 2 and then on day 4.
//
// 1)
// 10
// {10,10,10}
// {10,10,10}
//
// Returns: 3
//
//
//
// 2)
// 2
// {1,2,1,2,1,2,1,2}
// {1,1,1,1,2,2,2,2}
//
// Returns: 5
//
// They will both go to the store on the following days: 1, 3, 5, 6, and 7.
//
// 3)
// 100
// {1,2,3}
// {4,5,6}
//
// Returns: 0
//
// In this test case they do not buy any T-shirts at all.
//
// 4)
// 10
// {10,1,10,1}
// {1,10,1,10}
//
// Returns: 0
//
//
//
// END KAWIGIEDIT TESTING
