#include <bits/stdc++.h>
#define _ ios_base::sync_with_stdio(0);cin.tie(0);
using namespace std;


class RectangleCoveringEasy {
public:
	int solve(int holeH, int holeW, int boardH, int boardW) {
		int M = max(holeH, holeW);
		int m = min(holeH, holeW);
		int N = max(boardH, boardW);
		int n = min(boardH, boardW);
		if(N-M>=0||n-m>=0)
        {
            if(N-M>0)
            {
                if(n-m>=0) return 1;
                else return -1;
            }
            else if(n - m>0)
            {
                if(N-M>=0) return 1;
                else return -1;
            }
            else return-1;
        }
        else return -1;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	RectangleCoveringEasy *obj;
	int answer;
	obj = new RectangleCoveringEasy();
	clock_t startTime = clock();
	answer = obj->solve(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	int p2;
	int p3;
	int p4;

	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 1;
	p2 = 1;
	p3 = 1;
	p4 = -1;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 3;
	p1 = 5;
	p2 = 4;
	p3 = 6;
	p4 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 10;
	p1 = 20;
	p2 = 25;
	p3 = 15;
	p4 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 3;
	p1 = 10;
	p2 = 3;
	p3 = 12;
	p4 = 1;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// There is a rectangular hole in the ground.
// You are given the dimensions of this rectangle: ints holeH and holeW.
//
//
//
// You have a rectangular board.
// You are given its dimensions: ints boardH and boardW.
// You would like to use the board to cover the hole.
//
//
//
// There are some rules you must follow when covering the hole:
//
// You may rotate the board, but you must place it so that the sides of the board are parallel to the sides of the hole.
// The board must cover the entire hole.
// All corners of the board must be strictly outside the hole. (That is, they are not allowed to lie on the boundary of the hole.)
//
//
//
//
// If you can cover the hole using the board you have, return 1. Otherwise, return -1.
//
//
// DEFINITION
// Class:RectangleCoveringEasy
// Method:solve
// Parameters:int, int, int, int
// Returns:int
// Method signature:int solve(int holeH, int holeW, int boardH, int boardW)
//
//
// CONSTRAINTS
// -holeW, holeH, boardW, and boardH will be between 1 and 1,000,000,000, inclusive.
//
//
// EXAMPLES
//
// 0)
// 1
// 1
// 1
// 1
//
// Returns: -1
//
// The vertices of the board must not be on the boundary of the hole.
//
// 1)
// 3
// 5
// 4
// 6
//
// Returns: 1
//
// One possibility is to place the board so that it extends over the hole by 0.5 on each side.
//
// 2)
// 10
// 20
// 25
// 15
//
// Returns: 1
//
// Here we have to rotate the board by 90 degrees.
//
// 3)
// 3
// 10
// 3
// 12
//
// Returns: 1
//
//
//
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
