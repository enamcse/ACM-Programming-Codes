#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class Autogame {
public:
	int wayscnt(vector <int> a, int K) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	Autogame *obj;
	int answer;
	obj = new Autogame();
	clock_t startTime = clock();
	answer = obj->wayscnt(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	int p1;
	int p2;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {1,2,3};
	p1 = 5;
	p2 = 8;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {1,1,1};
	p1 = 1;
	p2 = 4;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {2,1};
	p1 = 42;
	p2 = 4;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {2,3,4,3};
	p1 = 3;
	p2 = 9;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {4,4,3,2,1};
	p1 = 3;
	p2 = 18;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Hero is playing a game with tokens.
// There are N places for tokens.
// The places are numbered 1 through N.
// There are also N arrows, each pointing from some place to some place.
// No two arrows start at the same place.
// It is possible that multiple arrows point to the same place.
// Also, an arrow may start and end at the same place.
// 
// You are given the description of the game board: a vector <int> a with N elements.
// For each i between 1 and N, inclusive, the arrow that starts at the place i points to the place a[i-1].
// 
// At the beginning of the game, Hero will take an arbitrary number of tokens between 0 and N, inclusive, and he will place them onto distinct places.
// He will then play K rounds of the game.
// In each round each token moves from its current place along the arrow to the new place.
// After each round, Hero checks whether all tokens are still in distinct places.
// If two or more tokens are in the same place, Hero loses the game.
// Hero wins the game if he does not lose it during the K rounds he plays.
// 
// There may be multiple ways how Hero can win the game.
// Two ways are different if there is some i such that at the beginning of the game place i did contain a token in one case but not in the other.
// Count those ways and return their count modulo 1,000,000,007.
// 
// 
// DEFINITION
// Class:Autogame
// Method:wayscnt
// Parameters:vector <int>, int
// Returns:int
// Method signature:int wayscnt(vector <int> a, int K)
// 
// 
// CONSTRAINTS
// -a will contain exactly N elements.
// -N will be between 1 and 50, inclusive.
// -Each element in a will be between 1 and N, inclusive.
// -K will be between 1 and 1,000,000,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {1,2,3}
// 5
// 
// Returns: 8
// 
// There are 2^3 = 8 valid ways to place the tokens. In each round each token will stay in the same place. Hence, Hero will win the game for each initial placement of tokens.
// 
// 1)
// {1,1,1}
// 1
// 
// Returns: 4
// 
// If Hero starts the game with two or three tokens, after the first round there will be multiple tokens in the same place (place 1) and Hero will lose the game. He will only win the game if he starts with 0 tokens (1 possibility) or with 1 token (3 possibilities).
// 
// 2)
// {2,1}	
// 42
// 
// Returns: 4
// 
// 
// 
// 3)
// {2,3,4,3}
// 3
// 
// Returns: 9
// 
// 
// 
// 4)
// {4,4,3,2,1}
// 3
// 
// Returns: 18
// 
// 
// 
// END KAWIGIEDIT TESTING
