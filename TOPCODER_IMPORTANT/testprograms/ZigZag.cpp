#include <bits/stdc++.h>
#define _ ios_base::sync_with_stdio(0);cin.tie(0);
using namespace std;

#define all(a,b,c)      for(int I=0;I<b;I++)    a[I] = c
#define BE(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define EQ(a,b)         (fabs(a-b)<ERR)
#define ERR             1e-5
#define FORE(i,a)       for(typeof((a).begin())i=(a).begin();i!=(a).end();i++)
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define fread           freopen("input.txt","r",stdin)
#define fri(a,b)        for(int i=a;i<=b;i++)
#define frj(a,b)        for(int j=a;j<=b;j++)
#define frk(a,b)        for(int k=a;k<=b;k++)
#define frl(a,b)        for(int l=a;l<=b;l++)
#define frin(a,b)       for(int i=a;i>=b;i--)
#define frjn(a,b)       for(int j=a;j>=b;j--)
#define frkn(a,b)       for(int k=a;k>=b;k--)
#define frln(a,b)       for(int l=a;l>=b;l--)
#define frn(i,a,b)      for(i=a;i>=b;i--)
#define fwrite          freopen("output.txt","w",stdout)
#define inf             (1e9)
#define inpow(a,x,y)    int i; a=x;fri(2,y)  a*=x
#define makeint(n,s)    istringstream(s)>>n
#define mod             1000000007
#define ISS             istringstream
#define ll              long long
#define oo              (1<<30)
#define OSS             ostringstream
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define PRE             1e-8
#define print1(a)       cout<<a<<endl
#define print2(a,b)     cout<<a<<" "<<b<<endl
#define print3(a,b,c)   cout<<a<<" "<<b<<" "<<c<<endl
#define rev(a)          reverse(BE(a));
#define round(i,a)      i = ( a < 0 ) ? a - 0.5 : a + 0.5;
#define SI              set<int>
#define SII             set<int>::iterator
#define SIZE(s)         ((int)s.size())
#define saja(a)        sort(BE(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define SZ1             55
#define typing(j,b)     typeof((b).begin()) j=(b).begin();
#define VD              vector<double>
#define VI              vector<int>
#define VLL             vector<long long>
#define VS              vector<string>

using namespace std;


class ZigZag {
public:
    int dp[60][60][2], n;
    vector <int> s;
    int rec(int pos, int last, int sign)
    {
        if(pos<0) return 0;
        int &ret = dp[pos][last][sign];
        if(~ret) return ret;
        ret = rec(pos-1, last, sign);
        if(sign==0&&s[pos]>s[last]) ret = max(ret, 1+rec(pos-1, pos, !sign));
        else if(sign==1&&s[pos]<s[last]) ret = max(ret, 1+rec(pos-1, pos, !sign));
        return ret;
    }

	int longestZigZag(vector <int> sequence) {
		n = sequence.size();
		s = sequence;
		clr(dp,-1);
		int ans=1;
		for (int i = 1; i<n; i++)
		    ans = max(ans, 1+max(rec(i-1,i,0),rec(i-1,i,1)));
        return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	ZigZag *obj;
	int answer;
	obj = new ZigZag();
	clock_t startTime = clock();
	answer = obj->longestZigZag(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	int p1;

	{
	// ----- test 0 -----
	int t0[] = {1,7,4,9,2,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {1,17,5,10,13,15,10,5,16,8};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 7;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {44};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {1,2,3,4,5,6,7,8,9};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	int t0[] = {70,55,13,2,99,2,80,80,80,80,100,19,7,5,5,5,1000,32,32};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 8;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	int t0[] = {374,40,854,203,203,156,362,279,812,955,600,947,978,46,100,953,670,862,568,188,67,669,810,704,52,861,49,640,370,908,477,245,413,109,659,401,483,308,609,120,249,22,176,279,23,22,617,462,459,244};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 36;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// A sequence of numbers is called a zig-zag sequence if the differences
// between successive numbers strictly alternate between positive and negative.  The
// first difference (if one exists) may be either positive or negative.  A sequence with
// fewer than two elements is trivially a zig-zag sequence.
//
//
//
// For example, 1,7,4,9,2,5 is a zig-zag sequence because the differences
// (6,-3,5,-7,3) are alternately positive and negative.  In contrast, 1,4,7,2,5
// and 1,7,4,5,5 are not zig-zag sequences, the first because its first two differences are positive and
// the second because its last difference is zero.
//
//
//
// Given a sequence of integers, sequence, return the length of the longest subsequence of sequence that is
// a zig-zag sequence.  A subsequence is obtained by deleting some number of
// elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.
//
//
//
// DEFINITION
// Class:ZigZag
// Method:longestZigZag
// Parameters:vector <int>
// Returns:int
// Method signature:int longestZigZag(vector <int> sequence)
//
//
// CONSTRAINTS
// -sequence contains between 1 and 50 elements, inclusive.
// -Each element of sequence is between 1 and 1000, inclusive.
//
//
// EXAMPLES
//
// 0)
// { 1, 7, 4, 9, 2, 5 }
//
// Returns: 6
//
// The entire sequence is a zig-zag sequence.
//
// 1)
// { 1, 17, 5, 10, 13, 15, 10, 5, 16, 8 }
//
// Returns: 7
//
// There are several subsequences that achieve this length.  One is 1,17,10,13,10,16,8.
//
// 2)
// { 44 }
//
// Returns: 1
//
// 3)
// { 1, 2, 3, 4, 5, 6, 7, 8, 9 }
//
// Returns: 2
//
// 4)
// { 70, 55, 13, 2, 99, 2, 80, 80, 80, 80, 100, 19, 7, 5, 5, 5, 1000, 32, 32 }
//
// Returns: 8
//
// 5)
// { 374, 40, 854, 203, 203, 156, 362, 279, 812, 955,
// 600, 947, 978, 46, 100, 953, 670, 862, 568, 188,
// 67, 669, 810, 704, 52, 861, 49, 640, 370, 908,
// 477, 245, 413, 109, 659, 401, 483, 308, 609, 120,
// 249, 22, 176, 279, 23, 22, 617, 462, 459, 244 }
//
//
// Returns: 36
//
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
