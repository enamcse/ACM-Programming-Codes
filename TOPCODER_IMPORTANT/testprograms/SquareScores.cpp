#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class SquareScores {
public:

	double P[1005];
	int po[1005];
	string S;

	int let, len;


	double dp[1005][27][1005];

	double rec(int pos, int last, int cnt)
	{
		if(pos==len) return po[cnt];
		double &ret = dp[pos][last][cnt];
		if(ret>-0.5) return ret;

		ret = 0.0;
		if(S[pos]=='?')
		{
			for (int i = 0; i < let; ++i)
			{
				if(i==last)ret+=(rec(pos+1,last,cnt+1)*P[i]);
				else ret+=((rec(pos+1,i,1)+ po[cnt] )*P[i]);
			}
		}
		else
		{
			if(S[pos]==last+'a') ret=rec(pos+1, last, cnt+1);
			else ret=rec(pos+1, S[pos]-'a', 1)+ po[cnt];
		}
		return ret;
	}

	double calcexpectation(vector <int> p, string s) {
		S = s;
		len = S.size();
		let = p.size();

		for (int i = 0; i < 1005; ++i)
		{
			po[i]=((i*(i+1))>>1);
		}

		for (int i = 0; i < let; ++i)
		{
			P[i] = p[i]*.01;
		}

		clr(dp,-1);
		return rec(0,0,0);
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, string p1, bool hasAnswer, double p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	SquareScores *obj;
	double answer;
	obj = new SquareScores();
	clock_t startTime = clock();
	answer = obj->calcexpectation(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 10) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	string p1;
	double p2;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {1,99};
	p1 = "aaaba";
	p2 = 8.0;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {10,20,70};
	p1 = "aa?bbbb";
	p2 = 15.0;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {10,20,30,40};
	p1 = "a?" "?c?dc?b";
	p2 = 11.117;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {25,25,21,2,2,25};
	p1 = "a?" "?b?" "?" "?" "?" "?" "?" "?ff?" "?e";
	p2 = 21.68512690712425;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {4,4,4,3,4,4,4,4,4,4,3,4,4,4,3,4,4,4,4,4,4,4,3,4,4,4};
	p1 = "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?";
	p2 = 31.16931963781721;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = {4,3,4,3,8,2,4,3,4,4,3,2,4,4,3,4,2,4,7,6,4,4,3,4,4,3};
	p1 = "makigotapresentfromniko";
	p2 = 23.0;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	// ----- test 6 -----
	disabled = false;
	p0 = {4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4};
	p1 = "??????????????????????????????????????????????????????????????????????????????????????????????????????????????a
	p2 = 1040.3386571735396;
	all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// A substring of a string is a contiguous sequence of characters from the string.
// For example, each of the strings "ab", "bcd", and "e" is a substring of "abcde". 
// On the other hand, "cba", "ace", and "f" are not substrings of "abcde".
// 
// 
// The score of a string S is the number of ways in which we can select a non-empty substring of S such that all characters in the substring are the same.
// If two substrings consist of the same letters but occur at different places in S, they are still considered different.
// For example, the score of "aaaba" is 8: there are four occurrences of the substring "a", two occurrences of "aa", one occurrence of "aaa", and one of "b".
// 
// 
// On her birthday, Maki got a string s from her friend Niko as a present.
// Each character in this string is either a lowercase letter or a question mark ('?').
// 
// 
// Maki is going to randomly change each question mark into a letter.
// For each question mark and each i, the probability that she changes it into the (i+1)-st letter of the alphabet is p[i] percent.
// (I.e., she will change it into an 'a' with probability p[0]/100, into a 'b' with probability p[1]/100, and so on.)
// The choices for different question marks are mutually independent.
// 
// 
// You are given the vector <int> p.
// Note that p may have fewer than 26 elements.
// In that case we assume that the missing probabilities are 0.
// 
// 
// Calculate and return the expected score of the string after all the question marks are changed into letters.
// 
// 
// DEFINITION
// Class:SquareScores
// Method:calcexpectation
// Parameters:vector <int>, string
// Returns:double
// Method signature:double calcexpectation(vector <int> p, string s)
// 
// 
// NOTES
// -The solution is correct if the relative error or the absolute error is at most 1e-9.
// 
// 
// CONSTRAINTS
// -s will contain between 1 and 1,000 elements, inclusive.
// -Each character in s will be '?' or a lowercase letter ('a'-'z').
// -If a character in s is j'th lowercase letter(1-indexed), j will be between 1 and (the size of p), inclusive.
// -p will contain between 1 and 26 characters, inclusive.
// -Each element in p will be between 0 and 100, inclusive.
// -The sum of all elements in p will be exactly 100.
// 
// 
// EXAMPLES
// 
// 0)
// {1, 99}
// "aaaba"
// 
// Returns: 8.0
// 
// 
// 
// 1)
// {10, 20, 70}
// "aa?bbbb"
// 
// Returns: 15.0
// 
// 
// 
// 2)
// {10, 20, 30, 40}
// "a??c?dc?b"
// 
// Returns: 11.117
// 
// 
// 
// 3)
// {25, 25, 21, 2, 2, 25}
// "a??b???????ff??e"
// 
// Returns: 21.68512690712425
// 
// 
// 
// 4)
// {4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4}
// "??????????????????????????????"
// 
// Returns: 31.16931963781721
// 
// 
// 
// 5)
// {4, 3, 4, 3, 8, 2, 4, 3, 4, 4, 3, 2, 4, 4, 3, 4, 2, 4, 7, 6, 4, 4, 3, 4, 4, 3}
// "makigotapresentfromniko"
// 
// Returns: 23.0
// 
// 
// 
// END KAWIGIEDIT TESTING
