#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class CatsOnTheCircle {
public:
	double getProb(int N, int K, int p) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, double p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	CatsOnTheCircle *obj;
	double answer;
	obj = new CatsOnTheCircle();
	clock_t startTime = clock();
	answer = obj->getProb(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p3 - answer) <= 1e-9 * max(1.0, fabs(p3));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	int p1;
	int p2;
	double p3;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 3;
	p1 = 1;
	p2 = 300000000;
	p3 = 0.6999999999999985;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 6;
	p1 = 2;
	p2 = 500000000;
	p3 = 0.2;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 6;
	p1 = 5;
	p2 = 500000000;
	p3 = 0.2;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = 10;
	p1 = 2;
	p2 = 666666666;
	p3 = 0.00391389439551009;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = 999999999;
	p1 = 999999996;
	p2 = 777777777;
	p3 = 0.05830903870125612;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = 1000000000;
	p1 = 4;
	p2 = 300000000;
	p3 = 0.044981259448371;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 6 -----
	disabled = false;
	p0 = 534428790;
	p1 = 459947197;
	p2 = 500000000;
	p3 = 1.871156682766205E-9;
	all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// There are N cats sitting around a circle.
// The cats are numbered 0 through N-1 in clockwise order.
// Note that as they sit around a circle, cat N-1 is adjacent to cat 0.
// The cats are playing a game and the winner will get a prize!
// 
// 
// 
// The game looks as follows:
// 
// There is a single ball. Initially, cat 0 holds the ball.
// In each round of the game, the cat who currently holds a ball flips a biased coin. The coin will come up heads with probability p/1,000,000,000 and tails with probability 1-(p/1,000,000,000).
// If the coin came up heads, the current cat will hand the ball to the next cat clockwise, otherwise the current cat will hand the ball to the next cat counterclockwise. Formally, if the current cat is cat j, heads means that the ball goes to cat (j+1) mod N and tails means that it goes to cat (j-1) mod N.
// The game is played until each cat held the ball at least once. The cat who holds the ball at the end of the game is the winner.
// 
// 
// 
// 
// In other words, the winner is the last cat to touch the ball.
// Note that cat 0 holds the ball at the beginning, and this does count as holding the ball.
// Hence, if there is more than one cat, cat 0 can never win the game.
// 
// 
// 
// Cat K wonders what is the probability that she will win the prize.
// You are given the ints N, K, and p.
// Return the probability that cat K wins.
// 
// 
// DEFINITION
// Class:CatsOnTheCircle
// Method:getProb
// Parameters:int, int, int
// Returns:double
// Method signature:double getProb(int N, int K, int p)
// 
// 
// NOTES
// -Your return value must have an absolute or relative error smaller than or equal to 1e-6
// 
// 
// CONSTRAINTS
// -N will be between 3 and 1,000,000,000, inclusive.
// -K will be between 1 and N-1, inclusive.
// -p will be between 1 and 999,999,999, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 3
// 1
// 300000000
// 
// Returns: 0.6999999999999985
// 
// This game has N=3 cats, labeled 0, 1, 2.
// We have p=30,000,000, hence the coin will come up heads with probability 30,000,000/1,000,000,000 = 0.3 and tails with probability 0.7.
// The game can look as follows:
// 
// Cat 0 is given the ball.
// Cat 0 flips the coin. The coin comes up tails.
// Cat 0 hands the ball to cat (0-1) mod 3 = cat 2.
// Cat 2 flips the coin. The comes up tails again. 
// Cat 2 hands the ball to cat (2-1) mod 3 = cat 1.
// At this moment, each cat has held the ball. The game ends and cat 1 gets the prize.
// 
// This particular sequence of events has probability 0.7*0.7 of occuring.
// It can be shown that the probability that cat 1 wins the game is 0.7.
// 
// 1)
// 6
// 2
// 500000000
// 
// Returns: 0.2
// 
// The coin that is flipped will come up heads with probability 1/2, and tails with probability 1/2. 
// 
// 2)
// 6
// 5
// 500000000
// 
// Returns: 0.2
// 
// 
// 
// 3)
// 10
// 2
// 666666666
// 
// Returns: 0.00391389439551009
// 
// 
// 
// 4)
// 999999999
// 999999996
// 777777777
// 
// Returns: 0.05830903870125612
// 
// 
// 
// 5)
// 1000000000
// 4
// 300000000
// 
// Returns: 0.044981259448371
// 
// 
// 
// 6)
// 534428790
// 459947197
// 500000000
// 
// Returns: 1.871156682766205E-9
// 
// 
// 
// END KAWIGIEDIT TESTING
