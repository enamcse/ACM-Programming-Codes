#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class OkonomiyakiShop {
public:
	int count(vector <int> osize, int K) {
		int n, cnt=0;
		n= osize.size();
		for (int i = 0; i<n; i++)
            for (int j = i+1; j<n; j++)
                if(abs(osize[j]-osize[i])<=K) cnt++;
        return cnt;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	OkonomiyakiShop *obj;
	int answer;
	obj = new OkonomiyakiShop();
	clock_t startTime = clock();
	answer = obj->count(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	vector <int> p0;
	int p1;
	int p2;

	// ----- test 0 -----
	disabled = false;
	p0 = {1,4,6,7,9};
	p1 = 3;
	p2 = 6;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = {1,1,3,3,3};
	p1 = 2;
	p2 = 10;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = {1,5,9,14,20};
	p1 = 3;
	p2 = 0;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = {7,2,6,3,4,2,7,8,3,4,9,1,8,4,3,7,5,2,1,9,9,4,5};
	p1 = 6;
	p2 = 234;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Cat Snuke and Wolf Sothe came to an okonomiyaki restaurant.
// (Okonomiyaki is a Japanese pancake.)
// The restaurant makes several types of okonomiyaki.
// Each type of okonomiyaki has its specific size.
// You are given the sizes of all okonomiyaki types as a vector <int> osize.
//
// The restaurant offers a discount if you order a meal for two persons.
// Each such order must consist of two okonomiyakis of different types.
// Additionally, the sizes of the two okonomiyakis must differ by K or less.
//
// You are given the vector <int> osize and the int K.
// Compute and return the number of different two-person meals offered by the restaurant.
//
// DEFINITION
// Class:OkonomiyakiShop
// Method:count
// Parameters:vector <int>, int
// Returns:int
// Method signature:int count(vector <int> osize, int K)
//
//
// CONSTRAINTS
// -osize will contain between 2 and 50 elements, inclusive.
// -Each element in osize will be between 1 and 10,000, inclusive.
// -K will be between 1 and 10,000, inclusive.
//
//
// EXAMPLES
//
// 0)
// {1,4,6,7,9}
// 3
//
// Returns: 6
//
// There are five types of okonomiyaki.
// Let's call them types A, B, C, D, and E.
// (Type A has size 1, type B has size 4, and so on.)
// There are 6 valid two-person meals: A+B, B+C, B+D, C+D, C+E, and D+E.
//
// Note that B+A is the same order as A+B: you get one pancake of type A and one pancake of type B.
//
// 1)
// {1,1,3,3,3}
// 2
//
// Returns: 10
//
// Different types of okonomiyaki may have equal sizes.
// A two-person meal may contain two okonomiyaki of the same size, they are only required to have a different type.
// Therefore, in this test case each pair of different okonomiyaki can be ordered as a two-person meal.
//
// 2)
// {1,5,9,14,20}
// 3
//
// Returns: 0
//
// In this test case there is no valid two-person meal: the differences in pancake sizes are all greater than K.
//
// 3)
// {7,2,6,3,4,2,7,8,3,4,9,1,8,4,3,7,5,2,1,9,9,4,5}
// 6
//
// Returns: 234
//
//
//
// END KAWIGIEDIT TESTING
