#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define allr(a)           a.rbegin(),a.rend()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class CartInSupermarketEasy {
public:
	int calc(int N, int K) {
		int cnt=0, ans=N, a,b;
		vector<int>v;
		v.pb(N);
		while(K--)
        {
            sort(allr(v));
            ans = min(ans,cnt+v[0]);
            cout<<ans<<" K "<<cnt<<" "<<v[0]<<endl;
            a = v[0];
            v.erase(v.begin());

            b=a/2;
            a -=b;
            cout<<a<<" "<<b<<" here "<<v.size()<<endl;
            v.pb(a);
            v.pb(b);
            cnt++;
        }
        sort(allr(v));
        cout<<"LL"<<cnt<<" "<<v[0]<<endl;
        ans = min(ans,cnt+v[0]);
        getchar();
        return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	CartInSupermarketEasy *obj;
	int answer;
	obj = new CartInSupermarketEasy();
	clock_t startTime = clock();
	answer = obj->calc(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	int p0;
	int p1;
	int p2;

	// ----- test 0 -----
	disabled = false;
	p0 = 5;
	p1 = 0;
	p2 = 5;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = 5;
	p1 = 2;
	p2 = 4;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = 15;
	p1 = 4;
	p2 = 6;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = 7;
	p1 = 100;
	p2 = 4;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = 45;
	p1 = 5;
	p2 = 11;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 5 -----
	disabled = false;
	p0 = 100;
	p1 = 100;
	p2 = 8;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You have a sequence that consists of N shopping carts.
// You want to remove all of them as quickly as possible.
//
// The process of removing the carts will consist of one or more turns.
// Each turn will take exactly one minute.
// At the beginning of each turn, you will have some sequences of carts.
// For each of those sequences you can choose between two options:
//
// split it (in an arbitrary place) into two shorter sequences
// remove one shopping cart from the sequence
//
//
// There is one additional constraint: during the entire process you can only choose to split a sequence at most K times.
//
// You are given the ints N and K.
// Compute and return the smallest number of minutes in which it is possible to remove all the carts.
//
// DEFINITION
// Class:CartInSupermarketEasy
// Method:calc
// Parameters:int, int
// Returns:int
// Method signature:int calc(int N, int K)
//
//
// CONSTRAINTS
// -N will be between 1 and 100, inclusive.
// -K will be between 0 and 100, inclusive.
//
//
// EXAMPLES
//
// 0)
// 5
// 0
//
// Returns: 5
//
// As K=0, you can never split any sequence. In each turn you have to remove one cart from your sequence. Hence, it will take 5 minutes to remove all 5 carts.
//
// 1)
// 5
// 2
//
// Returns: 4
//
// One optimal solution: {5} -> {2,3} -> {1,2} -> {1,1} -> {}. We used two splits: once when splitting the sequence of 5 carts into 2+3 and the second time when  splitting the sequence of 2 carts into 1+1.
//
// 2)
// 15
// 4
//
// Returns: 6
//
//
//
// 3)
// 7
// 100
//
// Returns: 4
//
// You don't have to split exactly K times.
//
// 4)
// 45
// 5
//
// Returns: 11
//
//
//
// 5)
// 100
// 100
//
// Returns: 8
//
//
//
// END KAWIGIEDIT TESTING
