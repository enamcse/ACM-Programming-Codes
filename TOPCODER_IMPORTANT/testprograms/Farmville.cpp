#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class Farmville {
public:
	int minTime(vector <string> s, vector <int> time, vector <int> cost, int budget) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <int> p1, vector <int> p2, int p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << p3;
	cout << "]" << endl;
	Farmville *obj;
	int answer;
	obj = new Farmville();
	clock_t startTime = clock();
	answer = obj->minTime(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <string> p0;
	vector <int> p1;
	vector <int> p2;
	int p3;
	int p4;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {"000","000","000"};
	p1 = {25,15,10};
	p2 = {1,2,3};
	p3 = 50;
	p4 = 6;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {"0000","1000","0100","0010"};
	p1 = {25,25,25,25};
	p2 = {100,200,300,400};
	p3 = 2800;
	p4 = 74;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {"01110","00010","00000","00000","10000"};
	p1 = {25,10,23,12,5};
	p2 = {123,456,789,1011,1213};
	p3 = 1000000000;
	p4 = 0;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {"00","00"};
	p1 = {25,25};
	p2 = {1000000000,1000000000};
	p3 = 1000000000;
	p4 = 25;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {"0000000000000000","1000000000000000","1000000000000000","0100000000000000","0110000000000000","0010000000000000","0001000000000000","0001100000000000","0000110000000000","0000010000000000","0000001100000000","0000000110000000","0000000011000000","0000000000110000","0000000000011000","0000000000000110"};
	p1 = {24,25,23,25,23,24,25,24,23,22,25,24,23,25,23,25};
	p2 = {82912,129482,235934,3294812,523942,460492,349281,592384,109248,2305923,340945,2304934,582396,548935,767872,423981};
	p3 = 87654321;
	p4 = 49;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = {"000","100","110"};
	p1 = {3,18,1};
	p2 = {242949,8471,54403957};
	p3 = 53867;
	p4 = 16;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// 
// This problem has a non-standard time limit: 5 seconds.
// 
// 
// 
// 
// Farmer John recently found out about a popular online farming game.
// 
// 
// 
// There are n types of plants in the game.
// The types are numbered 0 through n-1.
// 
// 
// 
// Growing a plant consists of four steps:
// 
// Farmer John must acquire a seed of the plant. This is described below in more detail.
// He must plant the seed. He can do this instantaneously. He can have arbitrarily many plants growing at the same time.
// The seed of plant i will grow for time[i] seconds until it becomes a fully developed plant.
// Farmer John will harvest the plant. He can do this instantaneously.
// 
// 
// 
// 
// Some plants have prerequisites.
// These are described by the vector <string> s.
// For each i, s[i] is a string of n zeros and ones.
// If the character s[i][j] is '1', Farmer John must have a fully grown plant j before he can acquire a seed of plant i.
// As soon as all prerequisites for plant i are satisfied, Farmer John will immediately acquire its seed.
// It is guaranteed that the prerequisites are not cyclic: there will be a way for Farmer John to eventually grow a plant of each type.
// 
// 
// 
// Note that a single grown plant can be used to satisfy multiple prerequisites.
// For example, if both plant 0 and plant 1 require John to grow plant 2 first, he only has to grow a single plant of type 2 in order to "unlock" both plant 0 and plant 1.
// 
// 
// 
// There is one final complication:
// Farmer John has budget coins.
// He can spend these coins to make his plants grow faster.
// For each i, Farmer John may pay cost[i] coins to reduce time[i] by 1.
// Farmer John may pay for the same plant multiple times, each time decreasing its growing time by 1.
// Obviously, the growing time cannot be reduced below 0.
// 
// 
// 
// You are given the vector <string> s, the vector <int>s time and cost, and the int budget.
// Determine and return the minimum amount of time in which Farmer John can fully grow one plant of each type.
// 
// 
// DEFINITION
// Class:Farmville
// Method:minTime
// Parameters:vector <string>, vector <int>, vector <int>, int
// Returns:int
// Method signature:int minTime(vector <string> s, vector <int> time, vector <int> cost, int budget)
// 
// 
// CONSTRAINTS
// -n will be between 2 and 50, inclusive.
// -s will have exactly n elements.
// -Each element of s will contain exactly n characters.
// -Each character of s[i] will either be '0' or '1'.
// -There will only be at most 50 '1' characters among all characters in all elements of s.
// -It is guaranteed that it is possible to grow at least one plant of each type given the constraints in s.
// -time will have exactly n elements.
// -Each element of time will be between 1 and 25, inclusive.
// -cost will have exactly n elements.
// -Each element of cost will be between 1 and 10^9, inclusive.
// -budget will be between 0 and 10^9, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {"000",
//  "000",
//  "000"}
// {25,15,10}
// {1,2,3}
// 50
// 
// Returns: 6
// 
// 
// There are no prerequisites.
// Hence, Farmer John will acquire all three seeds at time 0 and he will plant them all simultaneously.
// If he didn't spend any coins, the process would be over at time 25 when the plant of type 0 finally becomes fully developed.
// He can improve that time by spending his 50 coins.
// 
// 
// 
// One optimal solution looks as follows:
// 
// He will spend 19 coins on plant 0, decreasing its growing time from 25 to 25 - 19 = 6.
// He will spend 18 coins on plant 1. As cost[1]=2, every 2 coins decrease the time by 1. Hence, plant 1 will now grow in 15 - (18/2) = 15 - 9 = 6 units of time.
// He will spend 12 coins on plant 2. These will decrease its growing time by 12/3 = 4, which means it drops from 10 to 10 - 4 = 6.
// He will have 1 unused coin.
// 
// 
// 
// 1)
// {"0000",
//  "1000",
//  "0100",
//  "0010"}
// {25,25,25,25}
// {100,200,300,400}
// 2800
// 
// Returns: 74
// 
// In this test case Farmer John must grow his plants sequentially in the order 0,1,2,3.
// If he didn't pay anything, this would take 25 + 25 + 25 + 25 = 100 units of time.
// One optimal solution is to spend 2500 coins on the plant 0 (making it grow in zero time) and the remaining 300 coins on plant 2 (decreasing its growing time by 1).
// Thus, in this solution the total growing time is 0 + 25 + 24 + 25 = 74.
// 
// 2)
// {"01110",
//  "00010",
//  "00000",
//  "00000",
//  "10000"}
// {25,10,23,12,5}
// {123,456,789,1011,1213}
// 1000000000
// 
// Returns: 0
// 
// 
// 
// 3)
// {"00",
//  "00"}
// {25,25}
// {1000000000,1000000000}	
// 1000000000
// 
// Returns: 25
// 
// 
// 
// 4)
// {"0000000000000000",
//  "1000000000000000",
//  "1000000000000000",
//  "0100000000000000",
//  "0110000000000000",
//  "0010000000000000",
//  "0001000000000000",
//  "0001100000000000",
//  "0000110000000000",
//  "0000010000000000",
//  "0000001100000000",
//  "0000000110000000",
//  "0000000011000000",
//  "0000000000110000",
//  "0000000000011000",
//  "0000000000000110"}
// {24,25,23,25,23,24,25,24,23,22,25,24,23,25,23,25}
// {82912,129482,235934,3294812,523942,460492,349281,592384,
// 109248,2305923,340945,2304934,582396,548935,767872,423981}
// 87654321
// 
// Returns: 49
// 
// 
// 
// 5)
// {"000","100","110"}
// {3,18,1}
// {242949,8471,54403957}
// 53867
// 
// Returns: 16
// 
// 
// 
// END KAWIGIEDIT TESTING
