#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class CountryGroup {
public:
	int solve(vector <int> a) {
		int n = a.size(), ans = 0, cnt = 0, now = 0;
		bool ok = true;
		for (int i = 0; i<n; i++)
        {
            if(ok)
            {
                now = a[i];
                cnt = 1;
                ok = false;
            }
            else if(now!=a[i]) return -1;
            else cnt++;

            if(now==cnt)
            {
                ans++;
                cnt = 0;
                ok = true;
            }
        }
        if(!cnt) return ans;
        return -1;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	CountryGroup *obj;
	int answer;
	obj = new CountryGroup();
	clock_t startTime = clock();
	answer = obj->solve(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	vector <int> p0;
	int p1;

	// ----- test 0 -----
	disabled = false;
	p0 = {2,2,3,3,3};
	p1 = 2;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = {1,1,1,1,1};
	p1 = 5;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = {3,3};
	p1 = -1;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = {4,4,4,4,1,1,2,2,3,3,3};
	p1 = 5;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = {2,1,2,2,1,2};
	p1 = -1;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// Some people are sitting in a row.
// Each person came here from some country.
// You have a theory that people from the same country are all sitting together.
// You decided to test this theory.
// You asked each person the same question: "How many people from your country (including you) are here?"
//
//
//
// You are given a vector <int> a containing their answers.
// The answers are given in the order in which the people sit in the row.
// (Note that some of the answers may be incorrect.
// See the examples for clarification.)
//
//
//
// If all the answers are consistent with your theory, return the number of different countries that are present.
// (Given that all answers are consistent with the theory, the number of countries can always be uniquely determined.)
// Otherwise, return -1.
//
//
// DEFINITION
// Class:CountryGroup
// Method:solve
// Parameters:vector <int>
// Returns:int
// Method signature:int solve(vector <int> a)
//
//
// CONSTRAINTS
// -The number of elements in a will be between 1 and 100, inclusive.
// -All elements of a will be between 1 and 100, inclusive.
//
//
// EXAMPLES
//
// 0)
// {2,2,3,3,3}
//
// Returns: 2
//
// These answers are consistent with your theory. The first two people are from one country, the other three are from a different country. Thus, there are two countries and the correct return value is 2.
//
// 1)
// {1,1,1,1,1}
//
// Returns: 5
//
// Here, each person comes from a different country.
//
// 2)
// {3,3}
//
// Returns: -1
//
// These answers do not correspond to your theory. In particular, they are not even correct: there are only two people but each of them claims that there are three people from their country.
//
// 3)
// {4,4,4,4,1,1,2,2,3,3,3}
//
// Returns: 5
//
//
//
// 4)
// {2,1,2,2,1,2}
//
// Returns: -1
//
// These answers do not correspond to your theory. It is possible that these are people from four different countries, but even if that were the case, we can tell that people from some countries are not sitting together. For example, consider the leftmost person. According to her answer, there are two people from her country. However, the person sitting next to her cannot be from the same country.
//
// END KAWIGIEDIT TESTING
