#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class OddEvenTree {
public:
	vector <int> getTree(vector <string> x) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector <int> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	OddEvenTree *obj;
	vector <int> answer;
	obj = new OddEvenTree();
	clock_t startTime = clock();
	answer = obj->getTree(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p1[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <string> p0;
	vector <int> p1;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {"EOE","OEO","EOE"};
	p1 = {0,1,2,1};
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {"EO","OE"};
	p1 = {0,1};
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {"OO","OE"};
	p1 = {-1};
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {"EO","EE"};
	p1 = {-1};
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {"EOEO","OEOE","EOEO","OEOE"};
	p1 = {0,1,0,3,2,1};
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// In a tree, the distance between two nodes is the number of edges on the (only) simple path that connects them.
// 
// 
// You are given a vector <string> x with N elements, each containing N characters.
// Draw a tree with N nodes, numbered 0 through N-1.
// The tree must have the following properties:
// For each i and j, if x[i][j] is 'E' the distance between i and j must be even, and if it is 'O' (uppercase o) this distance must be odd.
// 
// 
// If there is no tree with these properties, return {-1}.
// Otherwise, return a vector <int> with 2N-2 elements: the list of edges in one such tree.
// For example, if N=3 and your tree contains the edges 0-2 and 1-2, return {0,2,1,2}.
// If there are multiple correct outputs you may output any of them.
// 
// DEFINITION
// Class:OddEvenTree
// Method:getTree
// Parameters:vector <string>
// Returns:vector <int>
// Method signature:vector <int> getTree(vector <string> x)
// 
// 
// NOTES
// -If you use plugins to test your solution, be careful. Plugins cannot tell you whether your solution is correct -- they'll just tell you whether it matches the example output exactly.
// 
// 
// CONSTRAINTS
// -n will be between 2 and 50, inclusive.
// -x will contain exactly n elements.
// -Each element in x will have exactly n characters.
// -Each character in x will be 'O' or 'E'.
// 
// 
// EXAMPLES
// 
// 0)
// {"EOE",
//  "OEO",
//  "EOE"}
// 
// Returns: {0, 1, 2, 1 }
// 
// The tree: 0-1-2 is a valid answer.
// 
// 1)
// {"EO",
//  "OE"}
// 
// Returns: {0, 1 }
// 
// 
// 
// 2)
// {"OO",
//  "OE"}
// 
// Returns: {-1 }
// 
// dist[0][0] must be 0, and it should be an even number, so it is impossible.
// 
// 3)
// {"EO",
//  "EE"}
// 
// Returns: {-1 }
// 
// dist[0][1] should be same with dist[1][0].
// 
// 4)
// {"EOEO",
//  "OEOE",
//  "EOEO",
//  "OEOE"}
// 
// Returns: {0, 1, 0, 3, 2, 1 }
// 
// 
// 
// END KAWIGIEDIT TESTING
