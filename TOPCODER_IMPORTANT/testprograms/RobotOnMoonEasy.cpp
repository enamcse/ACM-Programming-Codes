#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class RobotOnMoonEasy {
public:
	string isSafeCommand(vector <string> board, string S) {
		int n = board.size();
		int m = board[0].size();
		int x,y,u,v;

		for (int i = 0; i<n; i++)
		    for (int j = 0; j<m; j++)
		        if(board[i][j]=='S')
                {
                    x=i;
                    y = j;
                    break;
                }
		int k = S.size();
		for (int i = 0; i<k; i++)
        {
            if(S[i]=='U')
            {
                u = x-1;
                v=y;
            }
            else if(S[i]=='D')
            {
                u = x+1;
                v=y;
            }
            else if(S[i]=='L')
            {
                v = y-1;
                u=x;
            }
            else if(S[i]=='R')
            {
                v = y+1;
                u=x;
            }
            if(u<0||v<0||u>=n||v>=m) return "Dead";
            if(board[u][v]=='.')
            {
                x = u;
                y = v;
            }
        }

		return "Alive";
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, string p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	RobotOnMoonEasy *obj;
	string answer;
	obj = new RobotOnMoonEasy();
	clock_t startTime = clock();
	answer = obj->isSafeCommand(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	vector <string> p0;
	string p1;
	string p2;

	// ----- test 0 -----
	disabled = false;
	p0 = {".....",".###.","..S#.","...#."};
	p1 = "URURURURUR";
	p2 = "Alive";
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = {".....",".###.","..S..","...#."};
	p1 = "URURURURUR";
	p2 = "Dead";
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = {".....",".###.","..S..","...#."};
	p1 = "URURU";
	p2 = "Alive";
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = {"#####","#...#","#.S.#","#...#","#####"};
	p1 = "DRULURLDRULRUDLRULDLRULDRLURLUUUURRRRDDLLDD";
	p2 = "Alive";
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = {"#####","#...#","#.S.#","#...#","#.###"};
	p1 = "DRULURLDRULRUDLRULDLRULDRLURLUUUURRRRDDLLDD";
	p2 = "Dead";
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 5 -----
	disabled = false;
	p0 = {"S"};
	p1 = "R";
	p2 = "Dead";
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// There is a robot on the moon.
// You are given a vector <string> board containing the map of a rectangular area.
// The robot is currently located somewhere in that area.
// In the map, the character '.' (period) represents an empty square, 'S' represents an empty square that currently contains the robot, and '#' represents an obstacle.
//
//
// You are also given a string S.
// This string represents a sequence of commands we are going to send to the robot.
// Each character in S is one of 'U', 'D', 'L', and 'R', representing a step up, down, left, and right, respectively.
//
//
// Whenever the robot receives a command, one of three things will happen:
//
// If the requested move leads to an empty square, the robot performs the move.
// If the requested move leads to a square with an obstacle, the robot ignores the command and remains in place.
// If the requested move leads out of the mapped area, the robot leaves the mapped area and dies immediately.
//
//
//
// Given the map and the sequence of commands, compute whether the robot will survive.
// Return "Alive" (quotes for clarity) if the robot is still somewhere on the map after the last command.
// Otherwise, return "Dead".
// Note that the return value is case-sensitive.
//
// DEFINITION
// Class:RobotOnMoonEasy
// Method:isSafeCommand
// Parameters:vector <string>, string
// Returns:string
// Method signature:string isSafeCommand(vector <string> board, string S)
//
//
// NOTES
// -The direction 'U' corresponds to moving from board[i][j] to board[i-1][j]. The direction 'L' corresponds to moving from board[i][j] to board[i][j-1].
//
//
// CONSTRAINTS
// -board will contain between 1 and 50 elements, inclusive.
// -Each element of board will contain between 1 and 50 characters.
// -Each element of board will contain the same number of characters.
// -The characters in board will be '.', '#' or 'S'.
// -There will be exactly one 'S' in board.
// -S will contain between 1 and 50 characters, inclusive.
// -Each character in S will be one of 'U', 'D', 'L', 'R'.
//
//
// EXAMPLES
//
// 0)
// {".....",
//  ".###.",
//  "..S#.",
//  "...#."}
// "URURURURUR"
//
// Returns: "Alive"
//
// The robot will never move from its starting location: commands 'U' and 'R' are sending it into obstacles, so the robot ignores them.
//
// 1)
// {".....",
//  ".###.",
//  "..S..",
//  "...#."}
// "URURURURUR"
//
// Returns: "Dead"
//
// This time there is no obstacle on the robot's right side. Its execution of commands will look as follows:
//
// 'U' leads into an obstacle. The robot ignores it.
// 'R' leads into an empty square. The robot makes a step to the right.
// 'U' leads into an obstacle. The robot ignores it.
// 'R' leads into an empty square. The robot makes a step to the right.
// The next 'U' now leads into an empty square. The robot makes a step up. After this step, the robot is in row 1, column 4. (Both indices are 0-based.)
// 'R' leads out of the map. The robot steps out of the map and dies. The remaining four commands never get executed - the robot is already dead.
//
//
// 2)
// {".....",
//  ".###.",
//  "..S..",
//  "...#."}
// "URURU"
//
// Returns: "Alive"
//
//
//
// 3)
// {"#####",
//  "#...#",
//  "#.S.#",
//  "#...#",
//  "#####"}
// "DRULURLDRULRUDLRULDLRULDRLURLUUUURRRRDDLLDD"
//
// Returns: "Alive"
//
// There are obstacles all around the map. Regardless of how the robot moves, it is safe - the obstacles will prevent it from leaving the map.
//
// 4)
// {"#####",
//  "#...#",
//  "#.S.#",
//  "#...#",
//  "#.###"}
// "DRULURLDRULRUDLRULDLRULDRLURLUUUURRRRDDLLDD"
//
// Returns: "Dead"
//
// After some steps the robot will leave the map from the only empty square in the bottom row of the map.
//
// 5)
// {"S"}
// "R"
//
// Returns: "Dead"
//
//
//
// END KAWIGIEDIT TESTING
