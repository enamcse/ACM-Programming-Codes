#include <bits/stdc++.h>
#define _ ios_base::sync_with_stdio(0);cin.tie(0);
using namespace std;
#define pb              push_back


class AddMultiply {
public:
	vector <int> makeExpression(int y) {
		vector<int>v;
		v.pb(2);
		v.pb(2);
		v.pb(y-4);
		if(v[2]==0||v[2]==1)
        {
            v.clear();
            v.pb(4);
            v.pb(4);
            v.pb(y-16);
        }
		return v;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, vector <int> p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	AddMultiply *obj;
	vector <int> answer;
	obj = new AddMultiply();
	clock_t startTime = clock();
	answer = obj->makeExpression(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p1[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	vector <int> p1;

	{
	// ----- test 0 -----
	p0 = 6;
	int t1[] = {2,2,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 11;
	int t1[] = {2,3,5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 0;
	int t1[] = {7,10,-70};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 500;
	int t1[] = {-400,-3,-700};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = 2;
	int t1[] = {2,2,-2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	p0 = 5;
	int t1[] = {5,2,-5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You are given an int y.
// We are looking for any vector <int> x that satisfies the following constraints:
//
// x has exactly three elements
// ( x[0] * x[1] ) + x[2] = y
// Each x[i] must be between -1000 and 1000, inclusive.
// No x[i] can be equal to 0 or 1.
//
// Find and return one such x.
//
// If there are multiple valid solutions, you may return any of them.
// You may assume that for our constraints on y (specified below) at least one valid x always exists.
//
// DEFINITION
// Class:AddMultiply
// Method:makeExpression
// Parameters:int
// Returns:vector <int>
// Method signature:vector <int> makeExpression(int y)
//
//
// CONSTRAINTS
// -y will be between 0 and 500, inclusive.
//
//
// EXAMPLES
//
// 0)
// 6
//
// Returns: {2, 2, 2 }
//
// 2*2 + 2 = 6
//
// Note that this is one of many possible solutions. Another solution is:
//
// 3*3 + (-3) = 6
//
//
// 1)
// 11
//
// Returns: {2, 3, 5 }
//
//
//
// 2)
// 0
//
// Returns: {7, 10, -70 }
//
// Note that 0 and 1 are not allowed, thus a result like 0 * 0 + 0 would be incorrect.
//
// 3)
// 500
//
// Returns: {-400, -3, -700 }
//
// Some or all of the returned numbers may be negative.
//
// 4)
// 2
//
// Returns: {2, 2, -2 }
//
//
//
// 5)
// 5
//
// Returns: {5, 2, -5 }
//
//
//
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
