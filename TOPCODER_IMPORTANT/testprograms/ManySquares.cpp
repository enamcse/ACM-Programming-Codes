#include <bits/stdc++.h>
#define _ ios_base::sync_with_stdio(0);cin.tie(0);
using namespace std;


class ManySquares {
public:
	int howManySquares(vector <int> sticks) {
		int cnt[1005], res=0;
		int len = sticks.size();
		for (int i = 0; i<1005; i++)
		    cnt[i] =0;

        for (int i = 0; i<len; i++)
            cnt[ sticks[i] ]++;

        for (int i = 1; i<1005; i++)
		    res+=(cnt[i]>>2);
        return res;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	ManySquares *obj;
	int answer;
	obj = new ManySquares();
	clock_t startTime = clock();
	answer = obj->howManySquares(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	int p1;

	{
	// ----- test 0 -----
	int t0[] = {1,1,2,2,1,1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {3,1,4,4,4,10,10,10,10};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {1,2,3,4,1,2,3,4,1,2,3,1,2,3,4,1,2,3,3,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {1,1,1,2,2,2,3,3,3,4,4,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	int t0[] = {1,1,1,2,1,1,1,3,1,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	int t0[] = {2,2,4,4,8,8};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You found a box from an old game.
// The box contains a lot of sticks and a manual.
// Frustrated by the fact the manual was unreadable, you decided to invent your own game with the sticks.
// In your game, the goal is to use the sticks to build as many squares as possible.
// There are only two rules:
//
// Each stick can only be used in one square.
// Each square must consist of exactly 4 sticks. That is, you cannot combine two or more sticks to create one side of the square.
//
//
// You are given a vector <int> sticks.
// The elements of sticks are the lengths of the sticks you have.
// Return the maximum number of squares you can make.
//
//
// DEFINITION
// Class:ManySquares
// Method:howManySquares
// Parameters:vector <int>
// Returns:int
// Method signature:int howManySquares(vector <int> sticks)
//
//
// NOTES
// -If you can't make any square, return 0.
//
//
// CONSTRAINTS
// -sticks will contain between 1 and 50 elements.
// -Each element of sticks will be between 1 and 1000, inclusive.
//
//
// EXAMPLES
//
// 0)
// {1,1,2,2,1,1,2}
//
// Returns: 1
//
// You can build a square with side 1.
//
//
// 1)
// {3, 1, 4, 4, 4, 10, 10, 10, 10}
//
//
// Returns: 1
//
// You can build a square with side 10. You cannot build a square with side 4. (Note that you are not allowed to use 3+1 instead of a 4.)
//
//
// 2)
// {1,2,3,4,1,2,3,4,1,2,3,1,2,3,4,1,2,3,3,3}
//
// Returns: 3
//
//
//
// 3)
// {1,1,1,2,2,2,3,3,3,4,4,4}
//
// Returns: 0
//
// Sometimes you can't make any square.
//
//
// 4)
// {1,1,1,2,1,1,1,3,1,1,1}
//
// Returns: 2
//
//
//
// 5)
// {2,2,4,4,8,8}
//
// Returns: 0
//
// You are also not allowed to break the sticks.
//
//
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
