#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class NamingConvention {
public:
	string toCamelCase(string variableName) {
		for (int i = 0; i<variableName.size(); i++)
		{
		    if(variableName[i]=='_')
            {
                variableName = variableName.substr(0,i)+variableName.substr(i+1);
                if(i<variableName.size())variableName[i] = toupper(variableName[i]);
            }
		}
		return variableName;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	NamingConvention *obj;
	string answer;
	obj = new NamingConvention();
	clock_t startTime = clock();
	answer = obj->toCamelCase(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	string p0;
	string p1;

	// ----- test 0 -----
	disabled = false;
	p0 = "sum_of_two_numbers";
	p1 = "sumOfTwoNumbers";
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = "variable";
	p1 = "variable";
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = "t_o_p_c_o_d_e_r";
	p1 = "tOPCODER";
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = "the_variable_name_can_be_very_long_like_this";
	p1 = "theVariableNameCanBeVeryLongLikeThis";
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// In most programming languages variable names cannot contain spaces.
// If we want a variable name that consists of two or more words, we have to encode the spaces somehow.
// In this problem, we will look at two ways of doing so: Snake Case and Camel Case.
// When using Snake Case, we just replace each space by an underscore ('_').
// When using Camel Case, we capitalize the first letter of each word except for the first one, and then we remove all spaces.
//
//
// For example, suppose that we want to declare a variable called "good morning world" (quotes for clarity).
// In Snake Case, we would write this variable as "good_morning_world", while in Camel Case it would be "goodMorningWorld".
//
//
// You are given a string variableName.
// This string contains a valid variable name written in Snake Case.
// Return the same variable name in Camel Case.
//
// DEFINITION
// Class:NamingConvention
// Method:toCamelCase
// Parameters:string
// Returns:string
// Method signature:string toCamelCase(string variableName)
//
//
// CONSTRAINTS
// -variableName will contain between 1 and 50 characters.
// -Each character of variableName will be 'a'-'z' or '_'.
// -The first and last character of variableName will not be '_'.
// -variableName will not contain two consecutive underscores ('_').
//
//
// EXAMPLES
//
// 0)
// "sum_of_two_numbers"
//
// Returns: "sumOfTwoNumbers"
//
// We have 4 words: "sum", "of", "two", "numbers". So the answer is "sum" + "Of" + "Two" + "Numbers".
//
// 1)
// "variable"
//
// Returns: "variable"
//
// Note that if we have only 1 word, then the varaible name will remain same.
//
// 2)
// "t_o_p_c_o_d_e_r"
//
// Returns: "tOPCODER"
//
//
//
// 3)
// "the_variable_name_can_be_very_long_like_this"
//
// Returns: "theVariableNameCanBeVeryLongLikeThis"
//
//
//
// END KAWIGIEDIT TESTING
