//Not solved
#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class SpecialStrings {
public:
    string s;
    int n;
    bool check()
    {

        int now,j;
        for (int i = 1; i<n; i++)
        {

            now=0;
            for (j = 0;j<i && i+j<n; j++)
                if(s[j]!=s[i+j]) break;
            if(j==i)
            {
                if(n-i>j) continue;
                else return false;
            }

            if(s[j]>=s[i+j]) return false;
        }
        return true;
    }


	string findNext(string current) {
	    s = current;
	    n = current.size();
	    int cnt = 0;

	    for (int i = 0; i<n; i++)
	        if(s[i]=='0')cnt++;

        for (int j = 1; j<=cnt; j++)
        {
            s = current;
            for (int i = n - 1; i>=0; i--)
            {
                if(s[i]=='0')
                {
                    s[i]='1';
                }
            }
            if(check()) return s;
        }




		cout<<"ans: "<< check() <<endl;
		return "";
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	SpecialStrings *obj;
	string answer;
	obj = new SpecialStrings();
	clock_t startTime = clock();
	answer = obj->findNext(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	string p1;

	{
	// ----- test 0 -----
	p0 = "01";
	p1 = "";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = "00101";
	p1 = "00111";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = "0010111";
	p1 = "0011011";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = "000010001001011";
	p1 = "000010001001101";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = "01101111011110111";
	p1 = "01101111011111111";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// A string S is called special if it satisfies the following two properties:
//
// Each character in S is either '0' or '1'.
// Whenever S = UV where both U and V are nonempty strings, U is strictly smaller than V in lexicographic order.
//
//
//
//
// For example, the string S = "00101" is special because we have "0" < "0101", "00" < "101", "001" < "01", and "0010" < "1".
//
//
//
// You are given a string current that is guaranteed to be special.
// Let N be the length of current.
// Consider the lexicographically sorted list of all special strings of length N.
// Compute and return the string that comes immediatelly after current in this list.
// If current happens to be the last string in the list, return an empty string instead.
//
//
// DEFINITION
// Class:SpecialStrings
// Method:findNext
// Parameters:string
// Returns:string
// Method signature:string findNext(string current)
//
//
// NOTES
// -Given two different strings U and V, the string U precedes the string V in lexicographic order if one of two conditions is satisfied: Either U is a proper prefix of V, or there is an integer x such that U and V have the same first x characters, and the x+1th character in U is smaller than the x+1th character in V.
//
//
// CONSTRAINTS
// -current will contain between 1 and 50 characters, inclusive.
// -current will be a special string.
//
//
// EXAMPLES
//
// 0)
// "01"
//
// Returns: ""
//
// "01" is the only special string of length 2.
//
// 1)
// "00101"
//
// Returns: "00111"
//
// The special strings of length 5 are "00001", "00011", "00101", "00111", "01011", "01111".
//
// 2)
// "0010111"
//
// Returns: "0011011"
//
//
//
// 3)
// "000010001001011"
//
// Returns: "000010001001101"
//
//
//
// 4)
// "01101111011110111"
//
// Returns: "01101111011111111"
//
//
//
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
