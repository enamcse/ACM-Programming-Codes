#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;

int rr[] = {0,0,1,-1};
int cc[] = {1,-1,0,0};

class BoardEscape {
    vector <string> S;
    int K;
    bool col[55][55];
public:

    bool bfs(int x, int y)
    {
        queue<int>q;
        q.push(x);
        q.push(y);
        q.push(0);
        int u,v,z;
        clr(col,0);
        col[x][y]=1;
        int ret = 0;
        while(!q.empty())
        {
            x = q.front();q.pop();
            y = q.front();q.pop();
            z = q.front();q.pop();
            ret = max(ret,z);
            z++;
            for (int i = 0; i<4; i++)
            {
                u = x+rr[i];
                v = y+cc[i];
                if(u<0||v<0||u>=S.size()||v>=S[0].size()||S[u][v]=='#'||col[u][v]==1) continue;
                if(S[u][v]=='E') return (z&1);
                if(z==K) return (K&1);
                q.push(u);
                q.push(v);
                q.push(z);
            }
        }
        return (ret&1);
    }

	string findWinner(vector <string> s, int k) {
		S = s;
		K = k;
		bool flag = false;
		for (int i = 0; i<s.size(); i++)
        {
            for (int j = 0; j<s[0].size(); j++)
            {
                if(s[i][j]=='T')
                {
                    flag^=bfs(i,j);
//                    cout<<i<<" ------------- "<<flag<<endl;
                }
            }
        }
        return (flag?"Alice":"Bob");
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	BoardEscape *obj;
	string answer;
	obj = new BoardEscape();
	clock_t startTime = clock();
	answer = obj->findWinner(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	vector <string> p0;
	int p1;
	string p2;

	// ----- test 0 -----
	disabled = false;
	p0 = {"TE"};
	p1 = 2;
	p2 = "Alice";
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = {"E#E","#T#","E#E"};
	p1 = 1000000;
	p2 = "Bob";
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = {"T.T.T.",".E.E.E"};
	p1 = 1;
	p2 = "Alice";
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = {"TTE"};
	p1 = 6;
	p2 = "Alice";
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = {};
	p1 = 987654321;
	p2 = "Bob";
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// Alice and Bob have a rectangular board divided into a grid with r rows and c columns.
// The grid is described by the vector <string> s.
// Each character of s represents one cell.
// There are four types of cells:
//
// 'E' denotes an exit. There may be arbitrarily many exits, possibly zero.
// 'T' means the square contains a single token. There may be arbitrarily many tokens, possibly zero.
// '#' denotes an obstacle.
// '.' denotes an empty cell.
//
//
//
//
// Alice and Bob will play a game on this board.
// The game is parameterized by the int k.
// Each token initially has the number k on it.
// The players will take alternating turns, starting with Alice.
// A player's turn consists of the following steps:
//
// The player chooses a single token on the board and moves it one square up, down, left, or right. The token cannot go over the edge of the board and it cannot enter a cell with an obstacle. The token may be moved into a cell that already contains other token(s). During the game, arbitrarily many tokens may share the same cell.
// If this token is on an exit, it disappears from the board.
// Otherwise, subtract one from the number on the token. If the number on the token is zero, remove it from the board. (The numbers on other tokens do not change.)
//
//
//
//
// The first player unable to make a move loses the game.
//
//
//
// You are given the vector <string> s and the int k
// Compute the winner of the game, assuming both Alice and Bob play optimally.
// Return the winner's name: either "Alice" or "Bob".
//
//
// DEFINITION
// Class:BoardEscape
// Method:findWinner
// Parameters:vector <string>, int
// Returns:string
// Method signature:string findWinner(vector <string> s, int k)
//
//
// CONSTRAINTS
// -r,c will be between 1 and 50, inclusive.
// -s will contain exactly r elements, each consisting of c characters.
// -Each character of each element of s will be one of 'T', 'E', '#', or '.'.
// -k will be between 1 and 1,000,000,000, inclusive.
//
//
// EXAMPLES
//
// 0)
// {"TE"}
// 2
//
// Returns: "Alice"
//
// Alice can move the token directly to the exit on her first move, making Bob unable to move.
//
// 1)
// {"E#E",
//  "#T#",
//  "E#E"}
// 1000000
//
// Returns: "Bob"
//
// Alice is unable to make the first move in this case.
//
// 2)
// {"T.T.T.",
//  ".E.E.E"}
// 1
//
// Returns: "Alice"
//
//
//
// 3)
// {"TTE"}
// 6
//
// Returns: "Alice"
//
//
//
// 4)
// {"..........................",
//  "......TTT..TTT..T...T.....",
//  ".....T.....T..T.TT.TT.....",
//  "......TTT..TTT..T.T.T.....",
//  ".........T.T.T..T...T.....",
//  "......TTT..T..T.T...T.....",
//  "..........................",
//  "...E#E#E#E#E#E#E#E#E#E#...",
//  "..........................",
//  "......TTT..TTT...TTT......",
//  ".....T........T.T.........",
//  "......TTT.....T..TTT......",
//  ".....T...T...T..T...T.....",
//  "......TTT....T...TTT......",
//  "..........................",
//  "...#E#E#E#E#E#E#E#E#E#E...",
//  "..........................",
//  "....TT...T...T..T.TTT.T...",
//  "...T.....T...T..T.T...T...",
//  "...T.TT..T...TTTT.TT..T...",
//  "...T..T..T...T..T.T.......",
//  "....TT...TTT.T..T.T...T...",
//  ".........................."}
// 987654321
//
// Returns: "Bob"
//
//
//
// END KAWIGIEDIT TESTING
