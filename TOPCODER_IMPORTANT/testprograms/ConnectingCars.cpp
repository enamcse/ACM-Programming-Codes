#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class ConnectingCars {
public:
	long long minimizeCost(vector <int> position, vector <int> length) {
		int n = position.size(), l, r;
		vector< pair<int,int> >s;
		for (int i = 0; i<n; i++)
		    s.pb(make_pair(position[i],length[i]));
        vector <int> positions; vector <int> lengths;
        sort(all(s));
        for (int i = 0; i<n; i++)
        {
            positions.pb(s[i].first);
            lengths.pb(s[i].second);
        }


		ll ans = INFINITY, now;
		for (int i = 0; i<n; i++)
        {
            now = 0;
            l = positions[i];
            r = positions[i]+lengths[i];
//            cout<<">>>"<<l<<" H "<<r<<endl;
            for (int j = i-1; j>=0; j--)
            {

                l-=lengths[j];
                now+=abs(positions[j]-l);
            }

            for (int j = i+1; j<n; j++)
            {
                now+=abs(positions[j]-r);
                r+=lengths[j];
            }
            ans = min(ans,now);
//            cout<<i<<":"<<ans<<" "<<now<<endl;
        }
        return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	ConnectingCars *obj;
	long long answer;
	obj = new ConnectingCars();
	clock_t startTime = clock();
	answer = obj->minimizeCost(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	vector <int> p0;
	vector <int> p1;
	long long p2;

	// ----- test 0 -----
	disabled = false;
	p0 = {1,3,10,20};
	p1 = {2,2,5,3};
	p2 = 15ll;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = {100,50,1};
	p1 = {10,2,1};
	p2 = 96ll;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = {4,10,100,13,80};
	p1 = {5,3,42,40,9};
	p2 = 66ll;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = {5606451,63581020,81615191,190991272,352848147,413795385,468408016,615921162,760622952,791438427};
	p1 = {42643329,9909484,58137134,99547272,39849232,15146704,144630245,604149,15591965,107856540};
	p2 = 1009957100ll;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Janusz works in roller coaster maintenance.
// The station of the roller coaster is a long straight segment of railroad tracks.
// There are some cars on those tracks.
// The cars are currently not attached to each other, and there may be gaps between some of them.
// Janusz has to push them all together and connect them into a train.
//
// You are given the vector <int>s positions and lengths.
// For each valid i, there is a car that is lengths[i] meters long and starts positions[i] meters from the beginning of the station.
// (In other words, the coordinates currently occupied by this car are in the interval from positions[i] to positions[i]+lengths[i].)
//
// Moving a single car one meter in either direction costs Janusz one unit of energy.
// Compute the smallest total amount of energy sufficient to push all cars together.
// In the final configuration the cars must be located one after another with no gaps between them.
//
// (Note that there is no restriction on the movement of cars or on the final position of the train.
// Janusz may push the cars in any order, and he may even push some cars by a non-integer number of meters if he wants to.)
//
//
// DEFINITION
// Class:ConnectingCars
// Method:minimizeCost
// Parameters:vector <int>, vector <int>
// Returns:long long
// Method signature:long long minimizeCost(vector <int> positions, vector <int> lengths)
//
//
// NOTES
// -You may assume that the optimal answer is always an integer that fits into a signed 64-bit integer data type.
//
//
// CONSTRAINTS
// -lengths and positions will have the same number of elements.
// -lengths will have between 2 and 50 elements, inclusive.
// -Each element of lengths and positions will be between 1 and 10^9, inclusive.
// -The segments occupied by the cars may touch but they will not overlap.
//
//
// EXAMPLES
//
// 0)
// {1, 3, 10, 20}
// {2, 2, 5, 3}
//
// Returns: 15
//
// There are four cars.
// The intervals currently occupied by the cars are (1,3), (3,5), (10,15), and (20,23).
// In one optimal solution Janusz would move each of the first two cars three meters to the right, the third car two meters to the left, and the fourth car seven meters to the left.
// At the end, the cars occupy the intervals (4,6), (6,8), (8,13), and (13,16).
// Total energy spent: 3+3+2+7 = 15.
//
// 1)
// {100, 50, 1}
//
// {10, 2, 1}
//
// Returns: 96
//
// There are three cars.
// The gaps between consecutive cars have 48 meters each.
// The best solution is to keep the middle car in place and to push the other two towards it.
// This requires 48+48 = 96 units of energy.
//
// 2)
// {4, 10, 100, 13, 80}
// {5, 3, 42, 40, 9}
//
// Returns: 66
//
//
//
// 3)
// {5606451, 63581020, 81615191, 190991272, 352848147, 413795385, 468408016, 615921162, 760622952, 791438427}
// {42643329, 9909484, 58137134, 99547272, 39849232, 15146704, 144630245, 604149, 15591965, 107856540}
//
// Returns: 1009957100
//
//
//
// END KAWIGIEDIT TESTING
