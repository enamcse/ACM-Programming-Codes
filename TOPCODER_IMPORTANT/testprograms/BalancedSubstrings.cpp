#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;

#define X first
#define Y second

pair <int, int> v1[2500*2500+2], v2[2500*2500+2];

class BalancedSubstrings {
public:
	int countSubstrings(string s) {
		int n = s.size();

		for (int i = 0; i <= n * n; i++) {
            v1[i].X = 0;
            v2[i].Y = -1;
		}

		map <int, int> mp1, mp2;
		set < pair <int, int> > ms;
		ll ans = 0;

		for (int i = 0; i < n; i++) {
            mp1.clear();
            mp2.clear();
            int sum = 0;
            mp1[sum]++;
            v1[sum].X = i;
            for (int j = i + 1; j < n; j++) {
                if (s[j] == '1') {
                    v1[sum].Y = j - 1;
                    sum += j - i;
                    v1[sum].X = j;
                }
                mp1[sum]++;
            }
            v1[sum].Y = n - 1;

            sum = 0;
            mp2[sum]++;
            v2[sum].Y = i;
            for (int j = i - 1; j >= 0; j--) {
                if (s[j] == '1') {
                    v2[sum].X = j + 1;
                    sum += i - j;
                    v2[sum].Y = j;
                }
                mp2[sum]++;
            }
            v2[sum].X = 0;

            for (auto it: mp1) {
                if (mp2.find(it.first) != mp2.end()) {
                    int tmp = it.first;
                    for (int l = v1[tmp].X; l <= v1[tmp].Y; l++) {
                        for (int r = v2[tmp].X; r <= v2[tmp].Y; r++) {
                            ms.insert({l, r});
                        }
                    }
                }
            }

            for (auto it: mp1) {
                v1[it.X].X = 0;
                v1[it.X].Y = -1;
            }

            for (auto it: mp2) {
                v2[it.X].X = 0;
                v2[it.X].Y = -1;
            }
		}

		return (int)ms.size();
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	BalancedSubstrings *obj;
	int answer;
	obj = new BalancedSubstrings();
	clock_t startTime = clock();
	answer = obj->countSubstrings(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	string p0;
	int p1;

	// ----- test 0 -----
	disabled = false;
	p0 = "011";
	p1 = 4;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = "10111";
	p1 = 10;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = "00000";
	p1 = 15;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = "0000001000000";
	p1 = 91;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = "100110001001";
	p1 = 49;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// This problem deals with binary strings: strings in which each character is either '0' or '1'.
// The characters are interpreted as zeros and ones.
//
//
//
// Assume that we have a binary string of length N.
// Imagine the string as a horizontal lever of length N-1.
// The weight of the lever is negligible.
// On the lever, the points with integer coordinates are numbered from 0 (one end of the lever) to N-1 (the other end).
// Our string represents the distribution of weights on this lever.
// For each i, if character i of our string is '0', the corresponding point is empty, and if the character is '1', there is a unit weight at that point.
// Suppose that we place a fulcrum under the point number i.
// We say that element i of the string is a balance point if the lever is balanced on the fulcrum: the moments of force on either side cancel each other out.
// A string is called a balanced string if it has at least one balance point.
// Note that the balance point must be one of the marked points (see examples below).
//
//
//
// A formal definition follows.
// For each valid index i we can compute the torque at i as follows:
//
// For each element to the left of i, take its value, multiply it by its distance from i, and add all those results together to obtain the value A.
// For each element to the right of i, take its value, multiply it by its distance from i, and add all those results together to obtain the value B.
// The torque at i is computed as (A - B).
//
// We say that index i is a balance point if the torque at i is exactly zero.
// (Note that the value of the element at index i isn't used in the definition and therefore it can be arbitrary.)
//
//
//
// For example, the string "10100001" is a balanced string.
// Its balance point is the (0-based) index i=3.
// If we put the fulcrum under the lever at this position, we see "101" to the left and "0001" to the right.
// On the left side we get A = 1*3 + 0*2 + 1*1 = 4, and on the right side we get B = 0*1 + 0*2 + 0*3 + 1*4 = 4, hence A-B is exactly zero.
//
//
//
// The string "0001" is also a balanced string, as its last character is a balance point.
// The string "11" is not a balanced string, as neither of its two characters is a balance point.
//
//
//
// You are given a string s that is a binary string.
// Return the number of nonempty substrings of s that are balanced.
//
//
//
// Substrings that consist of the same characters but occur elsewhere in s are considered different substrings.
// If they are balanced, each of them should be counted separately.
// For example, the string "00000" contains four distinct occurrences of the substring "00".
//
//
// DEFINITION
// Class:BalancedSubstrings
// Method:countSubstrings
// Parameters:string
// Returns:int
// Method signature:int countSubstrings(string s)
//
//
// CONSTRAINTS
// -s will have between 1 and 2,500 characters, inclusive.
// -Each character in s will be '0' or '1'.
//
//
// EXAMPLES
//
// 0)
// "011"
//
// Returns: 4
//
// The balanced substrings in this case are {"0", "1", "1", "01"}
//
// 1)
// "10111"
//
// Returns: 10
//
// The balanced substrings are {"1", "0", "1", "1", "1", "10", "01", "101", "111", "0111"}
//
// 2)
// "00000"
//
// Returns: 15
//
// All substrings in this case are balanced.
//
// 3)
// "0000001000000"
//
// Returns: 91
//
//
//
// 4)
// "100110001001"
//
// Returns: 49
//
//
//
// END KAWIGIEDIT TESTING
