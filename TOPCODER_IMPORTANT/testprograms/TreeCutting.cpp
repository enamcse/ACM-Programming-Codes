#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class TreeCutting {
public:
	string can(vector <int> par, vector <int> num) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	TreeCutting *obj;
	string answer;
	obj = new TreeCutting();
	clock_t startTime = clock();
	answer = obj->can(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	vector <int> p1;
	string p2;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {0,1,2,2,2};
	p1 = {2,-1,-1,4,-1,-1};
	p2 = "POSSIBLE";
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {0,1,2,2,2};
	p1 = {3,-1,-1,3,-1,-1};
	p2 = "IMPOSSIBLE";
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {0,1,2,2,2};
	p1 = {2,-1,-1,3,-1,-1};
	p2 = "IMPOSSIBLE";
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {0,1,2,2,1,5,2,6,6};
	p1 = {-1,-1,2,-1,1,3,-1,1,1,2};
	p2 = "POSSIBLE";
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {0,1,2,2,1,5,2,6,6};
	p1 = {-1,-1,2,-1,1,-1,3,1,1,2};
	p2 = "IMPOSSIBLE";
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = {0,0,0,0,1,1,2,3,3,3,4,4,4,5,9,9,14,14,14,16,20};
	p1 = {-1,3,-1,-1,-1,-1,-1,1,1,-1,-1,-1,3,1,-1,1,8,-1,-1,4,-1,-1};
	p2 = "POSSIBLE";
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 6 -----
	disabled = false;
	p0 = {0,0,0,0,1,1,2,3,3,3,4,4,4,5,9,9,14,14,14,16,20};
	p1 = {-1,2,-1,-1,-1,-1,-1,1,1,-1,-1,-1,3,1,-1,1,9,-1,-1,4,-1,-1};
	p2 = "IMPOSSIBLE";
	all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 7 -----
	disabled = false;
	p0 = {0,0,1,1};
	p1 = {-1,-1,5,-1,-1};
	p2 = "POSSIBLE";
	all_right = (disabled || KawigiEdit_RunTest(7, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Wolf Sothe has an undirected tree with N vertices, numbered 0 through N-1.
// You are given the description of the tree as a vector <int> par with N-1 elements.
// For each valid i, the tree contains the edge between vertices (i+1) and par[i].
// (Note that for your convenience par[i] is always smaller than i+1.)
// 
// Some of the vertices contain a positive integer, others are empty.
// You are given a vector <int> num with N elements.
// For each valid i, num[i] is either the number written in vertex i, or -1 if vertex i is empty.
// 
// Sothe can modify the tree by cutting some of its edges.
// Sothe's goal is to reach a configuration with the following properties:
// 
// 
// Each connected component contains exactly one vertex with an integer.
// 
// 
// The number of vertices in each component is equal to the only integer in that component.
// 
// 
// 
// Return "POSSIBLE" (quotes for clarity) if Sothe can reach some configuration with the desired properties by cutting zero or more edges.
// Otherwise, return "IMPOSSIBLE".
// Note that the return value is case-sensitive.
// 
// DEFINITION
// Class:TreeCutting
// Method:can
// Parameters:vector <int>, vector <int>
// Returns:string
// Method signature:string can(vector <int> par, vector <int> num)
// 
// 
// CONSTRAINTS
// -N will be between 1 and 50, inclusive.
// -par will contain exactly N-1 elements.
// -For each i, the i-th element of par will be between 0 and i, inclusive.
// -num will contain exactly N elements.
// -Each element in num will be either -1 or between 1 and N, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {0,1,2,2,2}
// {2,-1,-1,4,-1,-1}
// 
// Returns: "POSSIBLE"
// 
// This is a tree with 6 vertices.
// The edges are 1-0, 2-1, 3-2, 4-2, and 5-2.
// Vertex 0 contains the integer 2, vertex 3 contains the integer 4, and all other vertices are empty.
// 
// Sothe can reach his goal by cutting the edge 1-2.
// This will produce two components.
// In one component we have the vertices {0,1}.
// One of them contains the number 2 (which is also the size of this component) and the other is empty.
// In the other component we have the vertices {2,3,4,5}.
// One of them contains the number 4 (which is also the size of this component) and the other three are empty.
// 
// 1)
// {0,1,2,2,2}
// {3,-1,-1,3,-1,-1}
// 
// Returns: "IMPOSSIBLE"
// 
// 
// 
// 2)
// {0,1,2,2,2}
// {2,-1,-1,3,-1,-1}
// 
// Returns: "IMPOSSIBLE"
// 
// The tree has 6 vertices but in any valid final configuration the components must have 2+3 = 5 vertices, which is impossible.
// 
// 3)
// {0,1,2,2,1,5,2,6,6}
// {-1,-1,2,-1,1,3,-1,1,1,2}
// 
// Returns: "POSSIBLE"
// 
// 
// 
// 4)
// {0,1,2,2,1,5,2,6,6}
// {-1,-1,2,-1,1,-1,3,1,1,2}
// 
// Returns: "IMPOSSIBLE"
// 
// 
// 
// 5)
// {0,0,0,0,1,1,2,3,3,3,4,4,4,5,9,9,14,14,14,16,20}
// {-1,3,-1,-1,-1,-1,-1,1,1,-1,-1,-1,3,1,-1,1,8,-1,-1,4,-1,-1}
// 
// Returns: "POSSIBLE"
// 
// 
// 
// 6)
// {0,0,0,0,1,1,2,3,3,3,4,4,4,5,9,9,14,14,14,16,20}
// {-1,2,-1,-1,-1,-1,-1,1,1,-1,-1,-1,3,1,-1,1,9,-1,-1,4,-1,-1}
// 
// Returns: "IMPOSSIBLE"
// 
// 
// 
// 7)
// {0,0,1,1}
// {-1,-1,5,-1,-1}
// 
// Returns: "POSSIBLE"
// 
// No cutting necessary.
// 
// END KAWIGIEDIT TESTING
