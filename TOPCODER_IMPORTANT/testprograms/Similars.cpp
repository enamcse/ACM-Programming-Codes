#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class Similars {
public:
	int maxsim(int L, int R) {
		map<int,int>taken;
		int k, now, ting, ans = 0;
		for (int i = L; i <= R; ++i)
		{
			now = 0;
			k = i;
			while(k)
			{
				ting = k%10;
				now|=(1<<ting);
				k/=10;
			}
			taken[now]++;
		}

		vector<pair<int,int> >v;
		for (map<int,int>::iterator it = taken.begin(); it!=taken.end(); ++it)
		{
			v.pb(make_pair(it->first, it->second));
		}
		for (int i = 0; i < v.size(); ++i)
		{
			// cout<<v[i].first<<"ting"<<endl;
			for (int j = 0; j < v.size(); ++j)
			{
				if(i==j)
				{
					if(v[i].second>1) ans = max(ans,cntbit(v[i].first));
					continue;
				}
				k = v[i].first&v[j].first;
				ans = max(ans,cntbit(k));
			}
		}
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	Similars *obj;
	int answer;
	obj = new Similars();
	clock_t startTime = clock();
	answer = obj->maxsim(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	int p1;
	int p2;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 1;
	p1 = 10;
	p2 = 1;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 1;
	p1 = 99;
	p2 = 2;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 99;
	p1 = 100;
	p2 = 0;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = 1000;
	p1 = 1010;
	p2 = 2;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = 444;
	p1 = 454;
	p2 = 2;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Given two positive integers x and y, their similarity S(x, y) is defined as follows:
// To compute S(x, y) we count all d between 0 and 9, inclusive, such that both x and y contain the digit d when written in base 10 (without any leading zeros).
// For example, S(1123, 220181) = 2 since both numbers contain the digit 1 and both contain the digit 2.
// 
// You are given two ints L and R that define a range.
// Find two distinct integers in this range that have the largest similarity.
// Formally, return the maximum of S(a, b) over all a, b such that L <= a < b <= R.
// 
// DEFINITION
// Class:Similars
// Method:maxsim
// Parameters:int, int
// Returns:int
// Method signature:int maxsim(int L, int R)
// 
// 
// CONSTRAINTS
// -R will be between 2 and 100,000, inclusive.
// -L will be between 1 and R - 1, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 1
// 10
// 
// Returns: 1
// 
// We have S(1, 10) = 1 since both numbers contain the digit 1. All other pairs of numbers within this range have similarity 0.
// 
// 1)
// 1
// 99
// 
// Returns: 2
// 
// There are many pairs with similarity 2, for example pairs (23,32) and (38,83).
// 
// 2)
// 99
// 100
// 
// Returns: 0
// 
// Here we have only one pair (99, 100) and its similarity is 0.
// 
// 3)
// 1000
// 1010
// 
// Returns: 2
// 
// 
// 
// 4)
// 444
// 454
// 
// Returns: 2
// 
// 
// 
// END KAWIGIEDIT TESTING
