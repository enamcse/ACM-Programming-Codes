#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class ABC {
public:
	string createString(int N, int K) {
		string s="";
		int now=0, a, b, c;
		a=b=c=0;
		for (int i = 0; i<((N%3!=0)+N/3); i++)
		    s+='A', a++;
        for (int i = 0; i<((N%3==2)+N/3); i++)
		    s+='B', b++;
        for (int i = 0; i<(N/3); i++)
		    s+='C', c++;

		for (int i = 0; i<n; i++)
        {
            now+=()
        }


	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	ABC *obj;
	string answer;
	obj = new ABC();
	clock_t startTime = clock();
	answer = obj->createString(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	int p0;
	int p1;
	string p2;

	// ----- test 0 -----
	disabled = false;
	p0 = 3;
	p1 = 3;
	p2 = "ABC";
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = 3;
	p1 = 0;
	p2 = "CBA";
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = 5;
	p1 = 10;
	p2 = "";
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = 15;
	p1 = 36;
	p2 = "CABBACCBAABCBBB";
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You are given two ints: N and K. Lun the dog is interested in strings that satisfy the following conditions:
//
// The string has exactly N characters, each of which is either 'A', 'B' or 'C'.
// The string s has exactly K pairs (i, j) (0 <= i < j <= N-1) such that s[i] < s[j].
//
// If there exists a string that satisfies the conditions, find and return any such string. Otherwise, return an empty string.
//
// DEFINITION
// Class:ABC
// Method:createString
// Parameters:int, int
// Returns:string
// Method signature:string createString(int N, int K)
//
//
// CONSTRAINTS
// -N will be between 3 and 30, inclusive.
// -K will be between 0 and N(N-1)/2, inclusive.
//
//
// EXAMPLES
//
// 0)
// 3
// 3
//
// Returns: "ABC"
//
// This string has exactly three pairs (i, j) mentioned in the statement: (0, 1), (0, 2) and (1, 2).
//
// 1)
// 3
// 0
//
// Returns: "CBA"
//
// Please note that there are valid test cases with K = 0.
//
// 2)
// 5
// 10
//
// Returns: ""
//
// Five characters is too short for this value of K.
//
// 3)
// 15
// 36
//
// Returns: "CABBACCBAABCBBB"
//
// Please note that this is an example of a solution; other valid solutions will also be accepted.
//
// END KAWIGIEDIT TESTING
