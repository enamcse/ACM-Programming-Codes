#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class BacteriesColony {
public:
	vector <int> performTheExperiment(vector <int> colonies) {
		int n = colonies.size();
		int flag[n];

		bool tew = true;

		while(tew)
        {
            clr(flag,0);
            tew = false;
            for (int i = 1; i<n-1; i++)
            {
                if(colonies[i-1]<colonies[i]&&colonies[i+1]<colonies[i]) flag[i]=-1;
                if(colonies[i-1]>colonies[i]&&colonies[i+1]>colonies[i]) flag[i]=1;
            }
            for (int i = 1; i<n-1; i++)
                if(flag[i])colonies[i]+=flag[i], tew = true;
        }
		return colonies;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, vector <int> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	BacteriesColony *obj;
	vector <int> answer;
	obj = new BacteriesColony();
	clock_t startTime = clock();
	answer = obj->performTheExperiment(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p1[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	vector <int> p0;
	vector <int> p1;

	// ----- test 0 -----
	disabled = false;
	p0 = {5,3,4,6,1};
	p1 = {5,4,4,4,1};
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = {1,5,4,9};
	p1 = {1,4,5,9};
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = {78,34,3,54,44,99};
	p1 = {78,34,34,49,49,99};
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = {32,68,50,89,34,56,47,30,82,7,21,16,82,24,91};
	p1 = {32,59,59,59,47,47,47,47,47,18,18,19,53,53,91};
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Grazyna works in a laboratory.
// Her team is about to perform an experiment with special bacteria.
//
//
// There is a row of vessels.
// Each vessel contains a colony of bacteria.
// The colonies may currently have different sizes.
// Namely, for each valid i there are currently colonies[i] bacteria in the i-th vessel (0-based index).
//
//
// Grazyna has a theory about how the colony sizes change.
// According to the theory, the colony sizes only change during nights and it only happens in two specific cases:
//
// If during a day a colony finds itself immediately between two larger colonies, during the next night its size will increase by 1.
// If during a day a colony finds itself immediately between two smaller colonies, during the next night its size will decrease by 1.
//
// Note that the colonies in the first and last vessel never change their sizes as they are never between two colonies.
// Also note that multiple colonies can change their size each night.
//
//
// The experiment will go on for as long as some colonies keep changing their sizes.
// You are given the vector <int> colonies.
// Compute the result of the experiment, assuming that the colony sizes change according to Grazyna's theory.
// Return a vector <int> with the same number of elements as colonies.
// For each valid i, element i of the return value should be the final size of the colony in the i-th vessel.
//
//
// DEFINITION
// Class:BacteriesColony
// Method:performTheExperiment
// Parameters:vector <int>
// Returns:vector <int>
// Method signature:vector <int> performTheExperiment(vector <int> colonies)
//
//
// NOTES
// -For each valid input the experiment will terminate after finitely many steps.
//
//
// CONSTRAINTS
// -colonies will have between 3 and 50 elements, inclusive.
// -Each element of colonies will be between 1 and 100, inclusive.
//
//
// EXAMPLES
//
// 0)
// {5, 3, 4, 6, 1 }
//
// Returns: {5, 4, 4, 4, 1 }
//
//
// The colony sizes during the first day are given as input: {5, 3, 4, 6, 1}.
// During the first night colony 1 (0-based index) will grow and colony 3 will shrink.
// During the second day the colony sizes will be {5, 4, 4, 5, 1}.
// During the second night colony 3 will shrink again.
// During the third day the colony sizes will be {5, 4, 4, 4, 1}.
// There are no more changes during the third night, so that is the final state and the experiment ends.
//
//
// 1)
// {1, 5, 4, 9 }
//
// Returns: {1, 4, 5, 9 }
//
// During the first night colony 1 will shrink from 5 to 4 and at the same time colony 2 will grow from 4 to 5. Afterwards there will be no more changes.
//
// 2)
// {78, 34, 3, 54, 44, 99 }
//
// Returns: {78, 34, 34, 49, 49, 99 }
//
//
//
// 3)
// {32, 68, 50, 89, 34, 56, 47, 30, 82, 7, 21, 16, 82, 24, 91 }
//
// Returns: {32, 59, 59, 59, 47, 47, 47, 47, 47, 18, 18, 19, 53, 53, 91 }
//
//
//
// END KAWIGIEDIT TESTING
