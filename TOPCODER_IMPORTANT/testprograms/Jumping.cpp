#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class Jumping {
public:
	string ableToGet(int x, int y, vector <int> jumpLengths) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <int> p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	Jumping *obj;
	string answer;
	obj = new Jumping();
	clock_t startTime = clock();
	answer = obj->ableToGet(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	vector <int> p2;
	string p3;
	
	{
	// ----- test 0 -----
	p0 = 5;
	p1 = 4;
	int t2[] = {2,5};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "Able";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3;
	p1 = 4;
	int t2[] = {4};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "Not able";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 3;
	p1 = 4;
	int t2[] = {6};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "Not able";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 0;
	p1 = 1;
	int t2[] = {100,100};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "Able";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 300;
	p1 = 400;
	int t2[] = {500};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "Able";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 11;
	p1 = 12;
	int t2[] = {1,2,3,4,5,6,7,8,9,10};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "Able";
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = 11;
	p1 = 12;
	int t2[] = {1,2,3,4,5,6,7,8,9,100};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "Not able";
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Frog Suwako lives on a two-dimensional plane.
// She likes to jump.
// Currently, she is located in the point (0, 0).
// She would like to reach the point (x, y).
// You are given the ints x and y.
// 
// 
// 
// Suwako wants to reach the desired destination in a specific way: using a series of jumps with pre-determined lengths.
// You are given these lengths in a vector <int> jumpLenghts.
// For example, if jumpLengths = { 2, 5 }, Suwako must make a jump of length exactly 2, followed by a jump of length exactly 5.
// 
// 
// 
// Note that Suwako can jump onto arbitrary points in the plane, they are not required to have integer coordinates.
// Return "Able" (quotes for clarity) if Suwako is able to reach her desired destination from (0, 0) using the desired sequence of jump lengths.
// Otherwise, return "Not able".
// 
// DEFINITION
// Class:Jumping
// Method:ableToGet
// Parameters:int, int, vector <int>
// Returns:string
// Method signature:string ableToGet(int x, int y, vector <int> jumpLengths)
// 
// 
// CONSTRAINTS
// -x will be between -1,000 and 1,000, inclusive.
// -y will be between -1,000 and 1,000, inclusive.
// -len will contain between 1 and 50 elements, inclusive.
// -Each element in len will be between 1 and 1,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 5
// 4
// {2, 5}
// 
// Returns: "Able"
// 
// One possibility is to jump from (0, 0) to (2, 0), and then from (2, 0) to (5, 4).
// 
// 1)
// 3
// 4
// {4}
// 
// Returns: "Not able"
// 
// The distance from (0, 0) to (3, 4) is 5. You cannot get there using a single jump of length 4 - it is too short.
// 
// 2)
// 3
// 4
// {6}
// 
// Returns: "Not able"
// 
// The distance from (0, 0) to (3, 4) is 5. You cannot get there using a single jump of length 6 - it is too long.
// 
// 3)
// 0
// 1
// {100, 100}
// 
// Returns: "Able"
// 
// Here, one possible solution looks as follows: Let t = sqrt(100*100 - 0.5*0.5). Suwoko will make her first jump from (0, 0) to (t, 0.5), and her second jump from (t, 0.5) to (0, 1).
// 
// 4)
// 300
// 400
// {500}
// 
// Returns: "Able"
// 
// 
// 
// 5)
// 11
// 12
// {1,2,3,4,5,6,7,8,9,10}
// 
// Returns: "Able"
// 
// 
// 
// 6)
// 11
// 12
// {1,2,3,4,5,6,7,8,9,100}
// 
// Returns: "Not able"
// 
// 
// 
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
