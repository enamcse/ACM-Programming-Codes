#include <bits/stdc++.h>
#define _ ios_base::sync_with_stdio(0);cin.tie(0);

#define sz 200005
#define pb(a) push_back(a)
#define pp pop_back()
#define all(a) a.begin(),a.end()
#define ll long long
#define fread freopen("input.txt","r",stdin)
#define fwrite freopen("output.txt","w",stdout)
#define inf (1e18)
#define chng(a,b) a^=b^=a^=b;
#define clr(abc,z) memset(abc,z,sizeof(abc))
#define PI acos(-1)
#define pi 3.14159265358979323846264338327950288419716939937510
#define fr(i,a,b) for(i=a;i<=b;i++)
#define print1(a)    cout<<a<<endl
#define print2(a,b) cout<<a<<" "<<b<<endl
#define print3(a,b,c) cout<<a<<" "<<b<<" "<<c<<endl
#define mod 1000000007

using namespace std;


class LightSwitchingPuzzle {
public:
    bool flag[1005];
	int minFlips(string state) {
        int n = state.size(), now=-1;
        for (int i = 0; i<n; i++)
            if(state[i]=='Y') flag[i]=true;
            else flag[i]=false;
        flag[10000]=true;
        while(1)
        {
            now++;
            int i;
            for (i=0; i<n; i++) if(flag[i]) break;
            if(i==n) break;
            for (int j = i+1; j<=n; j+=(i+1))
                flag[j-1] = !flag[j-1];
        }
        if(flag[10000])
        return now;
        else return 0;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	LightSwitchingPuzzle *obj;
	int answer;
	obj = new LightSwitchingPuzzle();
	clock_t startTime = clock();
	answer = obj->minFlips(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	string p0;
	int p1;

	// ----- test 0 -----
	disabled = false;
	p0 = "YYYYYY";
	p1 = 1;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = "YNYNYNYNY";
	p1 = 2;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = "NNNNNNNNNN";
	p1 = 0;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = "YYYNYYYNYYYNYYNYYYYN";
	p1 = 4;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = "NYNNYNNNYNNNNYNNNNNYNNNNNNYNNNNNNNY";
	p1 = 12;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// Leo has N lights in a row.
// The lights are numbered 1 through N.
// Each light is either on or off.
//
//
//
// Leo wants to turn all the lights off.
// He has N switches he may use.
// The switches are also numbered 1 through N.
// For each i, switch number i toggles the state of all lights whose numbers are multiples of i.
// (For example, switch 3 will toggle the state of light 3, light 6, light 9, and so on.)
//
//
//
// You are given the current state of all lights as a string state with N characters.
// For each valid i, state[i] is either 'Y' (meaning that light i+1 is currently on) or 'N' (meaning that the light is off).
// Determine the smallest number of switches Leo needs to press in order to turn off all the lights.
// If there is no way to turn off all the lights, return -1 instead.
//
//
// DEFINITION
// Class:LightSwitchingPuzzle
// Method:minFlips
// Parameters:string
// Returns:int
// Method signature:int minFlips(string state)
//
//
// CONSTRAINTS
// -state will contain between 1 and 1000 characters, inclusive.
// -Each character of state will be either 'Y' or 'N'.
//
//
// EXAMPLES
//
// 0)
// "YYYYYY"
//
// Returns: 1
//
// We can turn off all the lights by pressing switch 1.
//
// 1)
// "YNYNYNYNY"
//
// Returns: 2
//
//
// We cannot turn these lights off in a single step.
// It can be done in two steps.
// One possible solution looks as follows:
// First, press the second switch.
// This will toggle lights with numbers 2, 4, 6, and 8.
// The state of the lights after this change will be "YYYYYYYYY".
// Next, press the first switch to toggle all lightbulbs.
//
//
// 2)
// "NNNNNNNNNN"
//
// Returns: 0
//
// All the lights are already off.
//
// 3)
// "YYYNYYYNYYYNYYNYYYYN"
//
// Returns: 4
//
//
//
// 4)
// "NYNNYNNNYNNNNYNNNNNYNNNNNNYNNNNNNNY"
//
// Returns: 12
//
//
//
// END KAWIGIEDIT TESTING
