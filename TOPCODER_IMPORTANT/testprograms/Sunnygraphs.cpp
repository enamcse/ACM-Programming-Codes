#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class Sunnygraphs {
public:
	long long count(vector <int> a) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, long long p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	Sunnygraphs *obj;
	long long answer;
	obj = new Sunnygraphs();
	clock_t startTime = clock();
	answer = obj->count(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	long long p1;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {1,0};
	p1 = 4ll;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {2,2,0};
	p1 = 7ll;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {2,3,0,1};
	p1 = 9ll;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {2,2,3,4,3};
	p1 = 30ll;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {18,18,20,28,7,27,8,13,40,3,7,21,30,17,13,34,29,16,15,11,0,9,39,36,38,23,24,8,4,9,29,22,35,5,13,23,3,27,34,23,8};
	p1 = 2198754820096ll;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Hero has just constructed a very specific graph.
// He started with n isolated vertices, labeled 0 through n-1.
// For each vertex i Hero then chose a vertex a[i] (other than i) and he added an edge that connected i and a[i].
// This way he created a graph with n vertices and n edges.
// Note that if a[x]=y and a[y]=x, the vertices x and y were connected by two different edges.
// 
// Hero now wants to perform the following procedure:
// 
// Add a new isolated vertex number n.
// Choose a subset M of the original vertices.
// For each x in M, erase an edge between vertices x and a[x].
// For each x in M, add a new edge between vertices x and n.
// 
// 
// Hero's goal is to create a final graph in which the vertices 0 and 1 are in the same connected component.
// (I.e., there is a path from one of them to the other.)
// 
// In step 2 of the above procedure Hero has 2^n possible subsets to choose from.
// A choice of M is good if it produces a graph with the desired property.
// Count how many of the 2^n possibilities are good choices.
// Return that count as a long long.
// 
// DEFINITION
// Class:Sunnygraphs
// Method:count
// Parameters:vector <int>
// Returns:long long
// Method signature:long long count(vector <int> a)
// 
// 
// CONSTRAINTS
// -a will contain n elements.
// -n will be between 2 and 50, inclusive.
// -Each element in a will be between 0 and n - 1, inclusive.
// -For each i between 0 and n - 1 holds a[i] != i.
// 
// 
// EXAMPLES
// 
// 0)
// {1,0}
// 
// Returns: 4
// 
// The original graph contained the vertices 0 and 1.
// This pair of vertices was connected by two edges.
// 
// Next, Hero added a new vertex 2.
// Then he had to choose one of four possible subsets M:
// 
// If he chose M = {}, the resulting graph contained the edges 0-1 and 0-1. The vertices 0 and 1 were connected.
// If he chose M = {0}, the resulting graph contained the edges 0-1 and 0-2. The vertices 0 and 1 were connected.
// If he chose M = {1}, the resulting graph contained the edges 0-1 and 1-2. The vertices 0 and 1 were connected.
// Finally, if he chose M = {0, 1}, the resulting graph contained the edges 0-2 and 1-2. And again, the vertices 0 and 1 were connected: there is a path 0-1-2.
// 
// 
// As all four choices of M are good, the correct answer is 4.
// 
// 1)
// {2,2,0}
// 
// Returns: 7
// 
// Here, the original graph contained the edges 0-2, 0-2, and 1-2.
// For this graph M = {1} is not a good choice.
// This choice produces a graph with edges 0-2, 0-2, and 1-3.
// In this graph the vertices 0 and 1 are not in the same connected component.
// The other seven possible choices of M are all good.
// 
// 2)
// {2,3,0,1}
// 
// Returns: 9
// 
// 
// 
// 3)
// {2,2,3,4,3}
// 
// Returns: 30
// 
// 
// 
// 4)
// {18,18,20,28,7,27,8,13,40,3,7,21,30,17,13,34,29,16,15,11,0,9,39,36,38,23,24,8,4,9,29,22,35,5,13,23,3,27,34,23,8}
// 
// Returns: 2198754820096
// 
// 
// 
// END KAWIGIEDIT TESTING
