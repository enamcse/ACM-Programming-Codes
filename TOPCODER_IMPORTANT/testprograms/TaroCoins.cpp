#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class TaroCoins {
public:
	long long getNumber(long long N) {
		int  i;
		ll ans=1;


		for (i = 63; i>=0; i--)
        {
            if((1ll<<i)&N){
                break;
            }
        }
        pre = 1;
        for (k = 0; k<i; k++)
        {
            if(!((1ll<<i)&N) && pre)
            {

            }
        }


	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, long long p0, bool hasAnswer, long long p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	TaroCoins *obj;
	long long answer;
	obj = new TaroCoins();
	clock_t startTime = clock();
	answer = obj->getNumber(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	long long p0;
	long long p1;

	{
	// ----- test 0 -----
	p0 = 1ll;
	p1 = 1ll;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 6ll;
	p1 = 3ll;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 47ll;
	p1 = 2ll;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 256ll;
	p1 = 9ll;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = 8489289ll;
	p1 = 6853ll;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	p0 = 1000000000ll;
	p1 = 73411ll;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// Cat Taro likes coins. For any non-negative integer K, he has exactly two coins of value 2^K (i.e., two to the power of K).
//
//
//
//
// You are given a long long N.
// Return the number of different ways Taro can represent the value N with coins that he has.
// (Two representations are considered different if there is a value that occurs a different number of times in the representations.)
//
//
// DEFINITION
// Class:TaroCoins
// Method:getNumber
// Parameters:long long
// Returns:long long
// Method signature:long long getNumber(long long N)
//
//
// NOTES
// -The answer will always fit in a signed 64-bit integer.
//
//
// CONSTRAINTS
// -N will be between 1 and 1,000,000,000,000,000,000 (10^18), inclusive.
//
//
// EXAMPLES
//
// 0)
// 1
//
// Returns: 1
//
// The only possible way to represent N in this case is to use one coin of value 1.
//
// 1)
// 6
//
// Returns: 3
//
// The following three representations are possible in this case: {1, 1, 2, 2}, {1, 1, 4} and {2, 4}
//
// 2)
// 47
//
// Returns: 2
//
//
//
// 3)
// 256
//
// Returns: 9
//
//
//
// 4)
// 8489289
//
// Returns: 6853
//
//
//
// 5)
// 1000000000
//
// Returns: 73411
//
//
//
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
