#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class MultiplicationTable3 {
public:
	vector <int> construct(int x) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, vector <int> p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	MultiplicationTable3 *obj;
	vector <int> answer;
	obj = new MultiplicationTable3();
	clock_t startTime = clock();
	answer = obj->construct(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p1[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	vector <int> p1;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 2;
	p1 = {1,1,1,1};
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 3;
	p1 = {0,1,0,1};
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 6;
	p1 = {0,1,1,0,1,2,0,1,2};
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = 31;
	p1 = {0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4};
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = 1;
	p1 = {0};
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Fox Ciel is creating a new binary operation.
// 
// 
// 
// The operation will be denoted $ and it will be defined on the finite set S = {0, 1, 2, ..., n-1}. I.e., for each ordered pair (i, j) of elements of S the operation (i $ j) will return some element of S.
// 
// 
// 
// For example, we can have S = {0, 1}, and we can define that (0 $ 0) = 0, (0 $ 1) = 1, (1 $ 0) = 0, and (1 $ 1) = 0.
// 
// 
// 
// Note that Ciel's operation is not necessarily symmetric. In other words, it is possible that for some i and j the operations (i $ j) and (j $ i) return two different values.
// 
// 
// 
// A subset T of S is called good if it has the following property: for any two elements i and j in T, (i $ j) is also in T.
// 
// 
// 
// You are given an int x.
// Construct a binary operation $ with the following properties:
// 
// The number n (i.e., the size of the set S) must be between 1 and 20, inclusive.
// The number of good subsets of the set S must be exactly x.
// 
// 
// Return a vector <int> containing the "multiplication table" of your operation $.
// More precisely, the return value should consist of n*n elements.
// For each i and j from the set S, element (i*n+j) of the return value should be the value (i $ j).
// 
// 
// 
// If there are multiple solutions, you may return any of them.
// You may assume that there is always at least one valid solution.
// 
// DEFINITION
// Class:MultiplicationTable3
// Method:construct
// Parameters:int
// Returns:vector <int>
// Method signature:vector <int> construct(int x)
// 
// 
// CONSTRAINTS
// -x will be between 1 and 1,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 2
// 
// Returns: {1, 1, 1, 1 }
// 
// We have chosen n = 2.
// Regardless of the inputs, our binary operation $ always returns 1.
// For this operation we have exactly x = 2 good subsets of S: the subset {1} and the subset {0,1}.
// 
// 1)
// 3
// 
// Returns: {0, 1, 0, 1 }
// 
// The length of the return value is 4, hence it describes an operation with n = 2.
// This particular return value describes the following operation:
// 
// 0 $ 0 = 0
// 0 $ 1 = 1
// 1 $ 0 = 0
// 1 $ 1 = 1
// 
// This operation has exactly 3 good subsets: {0}, {1}, and {0,1}.
// 
// 2)
// 6
// 
// Returns: {0, 1, 1, 0, 1, 2, 0, 1, 2 }
// 
// 
// 
// 3)
// 31
// 
// Returns: {0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4 }
// 
// All non-empty subsets of S are good.
// 
// 4)
// 1
// 
// Returns: {0 }
// 
// 
// 
// END KAWIGIEDIT TESTING
