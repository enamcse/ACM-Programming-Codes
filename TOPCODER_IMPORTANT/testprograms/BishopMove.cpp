#include <bits/stdc++.h>
#define _ ios_base::sync_with_stdio(0);cin.tie(0);
using namespace std;

class BishopMove {
public:
	int howManyMoves(int r1, int c1, int r2, int c2) {
		if((abs(r1-r2)+abs(c1-c2))%2) return -1;
		if(r1==r2 and c1 ==c2) return 0;
		return abs(r1-r2)==abs(c1-c2)?1:2;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	BishopMove *obj;
	int answer;
	obj = new BishopMove();
	clock_t startTime = clock();
	answer = obj->howManyMoves(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	int p2;
	int p3;
	int p4;

	{
	// ----- test 0 -----
	p0 = 4;
	p1 = 6;
	p2 = 7;
	p3 = 3;
	p4 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 2;
	p1 = 5;
	p2 = 2;
	p3 = 5;
	p4 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 1;
	p1 = 3;
	p2 = 5;
	p3 = 5;
	p4 = 2;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 4;
	p1 = 6;
	p2 = 7;
	p3 = 4;
	p4 = -1;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Janusz is learning how to play chess.
// He is using the standard chessboard with 8 rows and 8 columns.
// Both the rows and the columns are numbered 0 through 7.
// Thus, we can describe each cell using its two coordinates: (row, column).
//
// Janusz recently learned about one of the chess pieces: the bishop.
// The bishop is a piece that moves diagonally by an arbitrary number of cells.
// Formally, if a bishop is currently on the cell (r,c) of an empty chessboard,
// the set of all cells reachable in a single move contains the following cells:
//
// All cells of the form (r+k,c+k), where k is a positive integer.
// All cells of the form (r+k,c-k), where k is a positive integer.
// All cells of the form (r-k,c+k), where k is a positive integer.
// All cells of the form (r-k,c-k), where k is a positive integer.
//
// (Of course, the bishop's destination must always be a valid cell on the chessboard.)
//
// Janusz took an empty chessboard and he placed a single bishop onto the cell (r1,c1).
// He now wants to move it to the cell (r2,c2) using as few moves as possible.
//
// You are given the ints r1, c1, r2, and c2.
// Compute and return the smallest number of moves a bishop needs to get from (r1,c1) to (r2,c2).
// If it is impossible for a bishop to reach the target cell, return -1 instead.
//
// DEFINITION
// Class:BishopMove
// Method:howManyMoves
// Parameters:int, int, int, int
// Returns:int
// Method signature:int howManyMoves(int r1, int c1, int r2, int c2)
//
//
// CONSTRAINTS
// -r1,c1,r2,c2 will be between 0 and 7, inclusive.
//
//
// EXAMPLES
//
// 0)
// 4
// 6
// 7
// 3
//
// Returns: 1
//
// The bishop can go from (4,6) to (7,3) in a single move.
//
// 1)
// 2
// 5
// 2
// 5
//
// Returns: 0
//
// The bishop is already where it should be, no moves are necessary.
//
// 2)
// 1
// 3
// 5
// 5
//
// Returns: 2
//
// In the first move Janusz can move the bishop to the cell (4,6).
// Please note that this is the largest possible return value: whenever there is a solution, there is a solution that uses at most two moves.
//
// 3)
// 4
// 6
// 7
// 4
//
// Returns: -1
//
// If the bishop starts at (4,6), it can never reach (7,4).
//
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
