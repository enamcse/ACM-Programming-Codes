#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class ConnectingGameDiv2 {
public:
    bool col[200];
    vector <string> b;
    map<char,int>mp;
    int dp[100][100], nn;
    int rec(int x,int y)
    {
        if(x>=nn) return 0;
        int &ret = dp[x][y], now;
        now = col[ b[x][y] ]==1?0:mp[ b[x][y] ];
        ret = inf;
        col[ b[x][y] ]=1;
        ret=min(ret,now+rec(x+1,y));
        if(y+1<nn)ret=min(ret,now+rec(x+1,y+1));
        if(y>=1)ret=min(ret,now+rec(x+1,y-1));
        if(now)col[ b[x][y] ]=0;
        ret+=now;
        return ret;
    }
	int getmin(vector <string> board) {

		vector<char>v;
		b = board;
		int n = board[0].size(),mn=inf,t=0;
		nn=n;
		for (int i = 0; i<n; i++)
		    for (int j =0; j<n; j++)
		        mp[ board[i][j] ]++;

		for (int i = 0; i<n; i++)
        {
            mn= min(mn,rec(i,0));
        }

	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	ConnectingGameDiv2 *obj;
	int answer;
	obj = new ConnectingGameDiv2();
	clock_t startTime = clock();
	answer = obj->getmin(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	vector <string> p0;
	int p1;

	// ----- test 0 -----
	disabled = false;
	p0 = {"AA","BC"};
	p1 = 2;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = {"AAB","ACD","CCD"};
	p1 = 4;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = {"iii","iwi","iii"};
	p1 = 8;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = {"rng58","Snuke","Sothe"};
	p1 = 6;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = {"yyAArJqjWTH5","yyEEruYYWTHG","hooEvutpkkb2","OooNgFFF9sbi","RRMNgFL99Vmm","R76XgFF9dVVV","SKnZUPf88Vee"};
	p1 = 14;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Cat Snuke and wolf Sothe are playing the Connecting Game.
//
// The Connecting Game is played on a rectangular grid that is divided into unit square cells.
// The grid is divided into some regions.
// Each cell belongs into exactly one of those regions.
// Each region is 4-connected (see Notes for a formal definition).
//
// You are given a vector <string> board that describes the division of the grid into regions.
// Each character in board represents one of the cells.
// Cells that are represented by the same character belong into the same region.
//
// Initially, the entire grid is colorless.
// The game consists of two steps.
// In the first step, Snuke colors some of the regions red.
// In the second step, Sothe colors all remaining regions blue.
// (Within each region, all cells must have the same color.)
// Sothe wins if there is a path (see Notes for a formal definition) of blue cells from the top row to the bottom row.
// Otherwise, Snuke wins.
//
// You are given the vector <string> board.
// Compute and return the smallest number of cells Snuke can color red in order to win the game.
//
// (Note that Snuke cannot simply color individual cells, he must color entire regions.
// Also note that we are interested in minimizing the total number of cells, not the number of regions Snuke colors.)
//
// DEFINITION
// Class:ConnectingGameDiv2
// Method:getmin
// Parameters:vector <string>
// Returns:int
// Method signature:int getmin(vector <string> board)
//
//
// NOTES
// -A path is a sequence of cells such that each pair of consecutive cells shares a common side.
// -A region is 4-connected if for any two cells A and B in that region there is a path that starts with A, ends with B, and only contains cells from that region.
//
//
// CONSTRAINTS
// -board will contain between 1 and 50 elements, inclusive.
// -Each element in board will contain between 1 and 50 characters, inclusive.
// -All elements in board will have the same length.
// -Each character in board will be a letter or a digit ('a'-'z', 'A'-'Z', or '0'-'9').
// -Each of the regions in board will be 4-connected.
//
//
// EXAMPLES
//
// 0)
// {"AA"
// ,"BC"}
//
// Returns: 2
//
// If Snuke colors 0 or 1 cells red, he will lose the game. He can win the game by coloring 2 cells red. One possibility is to color the two 'A' cells red.
//
// 1)
// {"AAB"
// ,"ACD"
// ,"CCD"}
//
// Returns: 4
//
// Here, one optimal solution is to color the regions 'B' and 'C' red. There will be 1 + 3 = 4 red cells.
//
// 2)
// {"iii"
// ,"iwi"
// ,"iii"}
//
// Returns: 8
//
//
//
// 3)
// {"rng58"
// ,"Snuke"
// ,"Sothe"}
//
// Returns: 6
//
//
//
// 4)
// {"yyAArJqjWTH5","yyEEruYYWTHG","hooEvutpkkb2","OooNgFFF9sbi","RRMNgFL99Vmm","R76XgFF9dVVV","SKnZUPf88Vee"}
//
// Returns: 14
//
//
//
// END KAWIGIEDIT TESTING
