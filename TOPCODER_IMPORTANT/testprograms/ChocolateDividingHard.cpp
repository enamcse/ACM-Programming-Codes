#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class ChocolateDividingHard {
public:
	int findBest(vector <string> chocolate) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	ChocolateDividingHard *obj;
	int answer;
	obj = new ChocolateDividingHard();
	clock_t startTime = clock();
	answer = obj->findBest(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <string> p0;
	int p1;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {"95998","21945","23451","99798","74083"};
	p1 = 3;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {"12942","23456","99798","98998","67675"};
	p1 = 5;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {"129420","234560","997980","989980","676760"};
	p1 = 6;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {"75356291270936062","61879202375922897","36129319478450361","06320615547656937","45254744307868843","14920689266495048","71727226106159490","91771159776736563","94812939088509638","56115984810304444","76317596217857418","59753883189643338"};
	p1 = 44;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Mirosz adores sweets.
// He has just bought a rectangular bar of chocolate.
// The bar is divided into a grid of square cells.
// Different cells may have a different quality.
// You are given the description of the bar in a vector <string> chocolate.
// Each character in chocolate is a digit between '0' and '9', inclusive: the quality of one of the cells.
// 
// Mirosz is now going to divide the chocolate into 16 parts: one for him and one for each of his 15 friends.
// He will do the division by making six cuts: three horizontal and three vertical ones.
// Each cut must go between two rows or columns of cells.
// Each of the 16 parts must be non-empty.
// The quality of a part is the sum of the qualities of all cells it contains.
// 
// Mirosz is well-mannered and he will let his friends choose their pieces first.
// His friends are even more addicted to chocolate than he is.
// Therefore, they will certainly choose the pieces with higher quality first, and Mirosz will be left with the worst of the 16 pieces.
// 
// You are given the vector <string> chocolate.
// Find the optimal places for the six cuts.
// More precisely, compute and return the largest possible quality of Mirosz's part of the chocolate bar.
// 
// DEFINITION
// Class:ChocolateDividingHard
// Method:findBest
// Parameters:vector <string>
// Returns:int
// Method signature:int findBest(vector <string> chocolate)
// 
// 
// CONSTRAINTS
// -chocolate will contain between 4 and 75 elements, inclusive. 
// -All elements in chocolate will contain between 4 and 75 characters, inclusive. 
// -All elements in chocolate will contain the same number of characters. 
// -All elements in chocolate will contain only digits.
// 
// 
// EXAMPLES
// 
// 0)
// {
// "95998",
// "21945",
// "23451",
// "99798",
// "74083"
// }
// 
// Returns: 3
// 
// One of two optimal ways to cut this chocolate is shown below. 
// 
// 9 | 5 | 9 9 | 8 
// --|---|-----|--- 
// 2 | 1 | 9 4 | 5 
// 2 | 3 | 4 5 | 1 
// --|---|-----|--- 
// 9 | 9 | 7 9 | 8 
// --|---|-----|--- 
// 7 | 4 | 0 8 | 3 
// 
// This way of cutting produces parts with the following qualities: 9, 5, 18, 8, 4, 4, 22, 6, 9, 9, 16, 8, 7, 4, 8, 3. The quality of the worst part (the one that Mirosz will get) is 3. 
// 
// Here is another way of cutting the same chocolate: 
// 
// 9 | 5 9 | 9 | 8 
// --|-----|---|--- 
// 2 | 1 9 | 4 | 5 
// --|-----|---|--- 
// 2 | 3 4 | 5 | 1 
// 9 | 9 7 | 9 | 8 
// --|-----|---|--- 
// 7 | 4 0 | 8 | 3  
// 
// If Mirosz cuts the chocolate in this way, the quality of his part will be 2, which is worse than 3.
// 
// 1)
// {
// "12942",
// "23456",
// "99798",
// "98998",
// "67675"
// }
// 
// Returns: 5
// 
// 
// 
// 2)
// {
// "129420",
// "234560",
// "997980",
// "989980",
// "676760"
// }
// 
// Returns: 6
// 
// 
// 
// 3)
// {"75356291270936062","61879202375922897","36129319478450361","06320615547656937","45254744307868843","14920689266495048","71727226106159490","91771159776736563","94812939088509638","56115984810304444","76317596217857418","59753883189643338"}
// 
// Returns: 44
// 
// 
// 
// END KAWIGIEDIT TESTING
