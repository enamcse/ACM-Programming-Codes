#include <bits/stdc++.h>
#define _ ios_base::sync_with_stdio(0);cin.tie(0);
using namespace std;


class SumOfPower {
public:
	int findSum(vector <int> array) {
	    int sum=0, len = array.size();
	    int cum[55];
	    cum[0] = 0;
	    for (int i = 1; i<=len; i++)
	        cum[i] = cum[i-1]+array[i-1], cout<<cum[i]<<" ";

	    for (int i = 0; i<=len; i++)
        {
            for (int j = 1; j+i<=len; j++)
                sum+=(cum[j+i]-cum[j-1]);
        }
        return sum;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	SumOfPower *obj;
	int answer;
	obj = new SumOfPower();
	clock_t startTime = clock();
	answer = obj->findSum(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	int p1;

	{
	// ----- test 0 -----
	int t0[] = {1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {1,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 10;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {3,14,15,92,65};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1323;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {1,2,3,4,5,6,7,8,9,10};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1210;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// You are given a vector <int> array.
// At any moment, you may choose a nonempty contiguous subsequence of array.
// Whenever you do so, you will gain power equal to the sum of all elements in the chosen subsequence.
//
//
//
// You chose each possible contiguous subsequence exactly once, each time gaining some power.
// Compute and return the total amount of power you gained.
//
//
// DEFINITION
// Class:SumOfPower
// Method:findSum
// Parameters:vector <int>
// Returns:int
// Method signature:int findSum(vector <int> array)
//
//
// CONSTRAINTS
// -array will contain between 1 and 50 elements, inclusive.
// -Each element in array will be between 1 and 100, inclusive.
//
//
// EXAMPLES
//
// 0)
// {1,2}
//
// Returns: 6
//
// We have the following three contiguous subsequences:
//
//  {1} => 1
//  {2} => 2
//  {1,2} => 3
//
// Thus, the sum of all possible powers is 1+2+3=6.
//
// 1)
// {1,1,1}
//
// Returns: 10
//
// A 3-element sequence has 6 possible nonempty contiguous subsequences.
// For the sequence {1,1,1} these are the subsequences: {1}, {1}, {1}, {1,1}, {1,1}, and {1,1,1}.
// Their sums are 1, 1, 1, 2, 2, and 3.
// If you choose each of them once, the total power you'll gain is 1+1+1+2+2+3 = 10.
//
// 2)
// {3,14,15,92,65}
//
// Returns: 1323
//
//
//
// 3)
// {1,2,3,4,5,6,7,8,9,10}
//
// Returns: 1210
//
//
//
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
