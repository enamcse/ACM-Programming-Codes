#include <bits/stdc++.h>

#define all(a)           a.rbegin(),a.rend()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class GreaterGameDiv2 {
public:
	int calc(vector <int> snuke, vector <int> sothe) {
		int n = snuke.size(), n2, sum=0;
//		sort(all(snuke));
//		sort(all(sothe));
		for (int i = 0; i<n; i++)
		    if(snuke[i]>sothe[i]) sum++;
        return sum;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	GreaterGameDiv2 *obj;
	int answer;
	obj = new GreaterGameDiv2();
	clock_t startTime = clock();
	answer = obj->calc(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	vector <int> p0;
	vector <int> p1;
	int p2;

	// ----- test 0 -----
	disabled = false;
	p0 = {1,3};
	p1 = {4,2};
	p2 = 1;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = {1,3,5,7,9};
	p1 = {2,4,6,8,10};
	p2 = 0;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = {2};
	p1 = {1};
	p2 = 1;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = {3,5,9,16,14,20,15,17,13,2};
	p1 = {6,18,1,8,7,10,11,19,12,4};
	p2 = 6;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Cat Snuke and wolf Sothe are playing the Greater Game.
// The game is played with cards.
// Each card has a number written on it.
// There are 2N cards.
// The numbers on the cards are the integers between 1 and 2N, inclusive.
//
// At the beginning of the game, each player gets N of the cards and chooses the order in which he wants to play them.
// The game then consists of N turns.
// In each turn, both players play one of their cards simultaneously.
// The player who revealed the card with the larger number gets a point.
//
// You are given two vector <int>s: snuke and sothe.
// The elements of snuke are the numbers on the cards Snuke is going to play, in order.
// Similarly, the elements of sothe are the numbers on the cards Sothe is going to play, in order.
// Compute and return the number of points Snuke will have at the end of the game.
//
// DEFINITION
// Class:GreaterGameDiv2
// Method:calc
// Parameters:vector <int>, vector <int>
// Returns:int
// Method signature:int calc(vector <int> snuke, vector <int> sothe)
//
//
// CONSTRAINTS
// -N will be between 1 and 50, inclusive.
// -snuke and sothe will contain exactly N elements each.
// -Each integer in snuke and sothe will be between 1 and 2N, inclusive.
// -The integers in snuke and sothe will be distinct.
//
//
// EXAMPLES
//
// 0)
// {1,3}
// {4,2}
//
// Returns: 1
//
// Snuke loses the first round because 1 is less than 4. Snuke then wins the second round because 3 is greater than 2.
//
// 1)
// {1,3,5,7,9}
// {2,4,6,8,10}
//
// Returns: 0
//
//
//
// 2)
// {2}
// {1}
//
// Returns: 1
//
//
//
// 3)
// {3,5,9,16,14,20,15,17,13,2}
// {6,18,1,8,7,10,11,19,12,4}
//
// Returns: 6
//
//
//
// END KAWIGIEDIT TESTING
