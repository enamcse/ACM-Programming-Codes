#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class QuadraticLaw
{
public:
    long long getTime(long long d)
    {
        ll i = sqrt(d/2);
        while(i+i*i<=d) i++;
        return i-1;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, long long p0, bool hasAnswer, long long p1)
{
    cout << "Test " << testNum << ": [" << p0;
    cout << "]" << endl;
    QuadraticLaw *obj;
    long long answer;
    obj = new QuadraticLaw();
    clock_t startTime = clock();
    answer = obj->getTime(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p1 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = answer == p1;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    bool disabled;
    bool tests_disabled;
    all_right = true;
    tests_disabled = false;

    long long p0;
    long long p1;

    // ----- test 0 -----
    disabled = false;
    p0 = 1ll;
    p1 = 0ll;
    all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
    tests_disabled = tests_disabled || disabled;
    // ------------------

    // ----- test 1 -----
    disabled = false;
    p0 = 2ll;
    p1 = 1ll;
    all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
    tests_disabled = tests_disabled || disabled;
    // ------------------

    // ----- test 2 -----
    disabled = false;
    p0 = 5ll;
    p1 = 1ll;
    all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
    tests_disabled = tests_disabled || disabled;
    // ------------------

    // ----- test 3 -----
    disabled = false;
    p0 = 6ll;
    p1 = 2ll;
    all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
    tests_disabled = tests_disabled || disabled;
    // ------------------

    // ----- test 4 -----
    disabled = false;
    p0 = 7ll;
    p1 = 2ll;
    all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
    tests_disabled = tests_disabled || disabled;
    // ------------------

    // ----- test 5 -----
    disabled = false;
    p0 = 1482ll;
    p1 = 38ll;
    all_right = (disabled || KawigiEdit_RunTest(5, p0, true, p1) ) && all_right;
    tests_disabled = tests_disabled || disabled;
    // ------------------

    // ----- test 6 -----
    disabled = false;
    p0 = 1000000000000000000ll;
    p1 = 999999999ll;
    all_right = (disabled || KawigiEdit_RunTest(6, p0, true, p1) ) && all_right;
    tests_disabled = tests_disabled || disabled;
    // ------------------

    // ----- test 7 -----
    disabled = false;
    p0 = 31958809614643170ll;
    p1 = 178770270ll;
    all_right = (disabled || KawigiEdit_RunTest(7, p0, true, p1) ) && all_right;
    tests_disabled = tests_disabled || disabled;
    // ------------------

    if (all_right)
    {
        if (tests_disabled)
        {
            cout << "You're a stud (but some test cases were disabled)!" << endl;
        }
        else
        {
            cout << "You're a stud (at least on given cases)!" << endl;
        }
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// PROBLEM STATEMENT
//
// "N?mec's quadratic law: how many minutes the teacher was late to the lesson, that many minutes squared he'll end the lesson earlier."
//
//
//
// In other words, if the teacher is t minutes late (for some non-negative integer t), he should end the lesson t2 minutes early. Of course, this means the teacher can't be too late, because a lesson can't end before even starting. It is, however, possible for the teacher to arrive and end the lesson immediately (in fact, he then only arrives to tell the students that the lesson's cancelled).
//
//
//
// You're given a long long d. The lesson was supposed to take d minutes. Compute and return the largest non-negative integer t such that the teacher can be t minutes late.
//
//
// DEFINITION
// Class:QuadraticLaw
// Method:getTime
// Parameters:long long
// Returns:long long
// Method signature:long long getTime(long long d)
//
//
// CONSTRAINTS
// -d will be between 1 and 1,000,000,000,000,000,000, inclusive.
//
//
// EXAMPLES
//
// 0)
// 1
//
// Returns: 0
//
// The lesson was supposed to take 1 minute. The teacher can only be 0 minutes late, in which case he ends the lesson 0 minutes early (i.e. he arrives and ends the lecture on time).
//
// 1)
// 2
//
// Returns: 1
//
// It's possible for the teacher to be 1 minute late and end the lecture 1 minute early (so there's no lecture at all).
//
// 2)
// 5
//
// Returns: 1
//
//
//
// 3)
// 6
//
// Returns: 2
//
//
//
// 4)
// 7
//
// Returns: 2
//
//
//
// 5)
// 1482
//
// Returns: 38
//
//
//
// 6)
// 1000000000000000000
//
// Returns: 999999999
//
//
//
// 7)
// 31958809614643170
//
// Returns: 178770270
//
//
//
// END KAWIGIEDIT TESTING
