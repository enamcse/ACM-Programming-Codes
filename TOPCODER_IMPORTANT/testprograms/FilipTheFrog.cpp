#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class FilipTheFrog {
public:
	int countReachableIslands(vector <int> positions, int L) {
	    int init = positions[0];
		sort(all(positions));
//		for (int i = 0; i<positions.size(); i++)
//		    cout<<positions[i]<<" \n"[i==positions.size()-1];
		int now=0, pre=init;
		for (vector<int>::iterator it = lower_bound(all(positions), init); it!=positions.end(); it++)
        {
//            cout<<now<<": "<<*it<<endl;
            if(*it-pre<=L) now++;
            else break;
            pre = *it;
        }
        pre = init;
        for (vector<int>::iterator it = lower_bound(all(positions), init)-1; it!=positions.begin()-1; it--)
        {
//            cout<<now<<":: "<<*it<<endl;
            if(pre-*it<=L) now++;
            else break;
            pre = *it;
        }
        return now;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	FilipTheFrog *obj;
	int answer;
	obj = new FilipTheFrog();
	clock_t startTime = clock();
	answer = obj->countReachableIslands(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	vector <int> p0;
	int p1;
	int p2;

	// ----- test 0 -----
	disabled = false;
	p0 = {4,7,1,3,5};
	p1 = 1;
	p2 = 3;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = {100,101,103,105,107};
	p1 = 2;
	p2 = 5;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = {17,10,22,14,6,1,2,3};
	p1 = 4;
	p2 = 7;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = {0};
	p1 = 1000;
	p2 = 1;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = {{330,696,245,827,303,601,58,379,849,970,339,911,548,399,118,49,784,863,781,287,284,540,952,592,177,342,670,560,541,554,173,491,931,706,905,75,644,543,378,641,772,273,803,628,971}};
	p1 = 90;
	p2 = 17;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Filip the Frog lives on a number line. There are islands at some points on the number line. You are given the positions of these islands in the vector <int> positions.
//
//
// Filip starts on the island located at positions[0]. His maximal jump length is L, which means that he can jump to any island that is within a distance of L (inclusive) from his current location. Filip can't jump to a point on the number line that doesn't contain an island. He can make an unlimited number of jumps.
//
//
// An island is reachable if Filip can get to it through some sequence of jumps. Please find and return the number of reachable islands.
//
// DEFINITION
// Class:FilipTheFrog
// Method:countReachableIslands
// Parameters:vector <int>, int
// Returns:int
// Method signature:int countReachableIslands(vector <int> positions, int L)
//
//
// NOTES
// -If two islands are located at points A and B on the number line, then the distance between them is |A - B|.
//
//
// CONSTRAINTS
// -positions will contain between 1 and 50 elements, inclusive.
// -Each element of positions will be between 0 and 1000, inclusive.
// -The elements of positions will be distinct.
// -L will be between 1 and 1000, inclusive.
//
//
// EXAMPLES
//
// 0)
// {4, 7, 1, 3, 5}
// 1
//
// Returns: 3
//
// Filip starts at position 4 and his maximal jump length is 1. He can reach the islands at positions 3, 4, and 5.
//
// 1)
// {100, 101, 103, 105, 107}
// 2
//
// Returns: 5
//
// Here he can reach all 5 islands.
//
// 2)
// {17, 10, 22, 14, 6, 1, 2, 3}
// 4
//
// Returns: 7
//
//
//
// 3)
// {0}
// 1000
//
// Returns: 1
//
//
//
// END KAWIGIEDIT TESTING
