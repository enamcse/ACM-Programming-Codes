#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class Nine {
public:
	int count(int N, vector <int> d) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	Nine *obj;
	int answer;
	obj = new Nine();
	clock_t startTime = clock();
	answer = obj->count(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	vector <int> p1;
	int p2;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 2;
	p1 = {1,2};
	p2 = 4;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 2;
	p1 = {1,2,3};
	p2 = 16;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 1;
	p1 = {0,0,1};
	p2 = 200;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = 5;
	p1 = {1,3,5,8,24,22,25,21,30,2,4,0,6,7,9,11,14,13,12,15,18,17,16,19,26,29,31,28,27,10,20,23};
	p2 = 450877328;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = 5;
	p1 = {31,31,31,31,31};
	p2 = 11112;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Bob's little sister Alice is nine years old.
// Bob is testing her mathematical prowess by asking her to compute the remainder a number gives when divided by 9.
// 
// 
// 
// Today, Bob gave Alice exactly N such questions.
// We will number the questions 0 through N-1.
// In each question, Bob gave Alice the same M-digit number.
// (Note that Bob's number is allowed to have some leading zeros.)
// 
// 
// 
// In some of those cases Alice may have skipped some of the digits when reading the number.
// However, she never made any other mistakes in her calculations.
// For example, if Bob gave Alice the number 012345 three times, she may have read it as 0145 the first time, 012345 the second time, and 135 the third time.
// Then, her answers would be 145 modulo 9 = 1, 12345 modulo 9 = 6, and 135 modulo 9 = 0.
// 
// 
// 
// You are given the int N and a vector <int> d with M elements.
// For each i, the number d[i] corresponds to the digit of the order 10^i in Bob's number.
// For each i and j, Alice read digit i when answering question j if and only if bit number j of the number d[i] is 1.
// 
// 
// 
// For example, suppose that d[3] = 6.
// In binary, 6 is 110.
// In other words, the binary digits number 0, 1, and 2 are 0, 1, and 1.
// Hence, Alice skipped the corresponding digit in question 0 but she read it in questions 1 and 2.
// 
// 
// 
// A surprising thing happened in today's experiment:
// For each of the N questions, Alice's answer was that the remainder is 0.
// Bob found that interesting.
// He now wonders: given N and d, how many different M-digit numbers have this property?
// 
// 
// 
// Let X be the answer to Bob's question.
// Compute and return the value (X modulo 1,000,000,007).
// 
// 
// DEFINITION
// Class:Nine
// Method:count
// Parameters:int, vector <int>
// Returns:int
// Method signature:int count(int N, vector <int> d)
// 
// 
// CONSTRAINTS
// -N will be between 1 and 5, inclusive.
// -The number of elements in d will be between 1 and 5,000, inclusive.
// -All elements in d must be between 0 and 2N-1, inclusive
// -d will be such that in each question Alice will read at least one digit.
// 
// 
// EXAMPLES
// 
// 0)
// 2
// {1,2}
// 
// Returns: 4
// 
// In this case we have N=2 questions and Bob's number has two digits.
// When processing question 0, Alice only reads digit 0 (the last digit of the number).
// As her answer is that the remainder is 0, this digit must be either 0 or 9.
// When processing question 1, Alice only reads digit 1 (the first digit of the number).
// As her answer is that the remainder is 0 again, this digit must also be either 0 or 9.
// Thus there are four possible numbers: 00, 09, 90, and 99.
// 
// 1)
// 2
// {1,2,3}
// 
// Returns: 16
// 
// 
// 
// 2)
// 1
// {0,0,1}
// 
// Returns: 200
// 
// 
// 
// 3)
// 5
// {1,3,5,8,24,22,25,21,30,2,4,0,6,7,9,11,14,13,12,15,18,17,16,19,26,29,31,28,27,10,20,23}
// 
// Returns: 450877328
// 
// 
// 
// 4)
// 5
// {31,31,31,31,31}
// 
// Returns: 11112
// 
// 
// 
// END KAWIGIEDIT TESTING
