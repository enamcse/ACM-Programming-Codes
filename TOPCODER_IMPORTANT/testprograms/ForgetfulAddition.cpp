#include <bits/stdc++.h>
#define _ ios_base::sync_with_stdio(0);cin.tie(0);

#define sz 200005
#define pb(a) push_back(a)
#define pp pop_back()
#define all(a) a.begin(),a.end()
#define ll long long
#define fread freopen("input.txt","r",stdin)
#define fwrite freopen("output.txt","w",stdout)
#define inf (1e18)
#define chng(a,b) a^=b^=a^=b;
#define clr(abc,z) memset(abc,z,sizeof(abc))
#define PI acos(-1)
#define pi 3.14159265358979323846264338327950288419716939937510
#define fr(i,a,b) for(i=a;i<=b;i++)
#define print1(a)    cout<<a<<endl
#define print2(a,b) cout<<a<<" "<<b<<endl
#define print3(a,b,c) cout<<a<<" "<<b<<" "<<c<<endl
#define mod 1000000007

using namespace std;


class ForgetfulAddition {
public:
	int minNumber(string expression) {
		int n = expression.size(), mn = INFINITY;
		int x,y;
		char st1[20], st2[20];
		for (int i = 1; i<n; i++)
		    {
		        string a = expression.substr(0,i);
		        string b = expression.substr(i);
		        cout<<a<<" "<<b<<endl;
		        strcpy(st1,a.c_str());
		        strcpy(st2,b.c_str());
		        sscanf(st1,"%d", &x);
		        sscanf(st2,"%d", &y);
		        mn = min(mn,x+y);
		    }
        return mn;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	ForgetfulAddition *obj;
	int answer;
	obj = new ForgetfulAddition();
	clock_t startTime = clock();
	answer = obj->minNumber(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	string p0;
	int p1;

	// ----- test 0 -----
	disabled = false;
	p0 = "22";
	p1 = 4;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = "123";
	p1 = 15;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = "1289";
	p1 = 101;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = "31415926";
	p1 = 9067;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = "98765";
	p1 = 863;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// Alice had two positive integers, a and b.
// She typed the expression "a+b" into her computer, but the '+' key malfunctioned.
// For example, instead of "128+9" the computer's screen now shows "1289".
//
//
//
// Later, Bob saw the string on the screen.
// He knows that the '+' sign is missing but he does not know where it belongs.
// He now wonders what is the smallest possible result of Alice's original expression.
//
//
//
// For example, if Bob sees the string "1289", Alice's expression is either "128+9" or "12+89" or "1+289".
// These expressions evaluate to 137, 101, and 290.
// The smallest of those three results is 101.
//
//
//
// You are given a string expression that contains the expression on Alice's screen.
// Compute and return the smallest possible result after inserting the missing plus sign
//
//
// DEFINITION
// Class:ForgetfulAddition
// Method:minNumber
// Parameters:string
// Returns:int
// Method signature:int minNumber(string expression)
//
//
// CONSTRAINTS
// -expression will contain between 2 and 8 characters, inclusive.
// -Each character of expression will be between '1' and '9'.
//
//
// EXAMPLES
//
// 0)
// "22"
//
// Returns: 4
//
// The only possible expression Alice could have typed is "2+2". Thus, Bob knows this evaluates to 4.
//
// 1)
// "123"
//
// Returns: 15
//
// The expression Alice has typed could have been "1+23" or "12+3". Of these two, the second is smaller, thus Bob will get the answer 15.
//
// 2)
// "1289"
//
// Returns: 101
//
// This is the example from the problem statement.
//
// 3)
// "31415926"
//
// Returns: 9067
//
//
//
// 4)
// "98765"
//
// Returns: 863
//
//
//
// END KAWIGIEDIT TESTING
