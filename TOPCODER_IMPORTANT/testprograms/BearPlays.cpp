#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class BearPlays {
public:

	int pileSize(int A, int B, int K) {
        ll a=A,b=B;
		map<pair<ll,ll>,int>mp;
		vector< pair<int,int> >v;
		mp[{a,b}]=0;
        v.pb({a,b});
		for(int k = 0; k < K;)
        {
            if(a <= b){
                b -= a;
                a <<= 1;
            }else{
                a -= b;
                b <<= 1;
            }
            k++;
            if(a>b) swap(a,b);
            if(mp.count({a,b})){
                int len = k-mp[{a,b}];
                int ans = (K-k)%len+mp[{a,b}];
                return min(v[ans].first, v[ans].second);
            }
            mp[{a,b}] = k;
            v.pb({a,b});
        }
        return min(a,b);
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	BearPlays *obj;
	int answer;
	obj = new BearPlays();
	clock_t startTime = clock();
	answer = obj->pileSize(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	int p0;
	int p1;
	int p2;
	int p3;

	// ----- test 0 -----
	disabled = false;
	p0 = 4;
	p1 = 7;
	p2 = 2;
	p3 = 5;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = 5;
	p1 = 5;
	p2 = 3;
	p3 = 0;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = 2;
	p1 = 6;
	p2 = 1;
	p3 = 4;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = 2;
	p1 = 8;
	p2 = 2000000000;
	p3 = 2;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = 900000000;
	p1 = 350000000;
	p2 = 3;
	p3 = 300000000;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Limak is a little bear who loves to play.
// Today he is playing by moving some stones between two piles of stones.
// Initially, one of the piles has A and the other has B stones in it.
//
// Limak has decided to perform a sequence of K operations.
// In each operation he will double the size of the currently smaller pile.
// Formally, if the current pile sizes are labeled X and Y in such a way that X <= Y, he will move X stones from the second pile to the first one.
// After this move the new pile sizes will be X+X and Y-X.
//
// You are given the ints A, B, and K.
// Determine the pile sizes after Limak finishes all his operations.
// Return the size of the smaller of those piles.
//
// Formally, suppose that the final pile sizes are labeled P and Q in such a way that P <= Q.
// Return P.
//
// DEFINITION
// Class:BearPlays
// Method:pileSize
// Parameters:int, int, int
// Returns:int
// Method signature:int pileSize(int A, int B, int K)
//
//
// NOTES
// -Pay attention to the unusual time limit.
//
//
// CONSTRAINTS
// -A and B will be between 1 and 1,000,000,000, inclusive.
// -K will be between 1 and 2,000,000,000, inclusive.
//
//
// EXAMPLES
//
// 0)
// 4
// 7
// 2
//
// Returns: 5
//
// The process will look as follows:
//
// Initially, the pile sizes are 4 and 7.
// First operation: Limak doubles the pile of size 4 by moving 4 stones from the other pile to this pile. The new pile sizes are 8 and 3.
// Second operation: Limak doubles the pile of size 3. The final pile sizes are 5 and 6.
// As 5 <= 6, the correct return value is 5.
//
//
// 1)
// 5
// 5
// 3
//
// Returns: 0
//
// The initial pile sizes are 5 and 5.
// In the first operation Limak will double one of them, so after the operation the new pile sizes will be 10 and 0.
// The second and third operation do nothing: in each of them Limak doubles the size of an empty pile.
//
// As 0 ? 10, the correct return value is 0.
//
// 2)
// 2
// 6
// 1
//
// Returns: 4
//
// After the only operation the pile sizes will be 4 and 4, hence the correct return value is 4.
//
// 3)
// 2
// 8
// 2000000000
//
// Returns: 2
//
//
//
// 4)
// 900000000
// 350000000
// 3
//
// Returns: 300000000
//
//
//
// END KAWIGIEDIT TESTING
