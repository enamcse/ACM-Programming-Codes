#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define sz              55
#define V(a)            vector<(a)>

using namespace std;

int dp[sz][sz][sz][sz];

class Bracket107 {
public:

    bool check(string &s)
    {
        int cnt = 0;
        for (int i = 0; i<s.size(); i++)
        {
            if(s[i]=='(') cnt++;
            else cnt--;
            if(cnt<0) return false;
        }
        return 1;
    }

	int yetanother(string s) {
		int n = s.size();
		set<string>ans;
		string s2,s3;
		for (int i = 0; i<n; i++)
        {
            s2 = s.substr(0,i)+s.substr(i+1);
            for (int j = 0; j<n; j++)
            {
                s3 = s2.substr(0,j)+s[i]+s2.substr(j);
                if(s3!=s && check(s3)) ans.insert(s3);
            }
        }
        return ans.size();
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	Bracket107 *obj;
	int answer;
	obj = new Bracket107();
	clock_t startTime = clock();
	answer = obj->yetanother(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	string p0;
	int p1;

	// ----- test 0 -----
	disabled = false;
	p0 = "(())";
	p1 = 1;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = "(())()";
	p1 = 3;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = "()()()";
	p1 = 3;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = "(((())))";
	p1 = 5;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = "((())())";
	p1 = 9;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Correct bracket sequences are strings in which each character is a '(' or a ')', the total number of opening brackets is the same as the total number of closing brackets, and each prefix contains at least as many opening as closing brackets.
// For example, the shortest few correct bracket sequences are "", "()", "(())", and "()()".
//
// The subsequence of a string S is any string that can be obtained by erasing zero or more characters of S.
// For example, each of the strings "", "ace", and "abcde" is a subsequence of "abcde".
//
// We will use LCS(S,T) to denote the length of a longest common subsequence of strings S and T.
// In other words, LCS(S,T) is the largest k such that there is a string U of length k that is both a subsequence of S and a subsequence of T.
// For example, LCS("abcde","bad") = 2.
//
// You are given a string s that contains a correct bracket sequence.
// You are looking for a string t with the following properties:
//
// t will have the same length as s,
// t will be a correct bracket sequence,
// t will not be equal to s,
// LCS(s,t) will be as large as possible.
//
// Compute and return the number of strings with these properties.
//
// DEFINITION
// Class:Bracket107
// Method:yetanother
// Parameters:string
// Returns:int
// Method signature:int yetanother(string s)
//
//
// NOTES
// -You may assume that the answer for each valid test case fits into a signed 32-bit integer variable.
//
//
// CONSTRAINTS
// -s will contain between 4 and 50 characters, inclusive.
// -Each character in s will be either '(' or ')'.
// -s will be a correct bracket sequence.
//
//
// EXAMPLES
//
// 0)
// "(())"
//
// Returns: 1
//
// There is only one other correct bracket sequence of the same length.
//
// 1)
// "(())()"
//
// Returns: 3
//
// There are four other correct bracket sequences of the same length: "((()))", "()(())", "()()()", and "(()())".
// However, only in three of those four cases the length of the longest common subsequence is 5.
// LCS( "(())()", "()(())" ) is only 4, therefore "()(())" is not a valid choice of the string t.
//
// 2)
// "()()()"
//
// Returns: 3
//
//
//
// 3)
// "(((())))"
//
// Returns: 5
//
//
//
// 4)
// "((())())"
//
// Returns: 9
//
//
//
// END KAWIGIEDIT TESTING
