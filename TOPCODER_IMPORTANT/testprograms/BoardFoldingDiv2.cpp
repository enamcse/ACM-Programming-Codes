#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class BoardFoldingDiv2 {
public:
	int howMany(vector <string> paper) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	BoardFoldingDiv2 *obj;
	int answer;
	obj = new BoardFoldingDiv2();
	clock_t startTime = clock();
	answer = obj->howMany(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <string> p0;
	int p1;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {"10","11"};
	p1 = 1;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {"1111111","1111111"};
	p1 = 84;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {"0110","1001","1001","0110"};
	p1 = 9;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {"0","0","0","1","0","0"};
	p1 = 6;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {"000","010","000"};
	p1 = 1;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Little Petya likes puzzles a lot.
// Recently he has received one as a gift from his mother.
// The puzzle has the form of a rectangular sheet of paper that is divided into N rows by M columns of unit square cells.
// Rows are numbered 0 through N-1 from top to bottom, and columns 0 through M-1 from left to right.
// Each cell is colored either black or white.
// You are given a description of the paper, the exact format is specified at the end of this problem statement.
// 
// 
// The goal of the puzzle is to fold the paper.
// This has to be done in a sequence of turns.
// In each turn, Petya has to fold the paper according to the rules below.
// He can end the process after any number of turns (including zero), even if there are still valid ways to fold the paper.
// 
// 
// In each turn, Petya must follow these steps:
// To start folding, he must choose a line that is parallel to one of the sides of the paper and passes between two rows/columns of cells.
// He can then take the smaller part of the paper and fold it on top of the larger part.
// (If the line divides the current paper in half, he can fold either half on top of the other.)
// There is one additional restriction:
// Petya may only perform the fold if all cells of the part that is being folded land on equally-colored cells of the part that remains in place.
// 
// 
// For example, consider the following paper (with 0 and 1 representing white and black):
// 
// 10010101
// 11110100
// 00000000
// 01101110
// 
// 
// 
// Here, Petya could choose the vertical line that goes between the two leftmost columns and the rest of the paper.
// Note that this is a valid choice: as he makes the fold, the cells from the leftmost two columns will all match their counterparts in the right part of the
// paper.
// This is how the paper looks like after the fold (with periods representing empty spaces):
// 
// ..010101
// ..110100
// ..000000
// ..101110
// 
// 
// 
// Clearly, even after multiple folds the paper will always look like a subrectangle of the original paper.
// Two states of the game are considered the same if that rectangle has the same dimensions and the same offset with respect to the original top left corner of
// the paper.
// (Note that folding order does not matter. Two different sequences of folding may produce the same final state.)
// 
// 
// You are given a description of the original state of the paper as a vector <string> paper. Here N is the number of elements in paper and M is the length of its each element. For each i and j, the character paper[i][j] is either '0' (meaning that the cell (i,j) is white) or '1' (the cell is black).
// Compute and return the number of possible final states of the game.
// 
// DEFINITION
// Class:BoardFoldingDiv2
// Method:howMany
// Parameters:vector <string>
// Returns:int
// Method signature:int howMany(vector <string> paper)
// 
// 
// CONSTRAINTS
// -paper will contain between 1 and 50 elements, inclusive.
// -Each element of paper will contain between 1 and 50 elements, inclusive.
// -All elements of paper will have the same length.
// -paper will contain only characters '0' and '1'.
// 
// 
// EXAMPLES
// 
// 0)
// {"10",
//  "11"}
// 
// Returns: 1
// 
// There is no valid way to fold this paper, so there is just one possible outcome.
// 
// 1)
// {"1111111",
//  "1111111"}
// 
// Returns: 84
// 
// We can fold it into any of the 84 possible subrectangles of the original rectangle.
// 
// 2)
// {"0110",
//  "1001",
//  "1001",
//  "0110"}
// 
// Returns: 9
// 
// 
// 
// 3)
// {"0",
//  "0",
//  "0",
//  "1",
//  "0",
//  "0"}
// 
// Returns: 6
// 
// 
// 
// 4)
// {"000",
//  "010",
//  "000"}
// 
// Returns: 1
// 
// 
// 
// END KAWIGIEDIT TESTING
