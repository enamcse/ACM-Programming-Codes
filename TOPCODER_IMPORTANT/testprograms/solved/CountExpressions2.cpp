#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class CountExpressions2
{
public:
    int calcExpressions(int x, int y, int val)
    {
        int value[6][4], len, cnt=0;
        vector<int>v1,v2,v3,v4,v5,v6,v7;

        value[0][0] = value[0][3] = value[1][0] = value[1][2] = value[2][0] = value[2][1] = value[3][1] = value[3][3] = value[4][1] = value[4][2] =  value[5][2] = value[5][3] = x;
        value[0][1] = value[0][2] = value[1][1] = value[1][3] = value[2][2] = value[2][3] = value[3][0] = value[3][2] = value[4][0] = value[4][3] =  value[5][0] = value[5][1] = y;
        for (int i = 0; i<6; i++)
        {
            for (int j = 0; j<3; j++)
            {
                int p;
                if(j==0) p = value[i][0] + value[i][1];
                else if(j==1) p = value[i][0] - value[i][1];
                else p = value[i][0] * value[i][1];
                for (int k = 0; k<3; k++)
                {
                    int q = p;
                    if(k==0) q +=  value[i][2];
                    else if(k==1) q -= value[i][2];
                    else q *= value[i][2];
                    for (int l = 0; l<3; l++)
                    {
                        int r = q;
                        if(l==0) r +=  value[i][3];
                        else if(l==1) r -= value[i][3];
                        else r *= value[i][3];

                        if(r==val)
                        {
                            len = v1.size();
                            bool flag = true;
                            for (int z = 0; z<len; z++)
                            {
                                if(v1[z]==value[i][0]&&v2[z]==j&&v3[z]==value[i][1]&&v4[z]==k&&v5[z]==value[i][2]&&v6[z]==l&&v7[z]==value[i][3])
                                {
                                    flag = false;
                                    break;
                                }
                            }
                            if(flag) cnt++;
                            else
                            {
                                v1.push_back(value[i][0]);
                                v2.push_back(j);
                                v3.push_back(value[i][1]);
                                v4.push_back(k);
                                v5.push_back(value[i][2]);
                                v6.push_back(l);
                                v7.push_back(value[i][3]);
                            }
                        }
                    }
                }
            }
        }
        return cnt;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3)
{
    cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
    cout << "]" << endl;
    CountExpressions2 *obj;
    int answer;
    obj = new CountExpressions2();
    clock_t startTime = clock();
    answer = obj->calcExpressions(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p3 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = answer == p3;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    int p0;
    int p1;
    int p2;
    int p3;

    {
        // ----- test 0 -----
        p0 = 7;
        p1 = 8;
        p2 = 16;
        p3 = 9;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 3;
        p1 = 5;
        p2 = 7;
        p3 = 5;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 99;
        p1 = 100;
        p2 = 98010000;
        p3 = 6;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = -99;
        p1 = 42;
        p2 = -1764;
        p3 = 2;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = 100;
        p1 = -100;
        p2 = -100000000;
        p3 = 0;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        p0 = 1;
        p1 = 2;
        p2 = 5;
        p3 = 17;
        all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// PROBLEM STATEMENT
//
// 	You are helping your brother with his homework assignment.  His teacher gave him two distinct numbers x
// 	and y, and asked him to use those numbers to form as many different expressions as possible.
// 	Each expression must satisfy all of the following rules:
//
//
// 		The only allowed operators are '+', '-' and '*'.
//
//
// 		x and y must each appear exactly twice.  No other numbers are allowed.
//
//
// 		The result of the expression must be equal to val.
//
//
//
//
//
// 	In other words, each expression can be written in the form "a op1 b op2 c op3 d", where each of op1, op2 and op3
// 	is '+', '-' or '*', and among the numbers a, b, c and d, exactly two are equal to x and the other two are
// 	equal to y.  Please note that the unary minus is not allowed (see example 0).  Expressions are calculated from
// 	left to right, and there is no operator precedence.  For example, to calculate the result of
// 	"2 + 2 * 3 + 3", you would first calculate 2 + 2, then multiply the result by 3, and then add 3 to get 15.
//
//
//
// 	Return the total number of different expressions that can be formed.  Two expressions are considered
// 	different if their string notations (as described in the previous paragraph) are different.  For example,
// 	the expressions "2 + 3 - 2 - 3", "2 - 2 + 3 - 3" and "2 - 3 - 2 + 3" are all different.
//
//
//
// DEFINITION
// Class:CountExpressions2
// Method:calcExpressions
// Parameters:int, int, int
// Returns:int
// Method signature:int calcExpressions(int x, int y, int val)
//
//
// CONSTRAINTS
// -x and y will each be between -100 and 100, inclusive.
// -x and y will be different.
// -val will be between -100000000 and 100000000, inclusive.
//
//
// EXAMPLES
//
// 0)
// 7
// 8
// 16
//
// Returns: 9
//
// The possible expressions are:
// 8 + 8 + 7 - 7
// 8 + 7 + 8 - 7
// 7 + 8 + 8 - 7
// 8 + 8 - 7 + 7
// 8 + 7 - 7 + 8
// 7 + 8 - 7 + 8
// 8 - 7 + 8 + 7
// 8 - 7 + 7 + 8
// 7 - 7 + 8 + 8
//
// Please note that the unary minus is not allowed, so "-7 + 7 + 8 + 8" is not a valid expression.
//
//
// 1)
// 3
// 5
// 7
//
// Returns: 5
//
// The possible expressions are:
// 3 * 5 - 3 - 5
// 5 * 3 - 3 - 5
// 3 * 5 - 5 - 3
// 5 * 3 - 5 - 3
// 5 - 3 * 5 - 3
//
//
// 2)
// 99
// 100
// 98010000
//
// Returns: 6
//
//
//
// 3)
// -99
// 42
// -1764
//
// Returns: 2
//
// -99 - (-99) - 42 * 42
// -99 - 42 - (-99) * 42
//
//
// 4)
// 100
// -100
// -100000000
//
// Returns: 0
//
//
//
// 5)
// 1
// 2
// 5
//
// Returns: 17
//
//
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
