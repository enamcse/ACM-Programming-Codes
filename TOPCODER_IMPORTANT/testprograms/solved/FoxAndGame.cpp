#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cctype>
#include <fstream>

#define sz 100
#define pb(a) push_back(a)
#define pp pop_back()
#define ll long long
#define fread freopen("input.txt","r",stdin)
#define fwrite freopen("output.txt","w",stdout)
#define inf (1<<30-1)
#define clr(abc,z) memset(abc,z,sizeof(abc))
#define PI acos(-1)

using namespace std;

class FoxAndGame {
public:
	int countStars(vector <string> result) {
		int n,ans=0;
    n = result.size();
    for (int i =0; i<n; i++)
        {
            for (int j =0; j<3; j++)
                if(result[i][j]=='o')ans++;
        }
    return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	FoxAndGame *obj;
	int answer;
	obj = new FoxAndGame();
	clock_t startTime = clock();
	answer = obj->countStars(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"ooo","ooo"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"ooo","oo-","o--"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"ooo","---","oo-","---","o--"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"o--","o--","o--","ooo","---"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"---","o--","oo-","ooo","ooo","oo-","o--","---"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 12;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"---","---","---","---","---","---"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	string t0[] = {"oo-"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Fox Ciel is playing the popular game 'Cut the Rope' on her smartphone.
// The game has multiple stages, and for each stage the player can gain between 0 and 3 stars, inclusive.
// You are given a vector <string> result containing Fox Ciel's current results:
// For each stage, result contains an element that specifies Ciel's result in that stage.
// More precisely, result[i] will be "---" if she got 0 stars in stage i, "o--" if she got 1 star, "oo-" if she got 2 stars and "ooo" if she managed to get all 3 stars.
// Return the total number of stars Ciel has at the moment.
// 
// DEFINITION
// Class:FoxAndGame
// Method:countStars
// Parameters:vector <string>
// Returns:int
// Method signature:int countStars(vector <string> result)
// 
// 
// CONSTRAINTS
// -result will contain between 1 and 50 elements, inclusive.
// -Each element in result will be one of "---", "o--", "oo-", "ooo".
// 
// 
// EXAMPLES
// 
// 0)
// {"ooo",
//  "ooo"}
// 
// Returns: 6
// 
// There are two stages. In each of them, Ciel got all three stars. Together, she now has 3+3 = 6 stars.
// 
// 1)
// {"ooo",
//  "oo-",
//  "o--"}
// 
// Returns: 6
// 
// This time the answer is 3 + 2 + 1 = 6.
// 
// 2)
// {"ooo",
//  "---",
//  "oo-",
//  "---",
//  "o--"}
// 
// Returns: 6
// 
// 
// 
// 3)
// {"o--",
//  "o--",
//  "o--",
//  "ooo",
//  "---"}
// 
// Returns: 6
// 
// 
// 
// 4)
// {"---",
//  "o--",
//  "oo-",
//  "ooo",
//  "ooo",
//  "oo-",
//  "o--",
//  "---"}
// 
// Returns: 12
// 
// 
// 
// 5)
// {"---",
//  "---",
//  "---",
//  "---",
//  "---",
//  "---"}
// 
// Returns: 0
// 
// 
// 
// 6)
// {"oo-"}
// 
// Returns: 2
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
