#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class AmebaDiv2 {
public:
	int simulate(vector <int> X, int A) {
		int len=X.size(), s;
		s = A;
		for (int i = 0; i<len; i++)
        {
            if(s==X[i]) s<<=1;
        }
        return s;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	AmebaDiv2 *obj;
	int answer;
	obj = new AmebaDiv2();
	clock_t startTime = clock();
	answer = obj->simulate(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	int p1;
	int p2;

	{
	// ----- test 0 -----
	int t0[] = {2,1,3,1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 4;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {1,4,9,16,25,36,49};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 10;
	p2 = 10;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {1,2,4,8,16,32,64,128,256,1024,2048};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 512;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {817,832,817,832,126,817,63,63,126,817,832,287,823,817,574};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 63;
	p2 = 252;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Monte-Carlo is an amoeba. Amoebas can feed on gel: whenever an amoeba encounters a piece of gel that is exactly as big as the amoeba, the amoeba will consume the gel and thus double its size.
//
// Initially, the size of Monte-Carlo was A. During its lifetime, Monte-Carlo encountered several gels and consumed the ones it could.
//
// You are given a vector <int> X and the int A. The elements of X are the sizes of gels Monte-Carlo encountered, in chronological order. Compute and return the final size of Monte-Carlo.
//
// DEFINITION
// Class:AmebaDiv2
// Method:simulate
// Parameters:vector <int>, int
// Returns:int
// Method signature:int simulate(vector <int> X, int A)
//
//
// CONSTRAINTS
// -X will contain between 1 and 200 integers, inclusive.
// -Each element of X will be between 1 and 1,000,000,000, inclusive.
// -A will be between 1 and 1,000,000,000, inclusive.
//
//
// EXAMPLES
//
// 0)
// {2,1,3,1,2}
// 1
//
// Returns: 4
//
//
// Gel #0 is bigger than Monte-Carlo, nothing happens.
// Monte-Carlo consumes gel #1. Its size is now 1+1 = 2.
// Gel #2 is bigger than Monte-Carlo, nothing happens.
// Gel #3 is smaller than Monte-Carlo, nothing happens.
// Monte-Carlo consumes gel #4. Its size is now 2+2 = 4.
//
//
// 1)
// {1,4,9,16,25,36,49}
// 10
//
// Returns: 10
//
// The size of Monte-Carlo doesn't change.
//
// 2)
// {1,2,4,8,16,32,64,128,256,1024,2048}
// 1
//
// Returns: 512
//
//
//
// 3)
// {817,832,817,832,126,817,63,63,126,817,832,287,823,817,574}
// 63
//
// Returns: 252
//
//
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
