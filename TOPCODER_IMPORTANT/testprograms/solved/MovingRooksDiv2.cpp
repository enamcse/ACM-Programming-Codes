//#include <bits/stdc++.h>
//#define _ ios_base::sync_with_stdio(0);cin.tie(0);
#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

class MovingRooksDiv2 {
public:
    void swaping(int *a, int *b)
    {
        int temp = *a;
        *a = *b;
        *b = temp;
        return;
    }

	string move(vector <int> Y1, vector <int> Y2) {
		set<vector<int> > s;
		s.insert(Y1);
        queue<vector<int> >q;
        q.push(Y1);
        while(!q.empty())
        {
            vector<int> now = q.front();q.pop();
            for (int i = 0; i<now.size(); i++)
                for (int j = i + 1; j<now.size(); j++)
                    if(now[i]>now[j])
                    {
                        swaping(&now[i], &now[j]);
                        if(s.count(now) == 0)q.push(now),s.insert(now);
                        swaping(&now[i], &now[j]);
                    }
        }

        if(s.count(Y2))return "Possible";
        else return "Impossible";
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	MovingRooksDiv2 *obj;
	string answer;
	obj = new MovingRooksDiv2();
	clock_t startTime = clock();
	answer = obj->move(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	vector <int> p1;
	string p2;

	{
	// ----- test 0 -----
	int t0[] = {0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Possible";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {1,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Possible";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {0,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Impossible";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {3,1,2,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,2,1,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Possible";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	int t0[] = {3,1,2,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {3,2,0,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Impossible";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// This problem is about chessboards with rooks.
// A rook is a chess piece that moves arbitrarily far, either horizontally or vertically.
// Both rows and columns of chessboards in our problem are numbered starting from 0.
//
// An n times n chessboard is called peaceful if it contains exactly n rooks and no two rooks attack each other.
// In other words, there cannot be two rooks in the same row or in the same column of the chessboard.
// A peaceful chessboard can be described by a vector <int> Y with n elements: for each row r, the rook in row r is in column Y[r].
//
// You are given two vector <int>s Y1 and Y2 with n elements each.
// Each of them represents one peaceful chessboard.
//
// You want to change the first chessboard into the second one.
// There is only one type of moves you are allowed to make:
// On the first chessboard, you can choose two rooks in positions (r1,c1) and (r2,c2) such that r1 < r2 and c1 > c2, and move them to (r1,c2) and (r2,c1).
// Note that the new chessboard is peaceful again.
//
// Return "Possible" (quotes for clarity) if it is possible to change the first chessboard into the second one. Otherwise, return "Impossible".
//
// DEFINITION
// Class:MovingRooksDiv2
// Method:move
// Parameters:vector <int>, vector <int>
// Returns:string
// Method signature:string move(vector <int> Y1, vector <int> Y2)
//
//
// CONSTRAINTS
// -Y1 will contain between 1 and 8 elements, inclusive.
// -Y2 will contain the same number of elements as Y1.
// -Each element of Y1 will be between 0 and n-1, inclusive, where n is the number of elements of Y1.
// -Each element of Y2 will be between 0 and n-1, inclusive, where n is the number of elements of Y2.
// -All elements of Y1 will be distinct.
// -All elements of Y2 will be distinct.
//
//
// EXAMPLES
//
// 0)
// {0}
// {0}
//
// Returns: "Possible"
//
// Both boards are already equal, we don't even have to make any moves.
//
// 1)
// {1,0}
// {0,1}
//
// Returns: "Possible"
//
// Initially, the rooks on the first chessboard are on the cells (0,1) and (1,0).
// There is one valid move: moving these two rooks to (0,0) and (1,1).
// After this move, the first chessboard is identical to the second one.
//
// 2)
// {0,1}
// {1,0}
//
// Returns: "Impossible"
//
// There are no valid moves so there's no way to reach the goal.
//
// 3)
// {3,1,2,0}
// {0,2,1,3}
//
// Returns: "Possible"
//
//
//
// 4)
// {3,1,2,0}
// {3,2,0,1}
//
// Returns: "Impossible"
//
//
//
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
