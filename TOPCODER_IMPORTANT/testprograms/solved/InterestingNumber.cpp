#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cctype>
#include <fstream>

#define sz 100
#define pb(a) push_back(a)
#define pp pop_back()
#define ll long long
#define fread freopen("input.txt","r",stdin)
#define fwrite freopen("output.txt","w",stdout)
#define inf (1<<30-1)
#define clr(abc,z) memset(abc,z,sizeof(abc))
#define PI acos(-1)

using namespace std;

class InterestingNumber
{
public:
    string isInteresting(string x)
    {
        int ss = x.size();
        vector<int>pos;
        for (int i = 0; i<10; i++)
        {
            pos.clear();
            for (int j = 0; j<ss; j++)
            {
                if(x[j]-'0'==i) pos.pb(j);
            }
            if(pos.size()==1) return "Not interesting";
            for (int j = 0; j<pos.size(); j++)
                for (int k = j+1; k<pos.size(); k++)
                {
                    if(pos[k]-pos[j]!=i+1)
                    {
                        return "Not interesting";
                    }
                }

        }


        return "Interesting";

    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1)
{
    cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
    cout << "]" << endl;
    InterestingNumber *obj;
    string answer;
    obj = new InterestingNumber();
    clock_t startTime = clock();
    answer = obj->isInteresting(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << "\"" << p1 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "\"" << answer << "\"" << endl;
    if (hasAnswer)
    {
        res = answer == p1;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    string p0;
    string p1;

    {
        // ----- test 0 -----
        p0 = "2002";
        p1 = "Interesting";
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = "1001";
        p1 = "Not interesting";
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = "41312432";
        p1 = "Interesting";
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = "611";
        p1 = "Not interesting";
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = "64200246";
        p1 = "Interesting";
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        p0 = "631413164";
        p1 = "Not interesting";
        all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// PROBLEM STATEMENT
// Fox Ciel thinks that the number 41312432 is interesting.
// This is because of the following property:
// There is exactly 1 digit between the two 1s, there are exactly 2 digits between the two 2s, and so on.
//
//
// Formally, Ciel thinks that a number X is interesting if the following property is satisfied:
// For each D between 0 and 9, inclusive, X either does not contain the digit D at all, or it contains exactly two digits D, and there are precisely D other digits between them.
//
//
// You are given a string x that contains the digits of a positive integer.
// Return "Interesting" if that integer is interesting, otherwise return "Not interesting".
//
// DEFINITION
// Class:InterestingNumber
// Method:isInteresting
// Parameters:string
// Returns:string
// Method signature:string isInteresting(string x)
//
//
// CONSTRAINTS
// -x will correspond to an integer between 1 and 1,000,000,000, inclusive.
// -x will not start with a '0'.
//
//
// EXAMPLES
//
// 0)
// "2002"
//
// Returns: "Interesting"
//
// There are 0 digits between the two 0s, and 2 digits between the two 2s, so this is an interesting number.
//
// 1)
// "1001"
//
// Returns: "Not interesting"
//
// There should be 1 digit between the two 1s, but there are 2 digits between them. Hence, this number is not interesting.
//
// 2)
// "41312432"
//
// Returns: "Interesting"
//
// This is the number in the statement.
//
// 3)
// "611"
//
// Returns: "Not interesting"
//
// There is only one digit 6 in this number, so it's not interesting.
//
// 4)
// "64200246"
//
// Returns: "Interesting"
//
//
//
// 5)
// "631413164"
//
// Returns: "Not interesting"
//
// This number contains the digit 1 three times.
//
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
