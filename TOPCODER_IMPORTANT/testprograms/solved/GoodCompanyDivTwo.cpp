#include <bits/stdc++.h>

#define pb              push_back
#define SZ              500
#define VI              vector<int>


using namespace std;


class GoodCompanyDivTwo
{
public:
    VI adj[SZ];
    VI ww;

    int rec(int n)
    {
        vector<int>v;
        bool flag = true;
        v.pb(ww[n]);
        int len = adj[n].size(), cnt=0;

        for (int i = 0; i<len; i++)
        {
            sort(v.begin(),v.end());

            if(binary_search(v.begin(),v.end(), ww[ adj[n][i] ])==0)
            {
                v.pb(ww[ adj[n][i] ]);
            }
            else flag = false;
            cnt+= rec(adj[n][i]);
        }
        if(flag) cnt++;

        return cnt;
    }

    int countGood(vector <int> superior, vector <int> workType)
    {
        int len = superior.size();
        for (int i = 0; i<len; i++)
            adj[i].clear();
        ww = workType;
        for (int i = 1; i<len; i++)
        {
            adj[ superior[i] ].pb(i);
        }
        return rec(0);
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, int p2)
{
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << p1[i];
    }
    cout << "}";
    cout << "]" << endl;
    GoodCompanyDivTwo *obj;
    int answer;
    obj = new GoodCompanyDivTwo();
    clock_t startTime = clock();
    answer = obj->countGood(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = answer == p2;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    vector <int> p0;
    vector <int> p1;
    int p2;

    {
        // ----- test 0 -----
        int t0[] = {-1,0};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {1,2};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 2;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        int t0[] = {-1,0};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {1,1};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 1;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        int t0[] = {-1,0,1,1};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {1,4,3,2};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 4;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        int t0[] = {-1,0,1,0,0};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {3,3,5,2,2};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 4;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        int t0[] = {-1,0,1,1,1,0,2,5};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {1,1,2,3,4,5,3,3};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 7;
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        int t0[] = {-1,0,0,1,1,3,0,2,0,5,2,5,5,6,1,2,11,12,10,4,7,16,10,9,12,18,15,23,20,7,4};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {4,6,4,7,7,1,2,8,1,7,2,4,2,9,11,1,10,11,4,6,11,7,2,8,9,9,10,10,9,8,8};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 27;
        all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// PROBLEM STATEMENT
//
// Shiny has a company.
// There are N employees in her company.
// The employees are numbered 0 through N-1 in order in which they joined the company.
//
//
//
// Employee 0 is the only employee with no boss.
// Every other employee has precisely one direct boss in the company.
// You are given a vector <int> superior with N elements.
// Element 0 of superior will be -1 to denote that employee 0 has no boss.
// For each i between 1 and N-1, inclusive, element i of superior will be the number of the boss of employee i.
//
//
//
// For each employee, their boss joined the company before them.
// Formally, for each i between 1 and N-1, inclusive, superior[i] will be between 0 and i-1, inclusive.
//
//
//
// Each employee only does one type of work.
// You are given a vector <int> workType with N elements.
// (Different integers represent different types of work.)
//
//
//
// Each employee of the company has their own department.
// The department of employee x is formed by employee x and all the employees such that x is their boss.
// Formally, for any y different from x, employee y belongs into the department of employee x if and only if superior[y]=x.
// Note that if superior[z]=y and superior[y]=x, employee z does not belong into the department of employee x.
//
//
//
// A department is called diverse if no two employees in the department do the same type of work.
// Compute and return the number of diverse departments in Shiny's company.
//
//
// DEFINITION
// Class:GoodCompanyDivTwo
// Method:countGood
// Parameters:vector <int>, vector <int>
// Returns:int
// Method signature:int countGood(vector <int> superior, vector <int> workType)
//
//
// CONSTRAINTS
// -superior will contain between 1 and 100 elements, inclusive.
// -workType will contain the same number of elements as superior.
// -Each element of workType will be between 1 and 100, inclusive.
// -superior[0] will be -1.
// -For each valid i>0, superior[i] will be between 0 and i-1, inclusive.
//
//
// EXAMPLES
//
// 0)
// {-1, 0}
// {1, 2}
//
// Returns: 2
//
// The department of employee 0 contains employees 0 and 1.
// The department of employee 1 contains employee 1 only.
// Both departments are diverse.
//
// 1)
// {-1, 0}
// {1, 1}
//
// Returns: 1
//
// The departments are the same as in Example 0.
// However, now the department of employee 0 is not diverse: it contains two employees who do the same type of work.
// Only the department of employee 1 is now diverse.
//
// 2)
// {-1, 0, 1, 1}
// {1, 4, 3, 2}
//
// Returns: 4
//
// Note that in this test case the department of employee 0 contains only employees 0 and 1. Employees 2 and 3 do not belong into the department of employee 0.
//
// 3)
// {-1, 0, 1, 0, 0}
// {3, 3, 5, 2, 2}
//
// Returns: 4
//
//
//
// 4)
// {-1, 0, 1, 1, 1, 0, 2, 5}
// {1, 1, 2, 3, 4, 5, 3, 3}
//
// Returns: 7
//
//
//
// 5)
// {-1, 0, 0, 1, 1, 3, 0, 2, 0, 5, 2, 5, 5, 6, 1, 2, 11, 12, 10, 4, 7, 16, 10, 9, 12, 18, 15, 23, 20, 7, 4}
// {4, 6, 4, 7, 7, 1, 2, 8, 1, 7, 2, 4, 2, 9, 11, 1, 10, 11, 4, 6, 11, 7, 2, 8, 9, 9, 10, 10, 9, 8, 8}
//
// Returns: 27
//
//
//
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
