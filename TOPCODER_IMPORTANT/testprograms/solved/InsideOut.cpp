#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cctype>
#include <fstream>

#define sz 100
#define pb(a) push_back(a)
#define pp pop_back()
#define ll long long
#define fread freopen("input.txt","r",stdin)
#define fwrite freopen("output.txt","w",stdout)
#define inf (1<<30-1)
#define clr(abc,z) memset(abc,z,sizeof(abc))
#define PI acos(-1)

using namespace std;

class InsideOut {
public:
	string unscramble(string line) {
		int h,n = line.size(),k=0;
		string out;
		out = line;
		h = (n>>1);
        for (int i=h-1; i>=0; i--)
        {
            out[k++] = line[i];
        }
        for (int i=n-1; i>=h; i--)
        {
            out[k++] = line[i];
        }
        return out;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	InsideOut *obj;
	string answer;
	obj = new InsideOut();
	clock_t startTime = clock();
	answer = obj->unscramble(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	string p1;

	{
	// ----- test 0 -----
	p0 = "I ENIL SIHTHSIREBBIG S";
	p1 = "THIS LINE IS GIBBERISH";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = "LEVELKAYAK";
	p1 = "LEVELKAYAK";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = "H YPPAHSYADILO";
	p1 = "HAPPY HOLIDAYS";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	p1 = "MLKJIHGFEDCBAZYXWVUTSRQPON";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = "RUT OWT SNEH HCNERF EERHTEGDIRTRAP A DNA  SEVODELT";
	p1 = "THREE FRENCH HENS TWO TURTLEDOVES  AND A PARTRIDGE";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// Your printer has been infected by a virus and is printing gibberish.  After staring at several printed pages for a while, you realize that it is printing every line inside-out.  In other words, the left half of each line is being printed starting in the middle of the page and proceeding out toward the left margin.  Similarly, the right half of each line is being printed starting at the right margin and proceeding in toward the middle of the page.
// For example, the line
//
//
//     THIS LINE IS GIBBERISH
//
// is being printed as
//
//     I ENIL SIHTHSIREBBIG S
//
// Your task is to unscramble a string line from its printed form back into its original order.
// You can assume that line contains an even number of characters.
//
// DEFINITION
// Class:InsideOut
// Method:unscramble
// Parameters:string
// Returns:string
// Method signature:string unscramble(string line)
//
//
// CONSTRAINTS
// -line contains between 2 and 50 characters, inclusive.
// -line contains an even number of characters.
// -line contains only uppercase letters ('A'-'Z') and spaces (' ').
//
//
// EXAMPLES
//
// 0)
// "I ENIL SIHTHSIREBBIG S"
//
// Returns: "THIS LINE IS GIBBERISH"
//
// The example above.
//
// 1)
// "LEVELKAYAK"
//
// Returns: "LEVELKAYAK"
//
// 2)
// "H YPPAHSYADILO"
//
// Returns: "HAPPY HOLIDAYS"
//
// 3)
// "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
//
// Returns: "MLKJIHGFEDCBAZYXWVUTSRQPON"
//
// 4)
// "RUT OWT SNEH HCNERF EERHTEGDIRTRAP A DNA  SEVODELT"
//
// Returns: "THREE FRENCH HENS TWO TURTLEDOVES  AND A PARTRIDGE"
//
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
