#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cctype>
#include <fstream>

#define sz 100
#define pb(a) push_back(a)
#define pp pop_back()
#define ll long long
#define fread freopen("input.txt","r",stdin)
#define fwrite freopen("output.txt","w",stdout)
#define inf (1<<30-1)
#define clr(abc,z) memset(abc,z,sizeof(abc))
#define PI acos(-1)

using namespace std;

class MagicalStringDiv1 {
public:
	int getLongest(string S) {
		int len = S.size(), n,i,k=0, ind;
		n = (len>>1);
		for (int i = 0; i<len; i++)
		    if(S[i]=='>') k++;
		k = min(k,n);
		while(k)
        {
            ind = i = 0;
            while(i<k)
            {
                if(S[ind]=='>') i++;
                ind++;
            }
            i=0;
            while(ind<len)
            {
                if(S[ind]=='<') i++;
                ind++;
            }
            if(i>=k) return (k<<1);
            k--;
        }
        return (k<<1);
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	MagicalStringDiv1 *obj;
	int answer;
	obj = new MagicalStringDiv1();
	clock_t startTime = clock();
	answer = obj->getLongest(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	int p1;

	{
	// ----- test 0 -----
	p0 = "<><><<>";
	p1 = 4;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = ">>><<<";
	p1 = 6;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = "<<<>>>";
	p1 = 0;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = "<<<<><>>><>>><>><>><>>><<<<>><>>>>><<>>>>><><<<<>>";
	p1 = 24;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Magical Girl Illy uses "magical strings" to cast spells.
// For her, a string X is magical if and only if there exists a non-negative integer k such that X is composed of k consecutive '>' characters followed by k consecutive '<' characters.
// Note that the empty string is also magical (for k=0).
//
// Once Illy picked up a string S.
// Each character of S was either '<' or '>'.
// Illy can change S by removing some of its characters.
// (The characters she does not remove will remain in their original order.)
// Illy wants to change S into a magical string by removing as few of its characters as possible.
//
// You are given the string S.
// Compute and return the length of the magical string Illy will obtain from S.
//
// DEFINITION
// Class:MagicalStringDiv1
// Method:getLongest
// Parameters:string
// Returns:int
// Method signature:int getLongest(string S)
//
//
// CONSTRAINTS
// -S will contain between 1 and 50 characters, inclusive.
// -Each character of S will be '<' or '>'.
//
//
// EXAMPLES
//
// 0)
// "<><><<>"
//
// Returns: 4
//
// The longest magical string Illy can produce is ">><<".
// Its length is 4.
// To change S into ">><<", Illy must remove the characters at 0-based indices 0, 2, and 6.
//
// 1)
// ">>><<<"
//
// Returns: 6
//
// S is already a magical string. Therefore Illy doesn't have to remove any character.
//
//
// 2)
// "<<<>>>"
//
// Returns: 0
//
// Illy has to remove all characters of S.
//
// 3)
// "<<<<><>>><>>><>><>><>>><<<<>><>>>>><<>>>>><><<<<>>"
//
// Returns: 24
//
//
//
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
