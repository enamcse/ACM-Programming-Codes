#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cctype>
#include <fstream>

#define sz 100
#define pb(a) push_back(a)
#define pp pop_back()
#define ll long long
#define fread freopen("input.txt","r",stdin)
#define fwrite freopen("output.txt","w",stdout)
#define inf (1<<30-1)
#define clr(abc,z) memset(abc,z,sizeof(abc))
#define PI acos(-1)

using namespace std;

class WhiteCells {
public:
	int countOccupied(vector <string> board) {
		int i,j,ans=0;
    for (i = 0; i<8; i++)
    {
        if(i%2) j =1;
        else j = 0;
        for (; j<8; j+=2)
            if(board[i][j]=='F') ans++;
    }
    return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	WhiteCells *obj;
	int answer;
	obj = new WhiteCells();
	clock_t startTime = clock();
	answer = obj->countOccupied(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"........","........","........","........","........","........","........","........"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"FFFFFFFF","FFFFFFFF","FFFFFFFF","FFFFFFFF","FFFFFFFF","FFFFFFFF","FFFFFFFF","FFFFFFFF"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 32;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {".F.F...F","F...F.F.","...F.F.F","F.F...F.",".F...F..","F...F.F.",".F.F.F.F","..FF..F."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"........","..F.....",".....F..",".....F..","........","........",".......F",".F......"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// A chessboard is an 8 x 8 grid of cells. Within each column and within each row, cells alternate between black and white. The cell in the upper left corner (0, 0) is white. You are given a vector <string> board, where the j-th character of the i-th element is 'F' if the cell in the j-th column from the left and i-th row from the top is occupied, or '.' if it is empty. Return the number of occupied white cells on the board.
// 
// 
// 
// DEFINITION
// Class:WhiteCells
// Method:countOccupied
// Parameters:vector <string>
// Returns:int
// Method signature:int countOccupied(vector <string> board)
// 
// 
// CONSTRAINTS
// -board will contain exactly 8 elements.
// -Each element of board will contain exactly 8 characters.
// -board will contain only the characters '.' and 'F'.
// 
// 
// EXAMPLES
// 
// 0)
// {"........",
//  "........",
//  "........",
//  "........",
//  "........",
//  "........",
//  "........",
//  "........"}
// 
// Returns: 0
// 
// 
// 
// 1)
// {"FFFFFFFF",
//  "FFFFFFFF",
//  "FFFFFFFF",
//  "FFFFFFFF",
//  "FFFFFFFF",
//  "FFFFFFFF",
//  "FFFFFFFF",
//  "FFFFFFFF"}
// 
// Returns: 32
// 
// 
// 
// 2)
// {".F.F...F",
//  "F...F.F.",
//  "...F.F.F",
//  "F.F...F.",
//  ".F...F..",
//  "F...F.F.",
//  ".F.F.F.F",
//  "..FF..F."}
// 
// Returns: 1
// 
// 
// 
// 3)
// {"........",
//  "..F.....",
//  ".....F..",
//  ".....F..",
//  "........",
//  "........",
//  ".......F",
//  ".F......"}
// 
// Returns: 2
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
