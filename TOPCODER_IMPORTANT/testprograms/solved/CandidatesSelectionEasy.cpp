#include <bits/stdc++.h>
using namespace std;



class CandidatesSelectionEasy {
public:
	vector <int> sort(vector <string> score, int x) {
		int len = score.size();
		vector<int>v;
		for (int j = 0; j<26; j++)
		for (int i = 0; i<len; i++)
		    if(score[i][x]=='A'+j) v.push_back(i);
		return v;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, vector <int> p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	CandidatesSelectionEasy *obj;
	vector <int> answer;
	obj = new CandidatesSelectionEasy();
	clock_t startTime = clock();
	answer = obj->sort(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p2[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p2[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	int p1;
	vector <int> p2;

	{
	// ----- test 0 -----
	string t0[] = {"ACB","BAC","CBA"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	int t2[] = {1,2,0};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	string t0[] = {"A","C","B","C","A"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	int t2[] = {0,4,2,1,3};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {"LAX","BUR","ONT","LGB","SAN","SNA","SFO","OAK","SJC"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	int t2[] = {5,3,8,7,4,6,1,2,0};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	string t0[] = {"BBCBABAC","BCBACABA","CCCBAACB","CACABABB","AABBBBCC"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6;
	int t2[] = {0,1,3,2,4};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	string t0[] = {"XXYWZWWYXZ","YZZZYWYZYW","ZYZZWZYYWW","ZWZWZWZXYW","ZYXWZXWYXY","YXXXZWXWXW","XWWYZWXYXY","XYYXYWYXWY","ZZYXZYZXYY","WXZXWYZWYY"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	int t2[] = {0,3,4,5,7,8,9,6,1,2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	string t0[] = {"X"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	int t2[] = {0};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Fox Ciel wants to hire a new maid.
// There are n candidates for the position.
// There are m different skills a maid should have, such as cooking, cleaning, or discreetness.
// Ciel numbered the candidates 0 through n-1 and the skills 0 through m-1.
//
//
//
// Ciel evaluated the level each candidate has in each of the skills.
// You are given this information encoded in a vector <string> score with n elements, each consisting of m characters.
// For each i and j, the character score[i][j] represents the level candidate i has in skill j.
// Said character will always be between 'A' and 'Z', inclusive, where 'A' means the best possible and 'Z' the worst possible candidate.
//
//
//
// You are also given an int x.
// Ciel thinks that skill x is the most important skill a maid should have.
//
//
//
// Return a vector <int> with n elements: the numbers of all candidates, ordered according to their level in skill x from the best to the worst.
// Candidates who have the same level in skill x should be ordered by their number in ascending order.
//
// DEFINITION
// Class:CandidatesSelectionEasy
// Method:sort
// Parameters:vector <string>, int
// Returns:vector <int>
// Method signature:vector <int> sort(vector <string> score, int x)
//
//
// CONSTRAINTS
// -n will be between 1 and 50, inclusive.
// -m will be between 1 and 50, inclusive.
// -score will contain exactly n elements.
// -Each element of score will contain exactly m characters.
// -Each character in each element of score will be an uppercase English letter ('A'-'Z').
// -x will be between 0 and m-1, inclusive.
//
//
// EXAMPLES
//
// 0)
// {"ACB", "BAC", "CBA"}
// 1
//
// Returns: {1, 2, 0 }
//
// The output should be {1, 2, 0}, because the level of candidate 1 in skill 1 is 'A', the level of candidate 2 in this skill is 'B', and the level of candidate 0 is 'C'.
//
// 1)
// {"A", "C", "B", "C", "A"}
// 0
//
// Returns: {0, 4, 2, 1, 3 }
//
// Note that when 2 candidates have same level, they will remain in the original order.
//
// 2)
// {"LAX","BUR","ONT","LGB","SAN","SNA","SFO","OAK","SJC"}
// 2
//
// Returns: {5, 3, 8, 7, 4, 6, 1, 2, 0 }
//
//
//
// 3)
// {"BBCBABAC","BCBACABA","CCCBAACB","CACABABB","AABBBBCC"}
// 6
//
// Returns: {0, 1, 3, 2, 4 }
//
//
//
// 4)
// {"XXYWZWWYXZ","YZZZYWYZYW","ZYZZWZYYWW","ZWZWZWZXYW","ZYXWZXWYXY","YXXXZWXWXW","XWWYZWXYXY","XYYXYWYXWY","ZZYXZYZXYY","WXZXWYZWYY"}
// 3
//
// Returns: {0, 3, 4, 5, 7, 8, 9, 6, 1, 2 }
//
//
//
// 5)
// {"X"}
// 0
//
// Returns: {0 }
//
// Note that we may have only one candidate as well as only 1 skill.
//
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
