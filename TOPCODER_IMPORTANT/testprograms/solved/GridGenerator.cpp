#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cctype>
#include <fstream>

#define sz 100
#define pb(a) push_back(a)
#define pp pop_back()
#define ll long long
#define fread freopen("input.txt","r",stdin)
#define fwrite freopen("output.txt","w",stdout)
#define inf (1<<30-1)
#define clr(abc,z) memset(abc,z,sizeof(abc))
#define PI acos(-1)

using namespace std;

class GridGenerator {
public:
	int generate(vector <int> row, vector <int> col) {
		int n=row.size(), sum[11][11];
		for (int i = 0; i<n; i++)
		{
		    sum[0][i] = row[i];
		    sum[i][0] = col[i];
		}
        for (int i = 1; i<n; i++)
        {
            for (int j = 1; j<n; j++)
                sum[i][j] = sum[i-1][j-1]+sum[i-1][j]+sum[i][j-1];
        }
        return sum[n-1][n-1];
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	GridGenerator *obj;
	int answer;
	obj = new GridGenerator();
	clock_t startTime = clock();
	answer = obj->generate(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	vector <int> p1;
	int p2;

	{
	// ----- test 0 -----
	int t0[] = {1,0,3,4,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,4,1,0,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 579;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {9,9,9,9,9,9,9,9,9,9};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {9,9,9,9,9,9,9,9,9,9};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 13163067;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {0,0,0,0,0,0,0,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,0,0,0,0,0,0,0,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Consider the following grid of numbers:
//
//  1 0  3  4   1
//  4 5  8  15  20
//  1 10 23 46  81
//  0 11 44 113 240
//  3 14 69 226 579
//
// Aside from the top row and left column, each number is equal to the sum of the three numbers immediately left, above, and above-left of it.  You will be given a vector <int>, row, representing the first row of a similar grid, and a vector <int>, col, representing the first column of the grid.  Your task is to return the value of the lower rightmost location when the values are calculated in the same way.  Hence, the above example would be represented by the input row = {1,0,3,4,1}, col = {1,4,1,0,3}.
//
// DEFINITION
// Class:GridGenerator
// Method:generate
// Parameters:vector <int>, vector <int>
// Returns:int
// Method signature:int generate(vector <int> row, vector <int> col)
//
//
// CONSTRAINTS
// -row and col will contain the same number of elements.
// -row and col will contain between 2 and 10 elements, inclusive.
// -Each element of row and col will be between 0 and 9, inclusive.
// -The first element of row will be the same as the first element of col.
//
//
// EXAMPLES
//
// 0)
// {1,0,3,4,1}
// {1,4,1,0,3}
//
// Returns: 579
//
// The example above.
//
// 1)
// {9,9,9,9,9,9,9,9,9,9}
// {9,9,9,9,9,9,9,9,9,9}
//
// Returns: 13163067
//
// The largest possible return.
//
// 2)
// {0,0,0,0,0,0,0,0,0}
// {0,0,0,0,0,0,0,0,0}
//
// Returns: 0
//
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
