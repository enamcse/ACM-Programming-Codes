#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

#define sz 100
#define pb(a) push_back(a)
#define pp pop_back()
#define ll long long
#define fread freopen("input.txt","r",stdin)
#define fwrite freopen("output.txt","w",stdout)
#define inf (1<<30-1)
#define clr(abc,z) memset(abc,z,sizeof(abc))
#define PI acos(-1)

using namespace std;


class FoxAndSightseeing
{
public:
    int getMin(vector <int> position)
    {
        int n=position.size(), sum, mn=inf, pos=1,last;
        while(pos!=n-1)
        {
            sum=0;
            last=0;
            for (int i = 0; i<n; i++)
            {
                if(i==pos) continue;
                sum+=abs(position[i]-position[last]);
                last = i;
            }
            if(sum<mn) mn = sum;
            pos++;
        }
        return mn;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1)
{
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}";
    cout << "]" << endl;
    FoxAndSightseeing *obj;
    int answer;
    obj = new FoxAndSightseeing();
    clock_t startTime = clock();
    answer = obj->getMin(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p1 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = answer == p1;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    vector <int> p0;
    int p1;

    {
        // ----- test 0 -----
        int t0[] = {1,4,-1,3};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 4;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        int t0[] = {-2,4,3};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 5;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        int t0[] = {1,2,3,4,5,6,7,8,9,10};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 9;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        int t0[] = {100,-100,99,-99};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 199;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        int t0[] = {74,84,92,23,5,-70,-47,-59,24,-86,-39,99,85,-42,54,100,47,-3,42,38};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 836;
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        int t0[] = {2,-3,5,7,-11,-13,17,-19,23,29,-31,-37,-41,43,-47,-53,-59,61,-67,71};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 535;
        all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// PROBLEM STATEMENT
//
// Fox Ciel is staying in Linear Country for sightseeing.
// The country consists of N cities numbered 0 through N-1.
// Ciel is currently staying in city 0.
//
//
// In this problem, we assume that the country is a straight line and that each city is a point on this line.
// You are given a vector <int> position with N elements.
// The i-th element in position represents the coordinate of the city i.
// The cities are numbered arbitrarily, their numbers are not related to their positions.
// Thus, distance between city i and city j is |position[i] - position[j]|,
// where |z| represents the absolute value of z.
//
//
// Ciel wanted to visit all the cities, so she planned a tour.
// She was going to visit city 0 on day 1, visit city 1 on day 2, and so on.
// She wanted to terminate the tour upon arrival to city N-1.
//
//
// Unfortunately, it turned out that Ciel's holiday has to be one day shorter.
// Of course, she must still start in city 0 and end in city N-1, so she decided to skip one of the other N-2 cities (i.e., one of cities 1 through N-2).
// She still wants to visit the other cities in the order given by their numbers.
// For example, if N=5, Ciel has three possibilities for her holiday: she will visit the cities in one of the orders (0,1,2,4), (0,1,3,4), or (0,2,3,4).
//
//
// Among these possibilities, Ciel will choose the one where the total distance she will have to travel is minimized.
// Compute and return this minimum total distance.
//
//
//
// DEFINITION
// Class:FoxAndSightseeing
// Method:getMin
// Parameters:vector <int>
// Returns:int
// Method signature:int getMin(vector <int> position)
//
//
// NOTES
// -You are not given the value of N, but you can easily determine it: N is equal to the number of elements in position.
//
//
// CONSTRAINTS
// -position will contain between 3 and 50 elements, inclusive.
// -Each element of position will be between -100 and 100, inclusive.
// -All the elements in position will be distinct.
//
//
// EXAMPLES
//
// 0)
// {1, 4, -1, 3}
//
// Returns: 4
//
// There are two strategies for Ciel.
//
// Skip city 1. The total distance is |1-(-1)|+|(-1)-3| = 2+4 = 6.
// Skip city 2. The total distance is |1-4|+|4-3| = 3+1 = 4.
//
// The second choice is better. So you should output 4.
//
// 1)
// {-2, 4, 3}
//
// Returns: 5
//
// There is only one strategy for Ciel: She skips city 1. The total distance is |(-2)-3| = 5.
//
// 2)
// {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
//
// Returns: 9
//
// For any choice she makes, the total distance is 9.
//
// 3)
// {100, -100, 99, -99}
//
// Returns: 199
//
// The optimum strategy is to skip city 1.
//
// 4)
// {74,84,92,23,5,-70,-47,-59,24,-86,-39,99,85,-42,54,100,47,-3,42,38}
//
// Returns: 836
//
//
//
// 5)
// {2,-3,5,7,-11,-13,17,-19,23,29,-31,-37,-41,43,-47,-53,-59,61,-67,71}
//
// Returns: 535
//
//
//
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
