#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class TypoCoderDiv2 {
public:
	int count(vector <int> rating) {
		int flag=0, chng=0, len = rating.size();

		for (int i = 0; i<len; i++)
        {
            if(flag == 0)
            {
                if(rating[i]>=1200)
                {
                    flag = 1;
                    chng++;
                }
            }
            else
            {
                if(rating[i]<1200)
                {
                    flag = 0;
                    chng++;
                }
            }
        }
        return chng;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	TypoCoderDiv2 *obj;
	int answer;
	obj = new TypoCoderDiv2();
	clock_t startTime = clock();
	answer = obj->count(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	int p1;

	{
	// ----- test 0 -----
	int t0[] = {1000,1200,1199};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {1500,2200,900,3000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {600,700,800,900,1000,1100,1199};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {0,4000,0,4000,4000,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	int t0[] = {575,1090,3271,2496,859,2708,3774,2796,1616,2552,3783,2435,1111,526,562};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// TypoCoder is a programming contest like TopCoder.
// TypoCoder also has a rating system.
// There are two types of coders in TypoCoder: brown coders and ciel coders.
// A brown coder is a coder whose rating is greater than or equal to 1200.
// A ciel coder is a coder whose rating is less than 1200.
//
// Whenever a new contestant joins TypoCoder, their rating is 500.
// Cat Lower joined TypoCoder and then competed in some contests.
// You are given a vector <int> rating.
// For each i (0-based index), rating[i] is Cat Lower's rating after he competed in (i+1) contests.
//
// Return the number of times Cat Lower changed his color (i.e., changed from being a ciel coder to being a brown coder or back).
//
// DEFINITION
// Class:TypoCoderDiv2
// Method:count
// Parameters:vector <int>
// Returns:int
// Method signature:int count(vector <int> rating)
//
//
// CONSTRAINTS
// -rating will contain between 1 and 50 elements, inclusive.
// -Each element of rating will be between 0 and 4000, inclusive.
//
//
// EXAMPLES
//
// 0)
// {1000,1200,1199}
//
// Returns: 2
//
// After the first contest Cat Lower was still a ciel coder. After the second contest his new rating was 1200 which made him a brown coder. (This was the first color change.) After the third contest his new rating was 1199 which made him a ciel coder again. (This was the second color change.)
//
// 1)
// {1500,2200,900,3000}
//
// Returns: 3
//
// The color changed after the first, the third and the fourth competition.
//
// 2)
// {600,700,800,900,1000,1100,1199}
//
// Returns: 0
//
// Cat Lower wasn't a brown coder at any time in this case.
//
// 3)
// {0,4000,0,4000,4000,0,0}
//
// Returns: 4
//
//
//
// 4)
// {575,1090,3271,2496,859,2708,3774,2796,1616,2552,3783,2435,1111,526,562}
//
// Returns: 4
//
//
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
