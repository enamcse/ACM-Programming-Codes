#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cctype>
#include <fstream>

#define sz 100
#define pb(a) push_back(a)
#define pp pop_back()
#define ll long long
#define fread freopen("input.txt","r",stdin)
#define fwrite freopen("output.txt","w",stdout)
#define inf (1<<30-1)
#define clr(abc,z) memset(abc,z,sizeof(abc))
#define PI acos(-1)

using namespace std;

class DiagonalDisproportion {
public:
	int getDisproportion(vector <string> matrix) {
		int n,ans=0, mdg=0,cdg=0;
    n = matrix.size();
    for (int i =0; i<n; i++)
        {
            mdg+=((int)(matrix[i][i]-'0'));
            cdg+=(int(matrix[i][n-i-1]-'0'));
        }
    cout<<mdg<<cdg<<" ::::::::";
    ans = mdg-cdg;
    return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	DiagonalDisproportion *obj;
	int answer;
	obj = new DiagonalDisproportion();
	clock_t startTime = clock();
	answer = obj->getDisproportion(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	int p1;

	{
	// ----- test 0 -----
	string t0[] = {"190","828","373"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	string t0[] = {"9000","0120","0000","9000"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {"6"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	string t0[] = {"7748297018","8395414567","7006199788","5446757413","2972498628","0508396790","9986085827","2386063041","5687189519","7729785238"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -24;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// Note: this problem statement contains images that may not display properly if viewed outside the applet.
//
//
//
// You are to calculate the diagonal disproportion of a square matrix.  The diagonal disproportion of a square matrix is the sum of the elements of its main diagonal minus the sum of the elements of its collateral diagonal. The main and collateral diagonals of a square matrix are shown in figures 1 and 2 respectively.
//
//
//
//
//
//
//
//
// The elements of the main diagonal are shown in green in figure 1, and the elements of the collateral diagonal are shown in cyan in figure 2.
//
//
//
// Given a vector <string> matrix, return its diagonal disproportion.  The j'th character of the i'th element of matrix should be treated as the element in the i'th row and j'th column of the matrix.
//
//
//
// DEFINITION
// Class:DiagonalDisproportion
// Method:getDisproportion
// Parameters:vector <string>
// Returns:int
// Method signature:int getDisproportion(vector <string> matrix)
//
//
// CONSTRAINTS
// -matrix will contain between 1 and 50 elements, inclusive.
// -Each element of matrix will contain only digits ('0'-'9').
// -The number of characters in each element of matrix will be equal to the number of elements in matrix.
//
//
// EXAMPLES
//
// 0)
// {"190","828","373"}
//
// Returns: 1
//
// The sum of the elements of the main diagonal is 1+2+3 = 6.
// The sum of the elements of the collateral diagonal is 0+2+3 = 5.
// So, the answer is 6-5 = 1.
//
//
// 1)
// {"9000","0120","0000","9000"}
//
// Returns: -1
//
// 2)
// {"6"}
//
// Returns: 0
//
// The matrix has only one element, and this element lies on both the main and collateral diagonals.
//
//
// 3)
// {"7748297018","8395414567","7006199788","5446757413","2972498628",
// "0508396790","9986085827","2386063041","5687189519","7729785238"}
//
// Returns: -24
//
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
