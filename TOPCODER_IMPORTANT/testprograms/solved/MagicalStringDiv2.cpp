#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cctype>
#include <fstream>

#define sz 100
#define pb(a) push_back(a)
#define pp pop_back()
#define ll long long
#define fread freopen("input.txt","r",stdin)
#define fwrite freopen("output.txt","w",stdout)
#define inf (1<<30-1)
#define clr(abc,z) memset(abc,z,sizeof(abc))
#define PI acos(-1)

using namespace std;

class MagicalStringDiv2 {
public:
	int minimalMoves(string S) {
		int len = S.size(), k, cnt=0, i;
		k = (len>>1);
		for (i = 0; i<k; i++)
		    if(S[i]!='>') cnt++;

        for (; i<len; i++)
		    if(S[i]!='<') cnt++;

		return cnt;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	MagicalStringDiv2 *obj;
	int answer;
	obj = new MagicalStringDiv2();
	clock_t startTime = clock();
	answer = obj->minimalMoves(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	int p1;

	{
	// ----- test 0 -----
	p0 = ">><<><";
	p1 = 2;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = ">>>><<<<";
	p1 = 0;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = "<<>>";
	p1 = 4;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = "<><<<>>>>><<>>>>><>><<<>><><><><<><<<<<><<>>><><><";
	p1 = 20;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Magical Girl Illy uses "magical strings" to cast spells.
// For her, a string X is magical if and only if there exists a positive integer k such that X is composed of k consecutive '>' characters followed by k consecutive '<' characters.
//
// Once Illy picked up a string S.
// The length of S was even, and each character of S was either '<' or '>'.
// Illy wants to change S into a magical string.
// In each step, she can change a single '>' to a '<' or vice versa.
// Compute and return the smallest number of steps in which she can change S into a magical string.
//
// DEFINITION
// Class:MagicalStringDiv2
// Method:minimalMoves
// Parameters:string
// Returns:int
// Method signature:int minimalMoves(string S)
//
//
// CONSTRAINTS
// -S will contain between 2 and 50 characters, inclusive.
// -S will contain even number of characters.
// -Each character of S will be '<' or '>'.
//
//
// EXAMPLES
//
// 0)
// ">><<><"
//
// Returns: 2
//
// She needs to change character 2 (0-based index) from '<' to '>', and character 4 from '>' to '<'.
//
// 1)
// ">>>><<<<"
//
// Returns: 0
//
// S is already a magical string, so no changes are needed.
//
// 2)
// "<<>>"
//
// Returns: 4
//
//
//
// 3)
// "<><<<>>>>><<>>>>><>><<<>><><><><<><<<<<><<>>><><><"
//
// Returns: 20
//
//
//
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
