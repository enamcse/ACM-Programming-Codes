#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cctype>
#include <fstream>

#define sz 100
#define pb(a) push_back(a)
#define pp pop_back()
#define ll long long
#define fread freopen("input.txt","r",stdin)
#define fwrite freopen("output.txt","w",stdout)
#define inf (1<<30-1)
#define clr(abc,z) memset(abc,z,sizeof(abc))
#define PI acos(-1)

using namespace std;

class TaroString
{
public:
    string getAnswer(string S)
    {
        int letter[26];
        for (int i =0; i<26; i++)
            letter[i]=0;
        int C,A,T, num;
        C = A = T = -1;
        int len = S.size();
        for(int i = 0; i<len; i++)
        {
            num = S[i] - 'A';
            letter[num]++;

            if(S[i]=='C'&&C==-1)
            {
                C = i;
            }
            else
            {
                if(S[i]=='A'&&A==-1)
                {
                    A = i;
                }
                else
                {
                    if(S[i]=='T'&&T==-1)
                    {
                        T = i;
                    }
                }
            }
        }

        if(letter[2]==1&&letter[0]==1&&letter[19]==1)
        {
            if(T>A&&A>C) return "Possible";
        }

        return "Impossible";

    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1)
{
    cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
    cout << "]" << endl;
    TaroString *obj;
    string answer;
    obj = new TaroString();
    clock_t startTime = clock();
    answer = obj->getAnswer(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << "\"" << p1 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "\"" << answer << "\"" << endl;
    if (hasAnswer)
    {
        res = answer == p1;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    string p0;
    string p1;

    {
        // ----- test 0 -----
        p0 = "XCYAZTX";
        p1 = "Possible";
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = "CTA";
        p1 = "Impossible";
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = "ACBBAT";
        p1 = "Impossible";
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = "SGHDJHFIOPUFUHCHIOJBHAUINUIT";
        p1 = "Possible";
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = "CCCATT";
        p1 = "Impossible";
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// PROBLEM STATEMENT
//
// Cat Taro has a string S.
// He wants to obtain the string "CAT" from the string S.
// In a single turn he can choose any character and erase all occurrences of this character in S.
// He can do as many turns as he wants (possibly zero).
//
//
//
//
// You are given the string S.
// Return "Possible" (quotes for clarity) if it is possible to obtain the string "CAT" and "Impossible" otherwise.
//
//
//
// DEFINITION
// Class:TaroString
// Method:getAnswer
// Parameters:string
// Returns:string
// Method signature:string getAnswer(string S)
//
//
// CONSTRAINTS
// -S will contain between 1 and 50 characters, inclusive.
// -S will contain only uppercase English letters ('A'-'Z').
//
//
// EXAMPLES
//
// 0)
// "XCYAZTX"
//
// Returns: "Possible"
//
// It is possible to obtain string "CAT" in three turns, as follows:
//
//
// Erase all characters 'X' (and obtain the string "CYAZT")
//
//
// Erase all characters 'Y' (and obtain the string "CAZT")
//
//
// Erase all characters 'Z' (and obtain the string "CAT")
//
//
//
// 1)
// "CTA"
//
// Returns: "Impossible"
//
//
//
// 2)
// "ACBBAT"
//
// Returns: "Impossible"
//
// Note that whenever you are erasing a character, you must erase all its occurrences. In this case, it is not possible to erase the first 'A' and keep the second one.
//
// 3)
// "SGHDJHFIOPUFUHCHIOJBHAUINUIT"
//
// Returns: "Possible"
//
//
//
// 4)
// "CCCATT"
//
// Returns: "Impossible"
//
//
//
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
