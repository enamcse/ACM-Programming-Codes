#include <bits/stdc++.h>


using namespace std;

double dp[51][26][18];

class RandomGraph {
public:
    double P, Q;

    double rec(int r, int a, int b, int c)
    {
        if(r==0) return 1.0;
        double &ret = dp[a][b][c];
        if(ret!=-1.0) return ret;
        ret = 0.0;
        int x, y;
        x=a+2*b+3*c;
        y = ((a*(a-1))>>1);
        ret+=(pow(Q,x)*rec(r-1,a+1,b,c));   ///new point is isolated
        if(a>0)ret+=(pow(Q,x-1)*(double)a*P*rec(r-1,a-1,b+1,c));   ///new point will be connected with 1-component vertex
        if(a>1)ret+=(pow(Q,x-2)*(double)y*P*P*rec(r-1,a-2,b,c+1));   ///new point will be connected with two 1-component vertex
        if(b>0)ret+=(pow(Q,x-1)*2.0*(double)b*P*rec(r-1,a,b-1,c+1));   ///new point will be connected with 2-component vertex by one edge
        if(b>0)ret+=(pow(Q,x-2)*(double)b*P*P*rec(r-1,a,b-1,c+1));   ///new point will be connected with 2-component vertex by two edge
        return ret;
    }

	double probability(int n, int p) {
		for (int i = 0; i<51; i++)
		    for (int j = 0; j<26; j++)
		        for (int k =  0; k<18; k++)
		            dp[i][j][k]=-1.0;

		P = p/1000.0;
		Q = 1.0-P;
		cout<<P<<":"<<Q<<endl;
		return (1.0-rec(n,0,0,0));
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, double p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	RandomGraph *obj;
	double answer;
	obj = new RandomGraph();
	clock_t startTime = clock();
	answer = obj->probability(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	double p2;

	{
	// ----- test 0 -----
	p0 = 7;
	p1 = 0;
	p2 = 0.0;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 3;
	p1 = 620;
	p2 = 0.0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 4;
	p1 = 500;
	p2 = 0.59375;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 8;
	p1 = 100;
	p2 = 0.33566851611343496;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = 15;
	p1 = 50;
	p2 = 0.5686761670525845;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	p0 = 50;
	p1 = 10;
	p2 = 0.7494276522159893;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 6 -----
	p0 = 50;
	p1 = 1000;
	p2 = 1.0;
	all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Consider a random undirected graph on n vertices.
// The vertices are numbered 0 through n-1.
// For each i and j such that 0 <= i < j <= n-1, the graph contains the edge i-j with probability p/1000.
// The probabilities that different edges are present in the graph are all mutually independent.
//
//
//
// You are given the ints n and p.
// Calculate and return the probability that the random graph generated using the above procedure contains at least one connected component with 4 or more vertices.
//
// DEFINITION
// Class:RandomGraph
// Method:probability
// Parameters:int, int
// Returns:double
// Method signature:double probability(int n, int p)
//
//
// NOTES
// -Your return value must have an absolute or relative error less than 1e-9.
// -A connected component is a maximal set S of vertices such that you can get from any vertex in S to any other vertex in S by following a sequence of edges. For example, if a graph with n=5 contains edges 0-2, 2-4, and 1-3, its connected components are {0,2,4} and {1,3}.
//
//
// CONSTRAINTS
// -n will be between 2 and 50, inclusive.
// -p will be between 0 and 1000, inclusive.
//
//
// EXAMPLES
//
// 0)
// 7
// 0
//
// Returns: 0.0
//
// The probability of each edge is 0. Therefore, this graph will always have 7 isolated vertices = 7 connected components, each with just a single vertex.
//
// 1)
// 3
// 620
//
// Returns: 0.0
//
// This graph only has 3 vertices, so it is impossible to have a connected component with at least 4 vertices.
//
// 2)
// 4
// 500
//
// Returns: 0.59375
//
// There are 64 different graphs on 4 labeled vertices.
// As p=500, each of these 64 graphs is equally likely to be generated by our procedure.
// A graph on 4 vertices has a connected component with 4 or more vertices if and only if the entire graph is connected.
// Out of our 64 possible graphs, 38 are connected.
// Therefore, the probability we are looking for is 38/64.
//
// 3)
// 8
// 100
//
// Returns: 0.33566851611343496
//
// In this case, some of the good graphs have two connected components, each with 4 vertices.
//
// 4)
// 15
// 50
//
// Returns: 0.5686761670525845
//
//
//
// 5)
// 50
// 10
//
// Returns: 0.7494276522159893
//
//
//
// 6)
// 50
// 1000
//
// Returns: 1.0
//
//
//
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
