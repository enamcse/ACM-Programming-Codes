#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cctype>
#include <fstream>

#define sz 100
#define pb(a) push_back(a)
#define pp pop_back()
#define ll long long
#define fread freopen("input.txt","r",stdin)
#define fwrite freopen("output.txt","w",stdout)
#define inf (1<<30-1)
#define clr(abc,z) memset(abc,z,sizeof(abc))
#define PI acos(-1)

using namespace std;

class PackingBallsDiv2 {
public:
	int minPacks(int R, int G, int B) {
		int a[3], res=0;

		a[0] = R%3;
		a[1] = G%3;
		a[2] = B%3;
		sort(a,a+3);
        reverse(a,a+3);
        int mn =inf;
        for (int i =0; i<3; i++)
            mn = min(mn,a[i]+i);
		res+= (R/3)+(B/3)+(G/3) + mn;
		return res;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	PackingBallsDiv2 *obj;
	int answer;
	obj = new PackingBallsDiv2();
	clock_t startTime = clock();
	answer = obj->minPacks(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	int p2;
	int p3;

	{
	// ----- test 0 -----
	p0 = 4;
	p1 = 2;
	p2 = 4;
	p3 = 4;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 1;
	p1 = 7;
	p2 = 1;
	p3 = 3;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 2;
	p1 = 3;
	p2 = 5;
	p3 = 4;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 78;
	p1 = 53;
	p2 = 64;
	p3 = 66;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = 100;
	p1 = 100;
	p2 = 100;
	p3 = 100;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// We have R red, G green, and B blue balls.
// We want to divide them into as few packages as possible.
// Each package must contain 1, 2, or 3 balls.
// Additionally, each package must be either a "normal set" (all balls in the package have the same color), or a "variety set" (no two balls have the same color).
// Compute and return the smallest possible number of packages.
//
// DEFINITION
// Class:PackingBallsDiv2
// Method:minPacks
// Parameters:int, int, int
// Returns:int
// Method signature:int minPacks(int R, int G, int B)
//
//
// CONSTRAINTS
// -R, G, and B will each be between 1 and 100, inclusive.
//
//
// EXAMPLES
//
// 0)
// 4
// 2
// 4
//
// Returns: 4
//
// We have 4 red, 2 green, and 4 blue balls.
// Clearly, we need at least four packages to store 10 balls.
// One possibility of using exactly four packages looks as follows: RGB, RG, RR, BBB.
// (I.e., the first package has 1 ball of each color, the second package has a red and a green ball, and so on.)
//
// 1)
// 1
// 7
// 1
//
// Returns: 3
//
// Here the only possible solution is to have one package with RGB and two packages with GGG each.
//
// 2)
// 2
// 3
// 5
//
// Returns: 4
//
//
//
// 3)
// 78
// 53
// 64
//
// Returns: 66
//
//
//
// 4)
// 100
// 100
// 100
//
// Returns: 100
//
//
//
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
