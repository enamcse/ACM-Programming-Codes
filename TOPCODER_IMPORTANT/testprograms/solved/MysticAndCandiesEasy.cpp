#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cctype>
#include <fstream>

#define sz 100
#define pb(a) push_back(a)
#define pp pop_back()
#define ll long long
#define fread freopen("input.txt","r",stdin)
#define fwrite freopen("output.txt","w",stdout)
#define inf (1<<30-1)
#define clr(abc,z) memset(abc,z,sizeof(abc))
#define PI acos(-1)

using namespace std;

class MysticAndCandiesEasy {
public:
	int minBoxes(int C, int X, vector <int> high) {
		sort(high.begin(), high.end());

		int c = C, i = 0, len = high.size();

		while(c>X)
        {
            len--;
            c-=high[i];
            i++;
        }
        if(c==X) return len;
        else return len +1;


	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <int> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	MysticAndCandiesEasy *obj;
	int answer;
	obj = new MysticAndCandiesEasy();
	clock_t startTime = clock();
	answer = obj->minBoxes(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	vector <int> p2;
	int p3;

	{
	// ----- test 0 -----
	p0 = 10;
	p1 = 10;
	int t2[] = {20};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 10;
	p1 = 7;
	int t2[] = {3,3,3,3,3};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 4;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 100;
	p1 = 63;
	int t2[] = {12,34,23,45,34};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 3;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 19;
	p1 = 12;
	int t2[] = {12,9,15,1,6,4,9,10,10,10,14,14,1,1,12,10,9,2,3,6,1,7,3,4,10,3,14};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 22;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = 326;
	p1 = 109;
	int t2[] = {9,13,6,6,6,16,16,16,10,16,4,3,10,8,11,17,12,5,7,8,7,4,15,7,14,2,2,1,17,1,7,7,12,17,2,9,7,1,8,16,7,4,16,2,13,3,13,1,17,6};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 15;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// TopCoder admin mystic_tc is sitting in front of a table. He found N sealed boxes of candies on the table.
//
//
// He is not sure how many candies each box contains. However, he knows the following information:
//
// The total number of candies in the boxes is C.
// For each i, box i (0-based index) contains between 0 and high[i] candies, inclusive.
//
//
// You know that mystic_tc eats candies as follows: first he chooses a subset of the boxes, then he opens them and eats all the candies he found inside.
// He wants to eat at least X candies.
// And as he is smart, he will always choose a subset of boxes for which he is sure that they must contain at least X candies.
//
//
// You are given the ints C and X, and the vector <int> high.
// Return the smallest number of boxes mystic_tc may choose.
//
// DEFINITION
// Class:MysticAndCandiesEasy
// Method:minBoxes
// Parameters:int, int, vector <int>
// Returns:int
// Method signature:int minBoxes(int C, int X, vector <int> high)
//
//
// CONSTRAINTS
// -high will contain between 1 and 50 elements, inclusive.
// -Each element of high will be between 1 and 50, inclusive.
// -C will be between 1 and the sum of all elements of high, inclusive.
// -X will be between 1 and C, inclusive.
//
//
// EXAMPLES
//
// 0)
// 10
// 10
// {20}
//
// Returns: 1
//
// There is only one box. It contains all 10 candies. In order to eat 10 candies mystic_tc must open it.
//
// 1)
// 10
// 7
// {3, 3, 3, 3, 3}
//
// Returns: 4
//
// Now there are many possibilities for the contents of boxes.
// For example, there could be three boxes with 3 candies each, one box with 1 candy, and one empty box.
// Another possibility is that there could be five boxes with 2 candies each.
// Note that in this case mystic_tc could open three boxes and still get only 6 candies, so he needs to open at least four boxes to be sure he gets at least 7 candies.
// And it can be proved that if mystic_tc opens any four of these boxes, they will always contain at least 7 candies in total.
//
// 2)
// 100
// 63
// {12, 34, 23, 45, 34}
//
// Returns: 3
//
// Open boxes 1, 3, 4 (0-based). It can be proved that these boxes contain at least 65 candies in total.
//
// 3)
// 19
// 12
// {12, 9, 15, 1, 6, 4, 9, 10, 10, 10, 14, 14, 1, 1, 12, 10, 9, 2, 3, 6, 1, 7, 3, 4, 10, 3, 14}
//
// Returns: 22
//
//
//
// 4)
// 326
// 109
// {9, 13, 6, 6, 6, 16, 16, 16, 10, 16, 4, 3, 10, 8, 11, 17, 12, 5, 7, 8, 7, 4, 15, 7, 14, 2, 2, 1, 17, 1, 7, 7, 12, 17, 2, 9, 7, 1, 8, 16, 7, 4, 16, 2, 13, 3, 13, 1, 17, 6}
//
// Returns: 15
//
//
//
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
