#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cctype>
#include <fstream>

#define sz 100
#define pb(a) push_back(a)
#define pp pop_back()
#define ll long long
#define fread freopen("input.txt","r",stdin)
#define fwrite freopen("output.txt","w",stdout)
#define inf (1<<30-1)
#define clr(abc,z) memset(abc,z,sizeof(abc))
#define PI acos(-1)

using namespace std;

class MayTheBestPetWin {
public:
	int calc(vector <int> A, vector <int> B) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	MayTheBestPetWin *obj;
	int answer;
	obj = new MayTheBestPetWin();
	clock_t startTime = clock();
	answer = obj->calc(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {3,4,4,7};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {3,4,4,7};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1,3,5,4,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,5,6,8,7};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 5;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {2907,949,1674,6092,8608,5186,2630,970,1050,2415,1923,2697,5571,6941,8065,4710,716,756,5185,1341,993,5092,248,1895,4223,1783,3844,3531,2431,1755,2837,4015};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {7296,6954,4407,9724,8645,8065,9323,8433,1352,9618,6487,7309,9297,8999,9960,5653,4721,7623,6017,7320,3513,6642,6359,3145,7233,5077,6457,3605,2911,4679,5381,6574};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 52873;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// The pony Rainbow Dash wants to choose her pet.
// There are N animals who want to be her pet.
// Rainbow Dash numbered them 0 through N-1.
// 
// To help her make the decision, Rainbow Dash decided to organize a relay race for the animals.
// The race track is already known, and for each animal we know how fast it is.
// More precisely, you are given vector <int>s A and B with the following meaning:
// For each i, the animal number i will take between A[i] and B[i] seconds (inclusive) to complete the track.
// 
// For the race the animals will be divided into two competing teams.
// This is a relay race, so the team members of each team will all run the same track, one after another --
// when the first team member finishes, the second one may start, and so on.
// Thus the total time in which a team completes the race is the sum of the times of all team members.
// Note that we can use the estimates given by A and B to estimate the total time for any team of animals.
// 
// Given two teams S and T, the value maxdiff(S,T) is defined as the largest possible difference in seconds
// between the time in which team S finishes the course and the time in which team T finishes the course.
// 
// Rainbow Dash now needs to assign each of the animals to one of the two competing teams.
// She wants to see a close competition, so she wants the teams to finish as close to each other as possible.
// Formally, she wants to divide all animals into teams S and T in a way that minimizes maxdiff(S,T).
// Return the smallest possible value of maxdiff(S,T).
// 
// DEFINITION
// Class:MayTheBestPetWin
// Method:calc
// Parameters:vector <int>, vector <int>
// Returns:int
// Method signature:int calc(vector <int> A, vector <int> B)
// 
// 
// NOTES
// -The teams are not required to contain the same number of animals.
// 
// 
// CONSTRAINTS
// -A will contain between 2 and 50 elements, inclusive.
// -A and B will contain the same number of elements.
// -Each element of A will be between 1 and 10,000, inclusive.
// -Each element of B will be between 1 and 10,000, inclusive.
// -For each i, B[i] will be greater than or equal to A[i].
// 
// 
// EXAMPLES
// 
// 0)
// {3,4,4,7}
// {3,4,4,7}
// 
// Returns: 2
// 
// In this test case we know the exact time in which each of the animals completes the track.
// An optimal solution is to choose teams S={0,3} and T={1,2}.
// Then team S will certainly complete the track in 3+7 = 10 seconds, and team T in 4+4 = 8 seconds.
// Thus, maxdiff(S,T)=2.
// 
// 1)
// {1,3,5,4,5}
// {2,5,6,8,7}
// 
// Returns: 5
// 
// Here one of the optimal solutions is S={2,3} and T={0,1,4}.
// For these two teams we have maxdiff(S,T)=5.
// For example, it is possible that S will complete the track in 6+8 = 14 seconds, and T will complete it in 1+3+5 = 9 seconds.
// It is also possible that S will complete the track up to 5 seconds before T does.
// 
// 2)
// {2907,949,1674,6092,8608,5186,2630,970,1050,2415,1923,2697,5571,6941,8065,4710,716,756,5185,1341,993,5092,248,1895,4223,1783,3844,3531,2431,1755,2837,4015}
// {7296,6954,4407,9724,8645,8065,9323,8433,1352,9618,6487,7309,9297,8999,9960,5653,4721,7623,6017,7320,3513,6642,6359,3145,7233,5077,6457,3605,2911,4679,5381,6574}
// 
// Returns: 52873
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
