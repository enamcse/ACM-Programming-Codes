#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cctype>
#include <fstream>

#define sz 100
#define pb(a) push_back(a)
#define pp pop_back()
#define ll long long
#define fread freopen("input.txt","r",stdin)
#define fwrite freopen("output.txt","w",stdout)
#define inf (1<<30-1)
#define clr(abc,z) memset(abc,z,sizeof(abc))
#define PI acos(-1)

using namespace std;

class WolfDelaymaster
{
public:
    string check(string str)
    {
        string val = "VALID", inval = "INVALID";
        int w=0,o=0,l=0,f=0, len, flag = 1;
        len = (int)str.size();
        if(len%4) return inval;
        for (int i =0; i<len; i++)
        {
            if(str[i]=='w')
            {
                if(flag==1) w++;
                else if(flag==4)
                {
                    if(w==o&&o==l&&l==f)
                    {
                        w++;
                        flag = 1;
                    }
                    else return inval;
                }
                else return inval;
            }
            else if(str[i]=='o')
            {
                if(flag == 1)
                {
                    o++;
                    flag = 2;
                }
                else if (flag == 2)
                {
                    o++;
                    if(o>w) return inval;
                }
                else return inval;
            }
            else if(str[i]=='l')
            {
                if(flag == 2)
                {
                    l++;
                    flag = 3;
                }
                else if (flag == 3)
                {
                    l++;
                    if(l>o) return inval;
                }
                else return inval;
            }
            else
            {
                if(flag == 3)
                {
                    f++;
                    flag = 4;
                }
                else if (flag ==4)
                {
                    f++;
                    if(f==w) flag = 1;
                    if(f>l) return inval;
                }
                else return inval;
            }
        }
        if(w==o&&o==l&&l==f) return val;
        else return inval;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1)
{
    cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
    cout << "]" << endl;
    WolfDelaymaster *obj;
    string answer;
    obj = new WolfDelaymaster();
    clock_t startTime = clock();
    answer = obj->check(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << "\"" << p1 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "\"" << answer << "\"" << endl;
    if (hasAnswer)
    {
        res = answer == p1;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    string p0;
    string p1;

    {
        // ----- test 0 -----
        p0 = "wolf";
        p1 = "VALID";
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = "wwww";
        p1 = "INVALID";
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = "wolfwwoollffwwwooolllfffwwwwoooollllffff";
        p1 = "VALID";
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = "flowolf";
        p1 = "INVALID";
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// PROBLEM STATEMENT
// Wolf Sothe is playing the game Delaymaster.
// In this game, he can create new words according to the following rules:
//
// For each positive integer n, the string which consists of n copies of 'w', then n copies of 'o', then n copies of 'l', and finally n copies of 'f' is a valid word.
// The concatenation of two valid words is a valid word.
// Only the words that can be obtained by rules 1 and 2 are valid. There are no other valid words.
//
//
// Thus, for example:
//
// By rule 1, "wolf", "wwoollff", and "wwwooolllfff" are valid words.
// Then, by rule 2, "wolfwwoollff" is a valid word.
// By applying rule 2 twice, "wolfwwoollffwolf" is a valid word.
// The string "wfol" is not a valid word (order matters).
// The string "wwolfolf" is not a valid word (we can only concatenate, not insert one word into another).
// The string "wwwoolllfff" is not a valid word (only two 'o's instead of three).
//
//
// You are given a string str.
// Return "VALID" if str is a valid word and "INVALID" otherwise.
// Note that the return value is case-sensitive: you must return the strings "VALID" and "INVALID" in all-uppercase.
//
// DEFINITION
// Class:WolfDelaymaster
// Method:check
// Parameters:string
// Returns:string
// Method signature:string check(string str)
//
//
// CONSTRAINTS
// -str will contain between 1 and 50 characters, inclusive.
// -Each character in str will be 'w', 'o', 'l' or 'f'.
//
//
// EXAMPLES
//
// 0)
// "wolf"
//
// Returns: "VALID"
//
// The first valid word from the examples in the problem statement.
//
// 1)
// "wwolfolf"
//
// Returns: "INVALID"
//
// The second invalid word from the examples in the problem statement.
//
// 2)
// "wolfwwoollffwwwooolllfffwwwwoooollllffff"
//
// Returns: "VALID"
//
//
//
// 3)
// "flowolf"
//
// Returns: "INVALID"
//
//
//
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
