#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cctype>
#include <fstream>

#define sz 100
#define pb(a) push_back(a)
#define pp pop_back()
#define ll long long
#define fread freopen("input.txt","r",stdin)
#define fwrite freopen("output.txt","w",stdout)
#define inf (1<<30-1)
#define clr(abc,z) memset(abc,z,sizeof(abc))
#define PI acos(-1)

using namespace std;

class TaroFriends {
public:
	int getNumber(vector <int> coordinates, int X) {

	    set<int>s(coordinates.begin(), coordinates.end());
        vector<int>v(s.begin(),s.end());
	    int cat = v.size();
		if(cat==1) return 0;
		if(X==0)
        {
            return (v[cat-1]-v[0]);
        }
        int dist,a,b,c;
        int from[2][sz];
        clr(from,0);
        from[0][0]=from[1][0] = 0;
        for (int i = 1; i<cat; i++)
        {
            dist =v[i] - v[0];
            a=dist/X;

            if(a%2)
            {
                from[0][i] = (dist+X*2)%X;
                from[1][i] = dist%X;
            }
            else
            {
                from[0][i] = dist%X;
                from[1][i] = (dist+2*X)%X;
            }
        }

        int mn1 = 0, mn2 = 0;
        for (int i = 0; i<cat; i++)
            mn1 = max(mn1,from[0][i]);

        for (int i = 0; i<cat; i++)
            mn2 = max(mn2,from[1][i]);
        return min(mn1,mn2);
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	TaroFriends *obj;
	int answer;
	obj = new TaroFriends();
	clock_t startTime = clock();
	answer = obj->getNumber(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	int p1;
	int p2;

	{
	// ----- test 0 -----
	int t0[] = {-3,0,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {4,7,-7};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	p2 = 4;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {-100000000,100000000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 100000000;
	p2 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {3,7,4,6,-10,7,10,9,-5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 7;
	p2 = 7;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	int t0[] = {-4,0,4,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	p2 = 4;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	int t0[] = {7};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 0;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// Cat Taro likes to play with his cat friends.
// Each of his friends currently sits on some coordinate on a straight line that goes from the left to the right.
// When Taro gives a signal, each of his friends must move exactly X units to the left or to the right.
//
//
//
//
// You are given an vector <int> coordinates and the int X.
// For each i, the element coordinates[i] represents the coordinate of the i-th cat before the movement.
// Return the smallest possible difference between the positions of the leftmost cat and the rightmost cat after the movement.
//
//
// DEFINITION
// Class:TaroFriends
// Method:getNumber
// Parameters:vector <int>, int
// Returns:int
// Method signature:int getNumber(vector <int> coordinates, int X)
//
//
// CONSTRAINTS
// -coordinates will contain between 1 and 50 elements, inclusive.
// -Each element of coordinates will be between -100,000,000 and 100,000,000, inclusive.
// -X will be between 0 and 100,000,000, inclusive.
//
//
// EXAMPLES
//
// 0)
// {-3, 0, 1}
// 3
//
// Returns: 3
//
// The difference 3 is obtained if the cats move from {-3,0,1} to {0,-3,-2}.
//
//
//
//
// 1)
// {4, 7, -7}
// 5
//
// Returns: 4
//
// The difference 4 is obtained if the cats move from {4,7,-7} to {-1,2,-2}.
//
//
//
//
// 2)
// {-100000000, 100000000}
// 100000000
//
// Returns: 0
//
//
//
// 3)
// {3, 7, 4, 6, -10, 7, 10, 9, -5}
// 7
//
// Returns: 7
//
//
//
// 4)
// {-4, 0, 4, 0}
// 4
//
// Returns: 4
//
//
//
// 5)
// {7}
// 0
//
// Returns: 0
//
//
//
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
