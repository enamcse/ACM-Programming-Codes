//#include <bits/stdc++.h>
//#define _ ios_base::sync_with_stdio(0);cin.tie(0);
#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

#define all(a,b,c)      for(int I=0;I<b;I++)    a[I] = c
#define BE(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define EQ(a,b)         (fabs(a-b)<ERR)
#define ERR             1e-5
#define FORE(i,a)       for(typeof((a).begin())i=(a).begin();i!=(a).end();i++)
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define fread           freopen("input.txt","r",stdin)
#define fri(a,b)        for(int i=a;i<=b;i++)
#define frj(a,b)        for(int j=a;j<=b;j++)
#define frk(a,b)        for(int k=a;k<=b;k++)
#define frl(a,b)        for(int l=a;l<=b;l++)
#define frin(a,b)       for(int i=a;i>=b;i--)
#define frjn(a,b)       for(int j=a;j>=b;j--)
#define frkn(a,b)       for(int k=a;k>=b;k--)
#define frln(a,b)       for(int l=a;l>=b;l--)
#define frn(i,a,b)      for(i=a;i>=b;i--)
#define fwrite          freopen("output.txt","w",stdout)
#define inf             (1e9)
#define inpow(a,x,y)    int i; a=x;fri(2,y)  a*=x
#define makeint(n,s)    istringstream(s)>>n
#define mod             1000000007
#define ISS             istringstream
#define ll              long long
#define oo              (1<<30)
#define OSS             ostringstream
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define PRE             1e-8
#define print1(a)       cout<<a<<endl
#define print2(a,b)     cout<<a<<" "<<b<<endl
#define print3(a,b,c)   cout<<a<<" "<<b<<" "<<c<<endl
#define rev(a)          reverse(BE(a));
#define round(i,a)      i = ( a < 0 ) ? a - 0.5 : a + 0.5;
#define SI              set<int>
#define SII             set<int>::iterator
#define SIZE(s)         ((int)s.size())
#define saja(a)        sort(BE(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define SZ1             55
#define typing(j,b)     typeof((b).begin()) j=(b).begin();
#define VD              vector<double>
#define VI              vector<int>
#define VLL             vector<long long>
#define VS              vector<string>

using namespace std;


class EllysScrabble {
public:
    struct pos{
        char c;
        int s, e;
    };

    bool comp(pos a, pos b)
    {
        return a.c<b.c;
    }

	string getMin(string letters, int maxDistance) {
	    char x[100],y[100],k;
	    int bos[100], n,m;
	    clr(bos,-1);
	    pos p[100];
	    int len = letters.size();
	    for (int i = 0; i<len; i++)
        {
            y[i] = x[i] = letters[i];
            p[i].s = (i - maxDistance>0?i -maxDistance:0);
            p[i].e = (i + maxDistance>=len?len-1:i + maxDistance);
        }
        y[len] = x[len] = '\0';
		sort(y,y+len);
		sort(p,p+len,comp);
		for (int i = 0; i<len; i++)
        {
            k = x[i];
            n=m=-1;
            for (int j = i-1; j>=0; j--)
                if(x[i]==);
        }

		return letters;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, int p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1;
	cout << "]" << endl;
	EllysScrabble *obj;
	string answer;
	obj = new EllysScrabble();
	clock_t startTime = clock();
	answer = obj->getMin(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	int p1;
	string p2;

	{
	// ----- test 0 -----
	p0 = "TOPCODER";
	p1 = 3;
	p2 = "CODTEPOR";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = "ESPRIT";
	p1 = 3;
	p2 = "EIPRST";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = "BAZINGA";
	p1 = 8;
	p2 = "AABGINZ";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	p1 = 9;
	p2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = "GOODLUCKANDHAVEFUN";
	p1 = 7;
	p2 = "CADDGAHEOOFLUKNNUV";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	p0 = "AAAWDIUAOIWDESBEAIWODJAWDBPOAWDUISAWDOOPAWD";
	p1 = 6;
	p2 = "AAAADDEIBWAEUIODWADSBIAJWODIAWDOPOAWDUOSPWW";
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 6 -----
	p0 = "ABRACADABRA";
	p1 = 2;
	p2 = "AABARACBDAR";
	all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Elly is playing Scrabble with her family. The exact rules of the game are not important for this problem. You only need to know that Elly has a holder that contains a row of N tiles, and that there is a single letter on each of those tiles. (Tiles are small square pieces of wood. A holder is a tiny wooden shelf with room for precisely N tiles placed in a row.)
//
// While Elly waits for the other players, she entertains herself in the following way. She slightly taps the table, causing the tiles on her holder jump a little and some of them switch places.
// Formally, suppose that Elly has N tiles. There are N positions on the holder, we will label them 0 through N-1 from left to right.
// When Elly taps the table, the tiles on her holder will form some permutation of their original order.
// You are given an int maxDistance with the following meaning: in the permutation that Elly produces by tapping the table, no tile will be more than maxDistance positions away from its original position (in either direction).
//
// For example, suppose that before a tap the letters in Elly's holder formed the string "TOPCODER" when read from left to right.
// If maxDistance is 3, one possible string after Elly taps the table is "CODTEPOR".
// This can happen in the following way:
//
// The letter 'T' at position 0 moves three positions to the right (to position 3).
// The letter 'O' at position 1 remains on its initial position (position 1).
// The letter 'P' at position 2 moves three positions to the right (to position 5).
// The letter 'C' at position 3 moves three positions to the left (to position 0).
// The letter 'O' at position 4 moves two positions to the right (to position 6).
// The letter 'D' at position 5 moves three positions to the left (to position 2).
// The letter 'E' at position 6 moves two positions to the left (to position 4).
// The letter 'R' at position 7 remains on its initial position (position 7).
//
// Note that the letter 'D' (at position 5) cannot move to position 1, because this would require it to move more than the maximal distance 3.
//
// It turns out that the string "CODTEPOR" is the lexicographically smallest one Elly can get from "TOPCODER" with a single tap and maxDistance = 3. Now you want to write a program that, given the string letters and the int maxDistance, returns the lexicographically smallest string the girl can get after a single tap.
//
// DEFINITION
// Class:EllysScrabble
// Method:getMin
// Parameters:string, int
// Returns:string
// Method signature:string getMin(string letters, int maxDistance)
//
//
// NOTES
// -Given two different strings A and B of equal length, the lexicographically smaller one is the one that contains a smaller character at the first position where they differ.
//
//
// CONSTRAINTS
// -letters will contain between 1 and 50 characters, inclusive.
// -letters will contain only uppercase letters from the English alphabet ('A'-'Z').
// -maxDistance will be between 1 and 9, inclusive.
//
//
// EXAMPLES
//
// 0)
// "TOPCODER"
// 3
//
// Returns: "CODTEPOR"
//
// The example from the problem statement.
//
// 1)
// "ESPRIT"
// 3
//
// Returns: "EIPRST"
//
// In this example the letters 'E', 'P', 'R', and 'T' stay on their initial places, and the letters 'S' and 'I' swap. Since the distance between them is exactly 3 (which also happens to be the maximal distance they can move), this is a valid final configuration.
//
// 2)
// "BAZINGA"
// 8
//
// Returns: "AABGINZ"
//
// Note that the maximal distance may be greater than the number of letters Elly has. In such cases, the lexicographically smallest result is, obviously, the sorted sequence of letters.
//
// 3)
// "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
// 9
//
// Returns: "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
//
// As the input letters are already sorted, we can assume they'll just fall back to their initial places.
//
// 4)
// "GOODLUCKANDHAVEFUN"
// 7
//
// Returns: "CADDGAHEOOFLUKNNUV"
//
//
//
// 5)
// "AAAWDIUAOIWDESBEAIWODJAWDBPOAWDUISAWDOOPAWD"
// 6
//
// Returns: "AAAADDEIBWAEUIODWADSBIAJWODIAWDOPOAWDUOSPWW"
//
//
//
// 6)
// "ABRACADABRA"
// 2
//
// Returns: "AABARACBDAR"
//
//
// The letter 'A' at position 0 remains on its initial place (position 0).
// The letter 'B' at position 1 moves one position to the right (to position 2).
// The letter 'R' at position 2 moves two positions to the right (to position 4).
// The letter 'A' at position 3 moves two positions to the left (to position 1).
// The letter 'C' at position 4 moves two positions to the right (to position 6).
// The letter 'A' at position 5 moves two positions to the left (to position 3).
// The letter 'D' at position 6 moves two positions to the right (to position 8).
// The letter 'A' at position 7 moves two positions to the left (to position 5).
// The letter 'B' at position 8 moves one position to the left (to position 7).
// The letter 'R' at position 9 moves one position to the right (to position 10).
// The letter 'A' at position 10 moves one position to the left (to position 9).
//
//
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
