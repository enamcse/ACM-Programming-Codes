#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class RockPaperScissorsMagicEasy {
public:

    ll bigmod(ll sonkha,ll ghat,ll vag_const){ll vag_shesh=1; while(ghat>0)  {if(ghat%2==1){vag_shesh=(vag_shesh*sonkha)%vag_const;}ghat/=2;sonkha=(sonkha*sonkha)%vag_const;} return vag_shesh;}
    ll inverse_mod(ll bivajok, ll vag_const) { return bigmod(bivajok,vag_const-2, vag_const);}
    ll fact[3005], two[3005];
	int count(vector <int> card, int score) {
	    int n = card.size();
        fact[0] = 1;
        two[0] = 1;
        for (int i = 1; i<=n; i++)
        {
            fact[i]  = (i*fact[i-1])%mod;
            two[i]  = (2*two[i-1])%mod;
        }
        if(score>n) return 0;
        ll ans = ((((((fact[n]*inverse_mod(fact[score],mod))%mod+mod)*inverse_mod(fact[n-score],mod))%mod+mod)*two[n-score])+mod)%mod;
        return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	RockPaperScissorsMagicEasy *obj;
	int answer;
	obj = new RockPaperScissorsMagicEasy();
	clock_t startTime = clock();
	answer = obj->count(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	vector <int> p0;
	int p1;
	int p2;

	// ----- test 0 -----
	disabled = false;
	p0 = {0,1,2};
	p1 = 2;
	p2 = 6;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = {1,2};
	p1 = 0;
	p2 = 4;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = {2,2,1,0,0};
	p1 = 10;
	p2 = 0;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = {0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2};
	p1 = 7;
	p2 = 286226628;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = {0,1,2,0,1,2,2,1,0};
	p1 = 8;
	p2 = 18;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// Alice and Bob are going to play a variant of the traditional rock-paper-scissors game.
// Their game is played using cards.
// Each card shows one of the three pictures: a rock, a paper, or scissors.
// There is a sufficient supply of cards of each type.
// Bob has already chosen a sequence of cards and he has arranged them into a row, face down.
// It is now Alice's turn to do the same.
// Once she does that, they will use the two sequences of cards to play the game:
// For each i, Alice's i-th card and Bob's i-th card will be revealed and compared using the standard rules of rock-paper-scissors.
// Whenever Alice's card wins, Alice gets a point.
// Alice gets no points for a loss or a tie.
//
//
//
// Alice has marked Bob's cards, so now she can tell which card has which symbol on it.
// You are given this information as a vector <int> card.
// Each element of card is between 0 and 2, inclusive: 0 is a rock, 1 is a paper, and 2 are scissors.
//
//
//
// You are also given an int score.
// Alice has just announced that she will get a total of score points.
//
//
//
// Let X be the number of sequences in which Alice can play her cards if she wants to achieve exactly score points.
// Return the value (X modulo 1,000,000,007).
//
//
// DEFINITION
// Class:RockPaperScissorsMagicEasy
// Method:count
// Parameters:vector <int>, int
// Returns:int
// Method signature:int count(vector <int> card, int score)
//
//
// CONSTRAINTS
// -The number of elements in card will be between 1 and 2,000, inclusive.
// -All elements of card will be between 0 and 2, inclusive.
// -score will be between 0 and 2,000, inclusive.
//
//
// EXAMPLES
//
// 0)
// {0,1,2}
// 2
//
// Returns: 6
//
//
// Bob has played his cards in the order rock-paper-scissors.
// Alice wants to score 2 points.
// Hence, she must win twice, and lose to Bob or tie him once.
//
//
//
// One possible way in which she can play her cards is paper-scissors-scissors:
// her paper beats Bob's rock (1 point), scissors beat paper (1 point), and scissors tie with scissors (0 points).
//
//
//
// There are five other ways how Alice can score 2 points: paper-scissors-paper, paper-paper-rock, paper-rock-rock, rock-scissors-rock, and scissors-scissors-rock.
//
//
// 1)
// {1,2}
// 0
//
// Returns: 4
//
//
//
// 2)
// {2,2,1,0,0}
// 10
//
// Returns: 0
//
//
//
// 3)
// {0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2}
// 7
//
// Returns: 286226628
//
//
//
// 4)
// {0,1,2,0,1,2,2,1,0}
// 8
//
// Returns: 18
//
//
//
// END KAWIGIEDIT TESTING
