#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;

int rr[] = {0,0,1,-1};
int cc[] = {1,-1,0,0};


class FoxConnection4 {
public:

    vector<string> b;
    int n, m;
    bool col[50][50];
    int K;
    ll res;
    ll dp[100][100];

    ll nCr(int n, int r)
    {
        if(r==1) return n;
        if(n==r) return 1;
        ll &ret = dp[n][r];
//        cout<<n<<" "<<r<<":"<<ret<<endl;
        if(ret!=-1) return ret;
//        cout<<n<<" "<<r<<"::"<<ret<<endl;
        ret = ((nCr(n-1,r)%mod)+(nCr(n-1, r-1)%mod))%mod;
//        cout<<n<<" "<<r<<":::"<<ret<<endl;
        return ret;
    }

    ll bfs(int x, int y)
    {

        queue<int>Q;
        col[x][y] =  true;
        int ret = 1,u,v;
        Q.push(x);
        Q.push(y);
        while(!Q.empty())
        {
            x = Q.front();
            Q.pop();
            y = Q.front();
            Q.pop();

            for (int i = 0; i<4; i++)
            {
                u=x+cc[i];
                v=y+rr[i];
                if(u<0||v<0||u>=n||v>=m||col[u][v]||b[u][v]!='.') continue;
                col[u][v]=true;
                ret++;
                Q.push(u);
                Q.push(v);
            }
        }

        if(ret<K) return 0;
        cout<<ret<<" "<<K<<endl;
        return (nCr(ret,K)%mod);
    }



	int howManyWays(vector <string> board, int k) {
	    clr(dp,-1);
		K = k;
		b = board;
		res=0;
		vector< pair<int, int> > ans;
		n = b.size();
		m = b[0].size();
		clr(col, false);


		for (int i = 0; i<n; i++)
		    for (int j = 0; j<m; j++)
		        if(!col[i][j]&&b[i][j]=='.') {res+=bfs(i,j);res%=mod;}
//        cout<<"here";
        return (int)res;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	FoxConnection4 *obj;
	int answer;
	obj = new FoxConnection4();
	clock_t startTime = clock();
	answer = obj->howManyWays(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	vector <string> p0;
	int p1;
	int p2;

	// ----- test 0 -----
	disabled = false;
	p0 = {"....."};
	p1 = 3;
	p2 = 3;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = {".#.#","#.#.",".#.#","#.#."};
	p1 = 2;
	p2 = 0;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = {"##.","...",".##"};
	p1 = 3;
	p2 = 3;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = {"....","....","....","...."};
	p1 = 4;
	p2 = 113;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = {".....#....",".#........","....#.##..","#......#..","....#.....","..........",".##....#..","..##......","........##","......#.#."};
	p1 = 8;
	p2 = 22369;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// The cities in Gridland form a rectangular grid.
// Some of the cities can be inhabited by foxes.
// We will call those cities available.
// You are given the map of Gridland in a vector <string> board.
// The character '.' (period) represents an available city, the character '#' a city that is not available.
// Two cities are considered adjacent if they lie next to each other in the same row or in the same column.
//
//
// You are also given an int k, meaning that k foxes would like to move into Gridland.
// Each fox must choose a different available city.
// Additionally, the set of cities they choose must be connected.
// (Formally, for each pair of cities that will be inhabited by our foxes there must be a way of reaching one from the other if you can only travel between adjacent cities and you can only travel via cities inhabited by our foxes.)
//
//
// Let X be the number of ways in which the foxes can choose their k cities.
// Return the value (X modulo 1,000,000,009).
//
//
// Two ways of choosing the cities are different if a city is chosen in one of them but not in the other.
// (In other words, the foxes are indistinguishable.)
//
// DEFINITION
// Class:FoxConnection4
// Method:howManyWays
// Parameters:vector <string>, int
// Returns:int
// Method signature:int howManyWays(vector <string> board, int k)
//
//
// CONSTRAINTS
// -board will contain between 1 and 10 elements, inclusive.
// -Every element in board will contain same number of characters.
// -Each element in board will contain between 1 and 10 characters, inclusive.
// -Each character in board will be '.' or '#'.
// -k will be between 1 and 8, inclusive.
//
//
// EXAMPLES
//
// 0)
// {"....."}
//
// 3
//
// Returns: 3
//
// There are 3 ways: "xxx..", ".xxx.", "..xxx".
//
// 1)
// {".#.#",
//  "#.#.",
//  ".#.#",
//  "#.#."}
//
// 2
//
// Returns: 0
//
// There are two foxes, but no two available cities are adjacent. Thus, there is no valid way to select the cities for the foxes.
//
// 2)
// {"##.",
//  "...",
//  ".##"}
//
// 3
//
// Returns: 3
//
//
//
// 3)
// {"....",
//  "....",
//  "....",
//  "...."}
// 4
//
// Returns: 113
//
//
//
// 4)
// {".....#....",
//  ".#........",
//  "....#.##..",
//  "#......#..",
//  "....#.....",
//  "..........",
//  ".##....#..",
//  "..##......",
//  "........##",
//  "......#.#."}
//
// 8
//
// Returns: 22369
//
//
//
// END KAWIGIEDIT TESTING
