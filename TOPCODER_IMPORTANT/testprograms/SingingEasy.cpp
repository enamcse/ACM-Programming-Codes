#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class SingingEasy {

public:
    int n, lim;
    vector <int>v;
    int dp[2105][2105];
    int rec(int pos, int alice, int bob)
    {
        if(pos==n) return 0;
        int &ret = dp[alice][bob], x, y;
        if(ret!=-1) return ret;
        x = rec(pos+1,pos,bob);
        if(alice!=lim) x+=abs(v[pos]-v[alice]);
        y = rec(pos+1,alice,pos);
        if(bob!=lim) y+=abs(v[pos]-v[bob]);
        ret = min( x , y );
        return ret;
    }

	int solve(vector <int> pitch) {
	    v = pitch;
		n = pitch.size();

		if(n<=2) return 0;
        clr(dp,-1);
        lim = n+10;

        return rec(0,lim,lim);
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	SingingEasy *obj;
	int answer;
	obj = new SingingEasy();
	clock_t startTime = clock();
	answer = obj->solve(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	vector <int> p0;
	int p1;

	// ----- test 0 -----
	disabled = false;
	p0 = {1,3,8,12,13};
	p1 = 7;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = {1,5,6,2,1};
	p1 = 3;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = {5,5,5,5,4,4,4,4};
	p1 = 0;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = {1000000};
	p1 = 0;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = {24,13,2,4,54,23,12,53,12,23,42,13,53,12,24,12,11,24,42,52,12,32,42};
	p1 = 188;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// Alice and Bob are going to sing a song together.
// For simplicity, we will assign the numbers 1 through 1,000,000 to the pitches that occur in the song (from the lowest to the highest).
// Both Alice and Bob are able to sing all of these pitches.
// You are given a vector <int> pitch containing the pitches of all notes in the song, in order.
// Each note of the song will be sung by exactly one of our singers.
//
//
//
// Changing the pitch of one's voice is exhausting.
// Given a sequence of pitches to sing, the difficulty for the singer can be computed by summing up the differences between consecutive pitches.
// For example, the difficulty of the sequence 8, 8, 13, 12 is abs(8-8) + abs(13-8) + abs(12-13) = 0+5+1 = 6.
//
//
//
// The total difficulty of singing the song can be computed as the difficulty for Alice plus the difficulty for Bob.
// Return the smallest possible total difficulty of singing the given song.
//
//
// DEFINITION
// Class:SingingEasy
// Method:solve
// Parameters:vector <int>
// Returns:int
// Method signature:int solve(vector <int> pitch)
//
//
// CONSTRAINTS
// -The number of elements in pitches will be between 1 and 2,000, inclusive.
// -all elements in pitch will be between 1 and 1,000,000, inclusive.
//
//
// EXAMPLES
//
// 0)
// {1,3,8,12,13}
//
// Returns: 7
//
// One optimal solution is to let Alice sing the first two notes and Bob the remaining three.
// Then, Alice will sing the sequence of pitches {1,3} and Bob will sing {8,12,13}.
// The difficulty for Alice is abs(3-1) = 2.
// The difficulty for Bob is abs(12-8) + abs(13-12) = 5.
// Thus, the total difficulty is 2+5 = 7.
//
// 1)
// {1,5,6,2,1}
//
// Returns: 3
//
// One optimal solution is to let our singers sing in the order Alice-Bob-Bob-Alice-Alice.
// In this case Alice sings the sequence of pitches {1,2,1} and Bob sings {5,6}.
// Hence the difficulty for Alice is 2 and the difficulty for Bob is 1.
//
// 2)
// {5,5,5,5,4,4,4,4}
//
// Returns: 0
//
//
//
// 3)
// {1000000}
//
// Returns: 0
//
//
//
// 4)
// {24,13,2,4,54,23,12,53,12,23,42,13,53,12,24,12,11,24,42,52,12,32,42}
//
// Returns: 188
//
//
//
// END KAWIGIEDIT TESTING
