#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class TaroGrid {
public:
	int getNumber(vector <string> grid) {
		int n = grid.size(), ans = 0, pre , now;

		for (int i = 0; i<n; i++)
        {
            pre=0;
            for (int j = 0; j<n; j++)
            {
                if(pre==0)
                {
                    now=1;
                    if(grid[j][i]=='W') pre=1;
                    else pre = 2;
                }
                else if(pre==1)
                {
                    if(grid[j][i]=='W') now++;
                    else pre=2, now=1;
                }
                else
                {
                    if(grid[j][i]=='B') now++;
                    else pre=1, now=1;
                }
                ans = max(ans, now);
            }
        }
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	TaroGrid *obj;
	int answer;
	obj = new TaroGrid();
	clock_t startTime = clock();
	answer = obj->getNumber(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	int p1;

	{
	// ----- test 0 -----
	string t0[] = {"W"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	string t0[] = {"WB","BW"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {"BWW","BBB","BWB"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	string t0[] = {"BWBW","BBWB","WWWB","BWWW"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	string t0[] = {"BWB","BBW","BWB"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	string t0[] = {"BBWWBBWW","BBWWBBWW","WWBBWWBB","WWBBWWBB","BBWWBBWW","BBWWBBWW","WWBBWWBB","WWBBWWBB"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// Cat Taro has a square grid with N rows and N columns.
// Each cell of the grid is painted either black or white.
// You are given a vector <string> grid which represents the current state of the grid.
// Each element of grid represents one row of the grid.
// In grid, the character 'W' represents a white cell, and the character 'B' represents a black cell.
//
//
//
//
// Taro wants to choose a set of consecutive cells that are in the same column and are painted in the same color.
// Return the largest number of cells he can choose.
//
//
// DEFINITION
// Class:TaroGrid
// Method:getNumber
// Parameters:vector <string>
// Returns:int
// Method signature:int getNumber(vector <string> grid)
//
//
// CONSTRAINTS
// -N will be between 1 and 50, inclusive.
// -grid will contain exactly N elements.
// -Each element of grid will contain exactly N characters.
// -Each character in grid will be 'W' or 'B'.
//
//
// EXAMPLES
//
// 0)
// {"W"}
//
// Returns: 1
//
//
//
// 1)
// {"WB",
//  "BW"}
//
// Returns: 1
//
//
//
// 2)
// {"BWW",
//  "BBB",
//  "BWB"}
//
// Returns: 3
//
// He can choose the entire leftmost column (i.e., character 0 of each element of grid).
//
// 3)
// {"BWBW",
//  "BBWB",
//  "WWWB",
//  "BWWW"}
//
// Returns: 3
//
//
//
// 4)
// {"BWB",
//  "BBW",
//  "BWB"}
//
// Returns: 3
//
//
//
// 5)
// {"BBWWBBWW",
//  "BBWWBBWW",
//  "WWBBWWBB",
//  "WWBBWWBB",
//  "BBWWBBWW",
//  "BBWWBBWW",
//  "WWBBWWBB",
//  "WWBBWWBB"}
//
// Returns: 2
//
// Note that the chosen cells must be consecutive.
//
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
