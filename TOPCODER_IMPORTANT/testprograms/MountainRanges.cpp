#include <bits/stdc++.h>

#define all(a)           a.begin(),a.end()
#define chng(a,b)       a^=b^=a^=b;
#define clr(y,z)        memset(y,z,sizeof(y))
#define cntbit(mask)     __builtin_popcount(mask)
#define CROSS(a,b,c,d) ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))
#define fr(i,a,b)       for(i=a;i<=b;i++)
#define inf             (1e9)
#define mod             1000000007
#define ll              long long
#define oo              (1<<30)
#define pb              push_back
#define PI              3.141592653589793
#define pi              (2*acos(0))
#define pp              pop_back
#define rev(a)          reverse(all(a));
#define SIZE(s)         ((int)s.size())
#define saja(a)         sort(all(a))
#define sqr(a)          ((a)*(a))
#define SZ              50005
#define V(a)            vector<(a)>

using namespace std;


class MountainRanges {
public:
	int countPeaks(vector <int> heights) {
		int n = heights.size(), cnt=0, u, v;
		bool flag;
		for (int i = 0; i<n; i++)
        {
            flag = true;
            u = i - 1;
            v = i + 1;
            if(u>=0 && heights[i] <= heights[u] ) flag = false;
            if(v<n && heights[i] <= heights[v] ) flag = false;
            if(flag) cnt++;

        }
        return cnt;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	MountainRanges *obj;
	int answer;
	obj = new MountainRanges();
	clock_t startTime = clock();
	answer = obj->countPeaks(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	vector <int> p0;
	int p1;

	// ----- test 0 -----
	disabled = false;
	p0 = {5,6,2,4};
	p1 = 2;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = {1,1,1,1,1,1,1};
	p1 = 0;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = {2,1};
	p1 = 1;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = {2,5,3,7,2,8,1,3,1};
	p1 = 4;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = {1};
	p1 = 1;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 5 -----
	disabled = false;
	p0 = {1,2,3,4,4,3,2,1};
	p1 = 0;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// Tom is in charge of a tourist agency.
// He has a lovely picture of the local mountain range.
// He would like to sell it to the tourists but first he needs to know how many peaks are visible in the picture.
//
//
//
// The mountain range in the picture can be seen as a sequence of heights.
// You are given these heights as a vector <int> height.
// An element of height is called a peak if its value is strictly greater than each of the values of adjacent elements.
// Compute and return the number of peaks in the given mountain range.
//
//
//
// DEFINITION
// Class:MountainRanges
// Method:countPeaks
// Parameters:vector <int>
// Returns:int
// Method signature:int countPeaks(vector <int> heights)
//
//
// CONSTRAINTS
// -heights will contain between 1 and 50 elements, inclusive.
// -Each element of heights will be between 1 and 100, inclusive.
//
//
// EXAMPLES
//
// 0)
// {5, 6, 2, 4}
//
// Returns: 2
//
// Element 1 (0-based index) is a peak.
// Its height is 6, which is strictly greater than each of its neighbors' heights (5 and 2).
// Element 3 is also a peak since its height is 4 and that is strictly greater than its neighbor's height (which is 2).
//
// 1)
// {1, 1, 1, 1, 1, 1, 1}
//
// Returns: 0
//
// This is a very flat mountain with no peaks.
//
// 2)
// {2, 1}
//
// Returns: 1
//
// Element 0 is a peak.
//
// 3)
// {2,5,3,7,2,8,1,3,1}
//
// Returns: 4
//
// The peaks here are the elements with 0-based indices 1, 3, 5, and 7. Their heights are 5, 7, 8, and 3, respectively.
//
// 4)
// {1}
//
// Returns: 1
//
// Element 0 is a peak. Even though it has no neighbors, the condition from the problem statement is still satisfied.
//
// 5)
// {1,2,3,4,4,3,2,1}
//
// Returns: 0
//
// According to our definition there is no peak in this mountain range.
//
// END KAWIGIEDIT TESTING
